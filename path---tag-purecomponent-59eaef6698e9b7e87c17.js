webpackJsonp([0x7e56526471b6],{1307:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"组件 纯组件  ，和   类似，都是定义一个组件类。不同是   没有实现  ，而   通过   和   的 浅比较 实现了。 在下一节中将会详细介绍。 函数组件 定义 React 组件的 最简单 方式就是定义一个函数组件，它接受单一的 props 并返回一个 React 元素。 在 函数组件 中，它的输入输出全部由 props 决定，且不会产生任何副作用，这说明  函数组件 也是 无状态组件 。 在函数组件中，无法修改 props，无法使用 state…",html:'<h1 id="组件"><a href="#%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>组件</h1>\n<h2 id="纯组件"><a href="#%E7%BA%AF%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>纯组件</h2>\n<p><code class="language-text">React.PureComponent</code> ，和 <code class="language-text">React.Component</code> 类似，都是定义一个组件类。不同是 <code class="language-text">React.Component</code> 没有实现 <code class="language-text">shouldComponentUpdate()</code>，而 <code class="language-text">React.PureComponent</code> 通过 <code class="language-text">props</code> 和 <code class="language-text">state</code> 的<strong>浅比较</strong>实现了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="7947566192249300000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// React.PureComponent 纯组件\nclass Counter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  render() {\n    return (\n      <button onClick={() => this.setState((state) => ({ count: state.count + 1 }))}>Count: {this.state.count}</button>\n    );\n  }\n}`, `7947566192249300000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// React.PureComponent 纯组件</span>\n<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Count<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在下一节中将会详细介绍。</p>\n<h2 id="函数组件"><a href="#%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数组件</h2>\n<p>定义 React 组件的<strong>最简单</strong>方式就是定义一个函数组件，它接受单一的 props 并返回一个 React 元素。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="88995321042874970000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 函数组件\nfunction Counter(props) {\n  return <div>Counter: {props.count}</div>;\n}\n// 类组件\nclass Counter extends React.Component {\n  render() {\n    return <div>Counter: {this.props.count}</div>;\n  }\n}`, `88995321042874970000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 函数组件</span>\n<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Counter<span class="token punctuation">:</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 类组件</span>\n<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Counter<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>在 函数组件 中，它的输入输出全部由 props 决定，且不会产生任何副作用，这说明 <strong>函数组件 也是 无状态组件</strong>。</li>\n<li>在函数组件中，无法修改 props，无法使用 state 及组件的生命周期，说明 <strong>函数组件 也是 展示组件</strong>。</li>\n<li>函数组件 的功能只是接收 props，渲染页面，它不执行与 UI 无关的逻辑处理，它只是一个<strong>纯函数</strong>。</li>\n<li>函数组件，相对于类组件来说，更加简洁。无论是复用性还是性能，都<strong>优于类组件</strong>。</li>\n</ul>\n<h2 id="受控组件与非受控组件"><a href="#%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>受控组件与非受控组件</h2>\n<p><strong>受控和非受控主要是取决于组件是否受父级传入的 props 控制</strong></p>\n<p>用 props 传入数据的话，组件可以被认为是<strong>受控</strong>（因为组件被父级传入的 props 控制）。</p>\n<p>数据只保存在组件内部的 state 的话，是<strong>非受控</strong>组件（因为外部没办法直接控制 state）。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97601402872910660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export default class AnForm extends React.Component {\n  state = {\n    name: \'\'\n  };\n  handleSubmitClick = () => {\n    console.log(\'非受控组件: \', this._name.value);\n    console.log(\'受控组件: \', this.state.name);\n  };\n  handleChange = (e) => {\n    this.setState({\n      name: e.target.value\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmitClick}>\n        <label>\n          非受控组件:\n          <input type=\'text\' defaultValue=\'default\' ref={(input) => (this._name = input)} />\n        </label>\n        <label>\n          受控组件:\n          <input type=\'text\' value={this.state.name} onChange={this.handleChange} />\n        </label>\n        <input type=\'submit\' value=\'Submit\' />\n      </form>\n    );\n  }\n}`, `97601402872910660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AnForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">handleSubmitClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'非受控组件: \'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'受控组件: \'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmitClick<span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>label<span class="token operator">></span>\n          非受控组件<span class="token punctuation">:</span>\n          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">\'text\'</span> defaultValue<span class="token operator">=</span><span class="token string">\'default\'</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> input<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n        <span class="token operator">&lt;</span>label<span class="token operator">></span>\n          受控组件<span class="token punctuation">:</span>\n          <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">\'text\'</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">\'submit\'</span> value<span class="token operator">=</span><span class="token string">\'Submit\'</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="受控组件"><a href="#%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>受控组件</h3>\n<p>与 html 不同的是，在 React 中，<code class="language-text">&lt;input&gt;</code>或<code class="language-text">&lt;select&gt;</code>、<code class="language-text">&lt;textarea&gt;</code>等这类组件，不会主动维持自身状态，并根据用户输入进行更新。它们都要绑定一个<code class="language-text">onChange</code>事件；每当状态发生变化时，都要写入组件的 state 中，在 React 中被称为<strong>受控组件</strong>。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10512232898626640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export default class AnForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \'\' };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  render() {\n    return <input type=\'text\' value={this.state.value} onChange={this.handleChange} />;\n  }\n}`, `10512232898626640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AnForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">\'\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">\'text\'</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\n<p><strong>onChange &#x26; value 模式</strong>（单选按钮和复选按钮对应的是 checked props）</p>\n</li>\n<li>\n<p>react 通过这种方式<strong>消除了组件的局部状态，</strong>使得应用的整个<strong>状态可控</strong>。</p>\n</li>\n<li>\n<p>注意 <code class="language-text">&lt;input type=&quot;file&quot; /&gt;</code>，它是一个<strong>非受控组件</strong>。</p>\n</li>\n<li>\n<p>可以使用计算属性名将多个相似的操作组合成一个。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35256537521250263000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`this.setState({\n[name]: value\n});`, `35256537521250263000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h3 id="非受控组件"><a href="#%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>非受控组件</h3>\n<p>非受控组件不再将数据保存在 state，而使用 refs，将真实数据保存在 DOM 中。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20747017539527836000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export default class AnForm extends Component {\n  handleSubmitClick = () => {\n    const name = this._name.value;\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\'text\' ref={(input) => (this._name = input)} />\n        <button onClick={this.handleSubmitClick}>Sign up</button>\n      </div>\n    );\n  }\n}`, `20747017539527836000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AnForm</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">handleSubmitClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">\'text\'</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> input<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmitClick<span class="token punctuation">}</span><span class="token operator">></span>Sign up<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\n<p><strong>非受控组件是最简单快速</strong>的实现方式，项目中出现极简的表单时，使用它，但<strong>受控组件才是是最权威的</strong>。</p>\n</li>\n<li>\n<p>通常指定一个 <strong>defaultValue/defaultChecked</strong> 默认值来控制初始状态，不使用 value。</p>\n</li>\n<li>\n<p>非受控组件相比于受控组件，更容易同时集成 React 和非 React 代码。</p>\n</li>\n<li>\n<p>使用场景</p>\n<p>| 特征 | 非受控组件 | 受控组件 |\n| --- | --- | --- |\n| one-time value retrieval (e.g. on submit) | ✅ | ✅ |\n| <a href="https://goshakkk.name/submit-time-validation-react/" target="_blank" rel="nofollow noreferrer noopener">validating on submit</a> | ✅ | ✅ |\n| <a href="https://goshakkk.name/instant-form-fields-validation-react/" target="_blank" rel="nofollow noreferrer noopener">instant field validation</a> | ❌ | ✅ |\n| <a href="https://goshakkk.name/form-recipe-disable-submit-button-react/" target="_blank" rel="nofollow noreferrer noopener">conditionally disabling submit button</a> | ❌ | ✅ |\n| enforcing input format | ❌ | ✅ |\n| several inputs for one piece of data | ❌ | ✅ |\n| <a href="https://goshakkk.name/array-form-inputs/" target="_blank" rel="nofollow noreferrer noopener">dynamic inputs</a> | ❌ | ✅ |</p>\n</li>\n</ul>\n<h2 id="有状态组件与无状态组件"><a href="#%E6%9C%89%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E%E6%97%A0%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>有状态组件与无状态组件</h2>\n<h3 id="有状态组件"><a href="#%E6%9C%89%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>有状态组件</h3>\n<p>通过 state 管理状态</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34419328136985980000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`export default class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicks: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState((state) => ({ clicks: state.clicks + 1 }));\n  }\n  render() {\n    return <Button onClick={this.handleClick} text={\\`You\'ve clicked me \\${this.state.clicks} times!\\`} />;\n  }\n}`, `34419328136985980000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> clicks<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> clicks<span class="token punctuation">:</span> state<span class="token punctuation">.</span>clicks <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span> text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You\'ve clicked me </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>clicks<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="无状态组件"><a href="#%E6%97%A0%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>无状态组件</h3>\n<p>输入输出数据完全由 props 决定，而且不会产生任何副作用。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52250479304193820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const Button = (props) => <button onClick={props.onClick}>{props.text}</button>;`, `52250479304193820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<ul>\n<li>无状态组件一般会搭配高阶组件（简称：HOC）一起使用，高阶组件用来托管 state，Redux 框架就是通过 store 管理数据源和所有状态，其中所有负责展示的组件都使用无状态函数式的写法。</li>\n<li>一个简单的 无状态(stateless) 按钮组件，仅依赖于 props(属性) ，这也称为<strong>函数式组件</strong>。</li>\n</ul>\n<h2 id="展示组件与容器组件"><a href="#%E5%B1%95%E7%A4%BA%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>展示组件与容器组件</h2>\n<h3 id="展示组件"><a href="#%E5%B1%95%E7%A4%BA%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>展示组件</h3>\n<p>展示组件指不关心数据是怎么加载和变动的，只关注于页面展示效果的组件。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45468421734718960000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const { todos } = this.props;\n    return (\n      <div>\n        <ul>\n          {todos.map((item, index) => {\n            return <li key={item.id}>{item.name}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n}`, `45468421734718960000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> todos <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n          <span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>只能通过 <strong>props</strong> 的方式<strong>接收数据和进行回调</strong>(callback)操作。</li>\n<li><strong>很少拥有自己的状态</strong>，即使有也是用于展示 UI 状态的。</li>\n<li>通常允许通过 <strong>this.props.children</strong> 方式来包含其他组件。</li>\n<li><strong>内部可以包含展示组件和容器组件</strong>，通常会包含一些自己的 DOM 标记和样式(style)</li>\n<li>对应用程序的其他部分没有依赖关系，例如 Flux 操作或 store。</li>\n<li>会被写成函数式组件除非该组件需要自己的状态，生命周期或者做一些性能优化。</li>\n</ul>\n<h3 id="容器组件"><a href="#%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>容器组件</h3>\n<p>容器组件只关心数据是怎么加载和变动的，而不关注于页面展示效果。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54212586738796650000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`//容器组件\nclass TodoListContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData() {\n    fetch(\'/api/todos\').then((data) => {\n      this.setState({\n        todos: data\n      });\n    });\n  }\n  render() {\n    return (\n      <div>\n        <TodoList todos={this.state.todos} />\n      </div>\n    );\n  }\n}`, `54212586738796650000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">//容器组件</span>\n<span class="token keyword">class</span> <span class="token class-name">TodoListContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fetchData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/api/todos\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        todos<span class="token punctuation">:</span> data\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>TodoList todos<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><strong>内部可以包含容器组件和展示组件</strong>，但通常没有任何自己的 DOM 标记，除了一些包装 divs，并且从不具有任何样式。</li>\n<li>提供数据和行为给其他的展示组件或容器组件。</li>\n<li>可以调用 Flux 操作并将它们作为回调函数（callback）提供给展示组件。</li>\n<li>往往是<strong>有状态</strong>的，因为它们倾向于<strong>作为数据源</strong></li>\n<li>通常使用<strong>高阶组件</strong>生成，例如 React Redux 的 connect()</li>\n</ul>\n<h2 id="高阶组件"><a href="#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>高阶组件</h2>\n<p><strong>高阶函数</strong>的定义：接收函数作为输入，或者输出另一个函数的一类函数，被称作高阶函数。</p>\n<p>对于<strong>高阶组件</strong>，它描述的便是接受 React 组件作为输入，输出一个新的 React 组件的组件。</p>\n<p>更通俗的描述为，高阶组件通过包裹（wrapped）被传入的 React 组件，经过一系列处理，最终返回一个<strong>相对增强（enhanced）的 React 组件</strong>，供其他组件调用。使我们的代码更具有复用性、逻辑性和抽象特性，它可以对 render 方法做劫持，也<strong>可以控制 props 、state</strong>。</p>\n<p>实现高阶组件的方法有以下两种：</p>\n<ul>\n<li><strong>属性代理（props proxy）</strong>，高阶组件通过被包裹的 React 组件来操作 props。</li>\n<li><strong>反向继承（inheritance inversion）</strong>，高阶组件继承于被包裹的 React 组件。</li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29079821129310822000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 属性代理\nexport default function withHeader(WrappedComponent) {\n  return class HOC extends React.Component { // 继承与 React.component\n    render() {\n      const newProps = {\n        test:\'hoc\'\n      }\n      // 透传props，并且传递新的newProps\n      return <div>\n        <WrappedComponent {...this.props} {...newProps}/>\n      </div>\n    }\n  }\n}\n\n// 反向继承\nexport default function (WrappedComponent) {\n  return class Inheritance extends WrappedComponent { // 继承于被包裹的 React 组件\n    componentDidMount() {\n      // 可以方便地得到state，做一些更深入的修改。\n      console.log(this.state);\n    }\n    render() {\n      return super.render();\n    }\n  }\n}`, `29079821129310822000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 属性代理</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">HOC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span> <span class="token comment">// 继承与 React.component</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> newProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span><span class="token string">\'hoc\'</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 透传props，并且传递新的newProps</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>this<span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>newProps<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 反向继承</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Inheritance</span> <span class="token keyword">extends</span> <span class="token class-name">WrappedComponent</span> <span class="token punctuation">{</span> <span class="token comment">// 继承于被包裹的 React 组件</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 可以方便地得到state，做一些更深入的修改。</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>注意：不要在 HOC 内修改一个组件的原型（或以其它方式修改组件）</li>\n<li>贯穿传递不相关 props 属性给被包裹的组件，帮助确保高阶组件最大程度的灵活性和可重用性</li>\n<li>应该使用<strong>最大化的组合性</strong></li>\n<li>为了便于调试，可以选择一个显示名字，传达它是一个高阶组件的结果，<code class="language-text">WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;;</code></li>\n<li><strong>不要在 render() 方法中创建 HOC</strong>，否则，每一次渲染，都会重新创建渲染 HOC</li>\n<li>必须将原始组件的静态方法在 HOC 中做拷贝，否则 HOC 将没有原始组件的任何静态方法</li>\n<li>Refs 属性不能贯穿传递，我们可以使用 React.forwardRef 解决</li>\n</ul>\n<h2 id="hook-组件"><a href="#hook-%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hook 组件</h2>\n<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>但与 class 生命周期不同的是，Hook 更接近于实现状态同步，而不是响应生命周期事件。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11515860024716718000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`import React, { useState, useEffect } from \'react\';\n\nfunction Example() {\n  // 声明一个叫 &quot;count&quot; 的 state 变量\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    // 需要在 componentDidMount 执行的内容\n    return function cleanup() {\n      // 需要在 componentWillUnmount 执行的内容\n    };\n  }, []);\n\n  useEffect(() => {\n    // 在 componentDidMount，以及 count 更改时 componentDidUpdate 执行的内容\n    document.title = \'You clicked \' + count + \' times\';\n    return () => {\n      // 需要在 count 更改时 componentDidUpdate（先于 document.title = ... 执行，遵守先清理后更新）\n      // 以及 componentWillUnmount 执行的内容\n    }; // 当函数中 Cleanup 函数会按照在代码中定义的顺序先后执行，与函数本身的特性无关\n  }, [count]); // 仅在 count 更改时更新\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}`, `11515860024716718000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 声明一个叫 "count" 的 state 变量</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 需要在 componentDidMount 执行的内容</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 需要在 componentWillUnmount 执行的内容</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在 componentDidMount，以及 count 更改时 componentDidUpdate 执行的内容</span>\n    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">\'You clicked \'</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">\' times\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 需要在 count 更改时 componentDidUpdate（先于 document.title = ... 执行，遵守先清理后更新）</span>\n      <span class="token comment">// 以及 componentWillUnmount 执行的内容</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 当函数中 Cleanup 函数会按照在代码中定义的顺序先后执行，与函数本身的特性无关</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅在 count 更改时更新</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>p<span class="token operator">></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Hooks 组件更接近于实现状态同步，而不是响应生命周期事件</li>\n<li>只能在<strong>函数最外层</strong>调用 Hook。只能在 <strong>React 的函数组件</strong>中调用 Hook。</li>\n<li><code class="language-text">useLayoutEffect</code> 与 <code class="language-text">componentDidMount</code>、<code class="language-text">componentDidUpdate</code> 的调用阶段是一样的。但是，我们推荐你<strong>一开始先用 useEffect</strong>，只有当它出问题的时候再尝试使用 <code class="language-text">useLayoutEffect</code></li>\n<li>与 <code class="language-text">componentDidMount</code> 或 <code class="language-text">componentDidUpdate</code> 不同的是，Hook 在浏览器完成布局与绘制<strong>之后</strong>，传给 <code class="language-text">useEffect</code> 的函数会延迟调用，但会保证在任何新的渲染前执行</li>\n<li>effect 的清除（cleanup）并不会读取“最新”的 props 。它只能读取到定义它的那次渲染中的 props 值</li>\n<li>effect 中可以读取到最新的 count 状态值，并不是 count 的值在“不变”的 effect 中发生了改变，而是 effect 函数本身在每一次渲染中都不相同</li>\n<li>在 class 组件生命周期的思维模型中，副作用的行为和渲染输出是不同的。UI 渲染是被 props 和 state 驱动的，并且能确保步调一致，但副作用并不是这样。这是一类常见问题的来源。</li>\n<li>而在 <code class="language-text">useEffect</code> 的思维模型中，默认都是同步的。副作用变成了 React 数据流的一部分。对于每一个 <code class="language-text">useEffect</code> 调用，一旦你处理正确，你的组件能够更好地处理边缘情况。</li>\n</ul>\n<h1 id="component-源码解读"><a href="#component-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component 源码解读</h1>\n<p>首先看一下 React.Component 结构</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96297706694107460000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// ReactBaseClasses.js 文件\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props; // 属性 props\n  this.context = context; // 上下文 context\n  // If a component has string refs, we will assign a different object later.\n  // 初始化 refs，为 {}，主要在 stringRef 中使用，将 stringRef 节点的实例挂载在 this.refs 上\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue; // updater\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * 设置 state 的子集，使用该方法更新 state，避免 state 的值为可突变的状态\n * \\`shouldComponentUpdate\\`只是浅比较更新，\n * 可突变的类型可能导致 \\`shouldComponentUpdate\\` 返回 false，无法重新渲染\n * Immutable.js 可以解决这个问题。它通过结构共享提供不可突变的，持久的集合：\n * 不可突变: 一旦创建，集合就不能在另一个时间点改变。\n * 持久性: 可以使用原始集合和一个突变来创建新的集合。原始集合在新集合创建后仍然可用。\n * 结构共享: 新集合尽可能多的使用原始集合的结构来创建，以便将复制操作降至最少从而提升性能。\n *\n * 并不能保证 \\`this.state\\` 通过 \\`setState\\` 后不可突变的更新，它可能还返回原来的数值\n * 不能保证 \\`setrState\\` 会同步更新 \\`this.state\\`\n * \\`setState\\` 是通过队列形式来更新 state ，当 执行 \\`setState\\` 时，\n * 会把 state 浅合并后放入状态队列，然后批量执行，即它不是立即更新的。\n * 不过，你可以在 callback 回调函数中获取最新的值\n *\n * 注意：对于异步渲染，我们应在 \\`getSnapshotBeforeUpdate\\` 中读取 \\`state\\`、\\`props\\`,\n * 而不是 \\`componentWillUpdate\\`\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function(partialState, callback) {\n  // 当 partialState 状态为 object 或 function类型 或 null 时，\n  // 执行 this.updater.enqueueSetState 方法，否则报错\n  invariant(\n    typeof partialState === \'object\' || typeof partialState === \'function\' || partialState == null,\n    \'setState(...): takes an object of state variables to update or a \' +\n      \'function which returns an object of state variables.\'\n  );\n  // 将 \\`setState\\` 事务放入队列中\n  this.updater.enqueueSetState(this, partialState, callback, \'setState\');\n};\n\n/**\n * 强制更新，当且仅当当前不处于 DOM 事物（transaction）中才会被唤起\n * This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * 默认情况下，当组件的state或props改变时，组件将重新渲染。\n * 如果你的\\`render()\\`方法依赖于一些其他的数据，\n * 你可以告诉React组件需要通过调用\\`forceUpdate()\\`重新渲染。\n * 调用\\`forceUpdate()\\`会导致组件跳过 \\`shouldComponentUpdate()\\`,\n * 直接调用 \\`render()\\`。但会调用 \\`componentWillUpdate\\` 和 \\`componentDidUpdate\\`。\n * 这将触发组件的正常生命周期方法,包括每个子组件的 shouldComponentUpdate() 方法。\n * forceUpdate 就是重新 render 。\n * 有些变量不在 state 上，当时你又想达到这个变量更新的时候，刷新 render ；\n * 或者 state 里的某个变量层次太深，更新的时候没有自动触发 render 。\n * 这些时候都可以手动调用 forceUpdate 自动触发 render\n *\n * @param {?function} callback 更新完成后的回调函数.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function(callback) {\n  // updater 强制更新\n  this.updater.enqueueForceUpdate(this, callback, \'forceUpdate\');\n};`, `96297706694107460000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// ReactBaseClasses.js 文件</span>\n<span class="token comment">/**\n * Base class helpers for the updating state of a component.\n */</span>\n<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span> <span class="token comment">// 属性 props</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span> <span class="token comment">// 上下文 context</span>\n  <span class="token comment">// If a component has string refs, we will assign a different object later.</span>\n  <span class="token comment">// 初始化 refs，为 {}，主要在 stringRef 中使用，将 stringRef 节点的实例挂载在 this.refs 上</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>\n  <span class="token comment">// We initialize the default updater but the real one gets injected by the</span>\n  <span class="token comment">// renderer.</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span> <span class="token comment">// updater</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * 设置 state 的子集，使用该方法更新 state，避免 state 的值为可突变的状态\n * `shouldComponentUpdate`只是浅比较更新，\n * 可突变的类型可能导致 `shouldComponentUpdate` 返回 false，无法重新渲染\n * Immutable.js 可以解决这个问题。它通过结构共享提供不可突变的，持久的集合：\n * 不可突变: 一旦创建，集合就不能在另一个时间点改变。\n * 持久性: 可以使用原始集合和一个突变来创建新的集合。原始集合在新集合创建后仍然可用。\n * 结构共享: 新集合尽可能多的使用原始集合的结构来创建，以便将复制操作降至最少从而提升性能。\n *\n * 并不能保证 `this.state` 通过 `setState` 后不可突变的更新，它可能还返回原来的数值\n * 不能保证 `setrState` 会同步更新 `this.state`\n * `setState` 是通过队列形式来更新 state ，当 执行 `setState` 时，\n * 会把 state 浅合并后放入状态队列，然后批量执行，即它不是立即更新的。\n * 不过，你可以在 callback 回调函数中获取最新的值\n *\n * 注意：对于异步渲染，我们应在 `getSnapshotBeforeUpdate` 中读取 `state`、`props`,\n * 而不是 `componentWillUpdate`\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */</span>\n<span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">partialState<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当 partialState 状态为 object 或 function类型 或 null 时，</span>\n  <span class="token comment">// 执行 this.updater.enqueueSetState 方法，否则报错</span>\n  <span class="token function">invariant</span><span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> partialState <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> partialState <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">||</span> partialState <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token string">\'setState(...): takes an object of state variables to update or a \'</span> <span class="token operator">+</span>\n      <span class="token string">\'function which returns an object of state variables.\'</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将 `setState` 事务放入队列中</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">\'setState\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * 强制更新，当且仅当当前不处于 DOM 事物（transaction）中才会被唤起\n * This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * 默认情况下，当组件的state或props改变时，组件将重新渲染。\n * 如果你的`render()`方法依赖于一些其他的数据，\n * 你可以告诉React组件需要通过调用`forceUpdate()`重新渲染。\n * 调用`forceUpdate()`会导致组件跳过 `shouldComponentUpdate()`,\n * 直接调用 `render()`。但会调用 `componentWillUpdate` 和 `componentDidUpdate`。\n * 这将触发组件的正常生命周期方法,包括每个子组件的 shouldComponentUpdate() 方法。\n * forceUpdate 就是重新 render 。\n * 有些变量不在 state 上，当时你又想达到这个变量更新的时候，刷新 render ；\n * 或者 state 里的某个变量层次太深，更新的时候没有自动触发 render 。\n * 这些时候都可以手动调用 forceUpdate 自动触发 render\n *\n * @param {?function} callback 更新完成后的回调函数.\n * @final\n * @protected\n */</span>\n<span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">forceUpdate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// updater 强制更新</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueForceUpdate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">\'forceUpdate\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中 <code class="language-text">this.refs</code> 值 <code class="language-text">emptyObject</code> 为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17980650733999081000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 设置 refs 初始值为 {}\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject); // __DEV__ 模式下， 冻结 emptyObject\n}\n// Object.freeze() 冻结一个对象，被冻结的对象不能被修改（添加，删除，\n// 修改已有属性的可枚举性、可配置性、可写性与属性值，原型）；返回和传入的参数相同的对象。`, `17980650733999081000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 设置 refs 初始值为 {}</span>\n<span class="token keyword">const</span> emptyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>emptyObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// __DEV__ 模式下， 冻结 emptyObject</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Object.freeze() 冻结一个对象，被冻结的对象不能被修改（添加，删除，</span>\n<span class="token comment">// 修改已有属性的可枚举性、可配置性、可写性与属性值，原型）；返回和传入的参数相同的对象。</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">ReactNoopUpdateQueue</code> 为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15675148880808387000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// ReactNoopUpdateQueue.js 文件\n/**\n * 这是一个关于 更新队列(update queue) 的抽象 API\n */\nconst ReactNoopUpdateQueue = {\n  /**\n   * 检查复合组件是否装载完成（被插入树中）\n   * @param {ReactClass} publicInstance 测试实例单元\n   * @return {boolean} 装载完成为 true，否则为 false\n   * @protected\n   * @final\n   */\n  isMounted: function(publicInstance) {\n    return false;\n  },\n\n  /**\n   * 强制更新队列，当且仅当当前不处于 DOM 事物（transaction）中才会被唤起\n   *\n   * 当 state 里的某个变量层次太深，更新的时候没有自动触发 render 。\n   * 这些时候就可以调用该方法强制更新队列\n   *\n   * 该方法将跳过 \\`shouldComponentUpdate()\\`, 直接调用 \\`render()\\`, 但它会唤起\n   * \\`componentWillUpdate\\` 和 \\`componentDidUpdate\\`.\n   *\n   * @param {ReactClass} publicInstance 将被重新渲染的实例\n   * @param {?function} callback 组件更新后的回调函数.\n   * @param {?string} callerName 在公共 API 调用该方法的函数名称.\n   * @internal\n   */\n  enqueueForceUpdate: function(publicInstance, callback, callerName) {\n    warnNoop(publicInstance, \'forceUpdate\');\n  },\n\n  /**\n   * 完全替换state，与 \\`setState\\` 不同的是，\\`setState\\` 是以修改和新增的方式改变 \\`state \\`的，\n   * 不会改变没有涉及到的 \\`state\\`。\n   * 而 \\`enqueueReplaceState\\` 则用新的 \\`state\\` 完全替换掉老 \\`state\\`\n   * 使用它或 \\`setState\\` 来改变 state，并且应该把 this.state 设置为不可突变类型对象，\n   * 并且this.state不会立即更改\n   * 我们应该在回调函数 callback 中获取最新的 state\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, \'replaceState\');\n  },\n\n  /**\n   * 设置 state 的子集\n   * 它存在的唯一理由是 _pendingState 是内部方法。\n   * \\`enqueueSetState\\` 实现浅合并更新 \\`state\\`\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function(publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, \'setState\');\n  }\n};\n\nexport default ReactNoopUpdateQueue;`, `15675148880808387000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// ReactNoopUpdateQueue.js 文件</span>\n<span class="token comment">/**\n * 这是一个关于 更新队列(update queue) 的抽象 API\n */</span>\n<span class="token keyword">const</span> ReactNoopUpdateQueue <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * 检查复合组件是否装载完成（被插入树中）\n   * @param {ReactClass} publicInstance 测试实例单元\n   * @return {boolean} 装载完成为 true，否则为 false\n   * @protected\n   * @final\n   */</span>\n  <span class="token function-variable function">isMounted</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">publicInstance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">/**\n   * 强制更新队列，当且仅当当前不处于 DOM 事物（transaction）中才会被唤起\n   *\n   * 当 state 里的某个变量层次太深，更新的时候没有自动触发 render 。\n   * 这些时候就可以调用该方法强制更新队列\n   *\n   * 该方法将跳过 `shouldComponentUpdate()`, 直接调用 `render()`, 但它会唤起\n   * `componentWillUpdate` 和 `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance 将被重新渲染的实例\n   * @param {?function} callback 组件更新后的回调函数.\n   * @param {?string} callerName 在公共 API 调用该方法的函数名称.\n   * @internal\n   */</span>\n  <span class="token function-variable function">enqueueForceUpdate</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">publicInstance<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callerName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warnNoop</span><span class="token punctuation">(</span>publicInstance<span class="token punctuation">,</span> <span class="token string">\'forceUpdate\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">/**\n   * 完全替换state，与 `setState` 不同的是，`setState` 是以修改和新增的方式改变 `state `的，\n   * 不会改变没有涉及到的 `state`。\n   * 而 `enqueueReplaceState` 则用新的 `state` 完全替换掉老 `state`\n   * 使用它或 `setState` 来改变 state，并且应该把 this.state 设置为不可突变类型对象，\n   * 并且this.state不会立即更改\n   * 我们应该在回调函数 callback 中获取最新的 state\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */</span>\n  <span class="token function-variable function">enqueueReplaceState</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">publicInstance<span class="token punctuation">,</span> completeState<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callerName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warnNoop</span><span class="token punctuation">(</span>publicInstance<span class="token punctuation">,</span> <span class="token string">\'replaceState\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">/**\n   * 设置 state 的子集\n   * 它存在的唯一理由是 _pendingState 是内部方法。\n   * `enqueueSetState` 实现浅合并更新 `state`\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */</span>\n  <span class="token function-variable function">enqueueSetState</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">publicInstance<span class="token punctuation">,</span> partialState<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callerName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warnNoop</span><span class="token punctuation">(</span>publicInstance<span class="token punctuation">,</span> <span class="token string">\'setState\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ReactNoopUpdateQueue<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意，React API 只是简单的功能介绍，具体的实现是在 react-dom 中，这是因为不同的平台，React API 是一致的，但不同的平台，渲染的流程是不同的，具体的 Component 渲染流程不一致，会根据具体的平台去定制。</p>\n<p>组件生命周期请参考 <a href="https://github.com/sisterAn/blog/issues/34" target="_blank" rel="nofollow noreferrer noopener">Hooks 与 React 生命周期的关系</a></p>',
id:"/github/workspace/blog/React之Component入门学习/index.md absPath of file >>> MarkdownRemark",timeToRead:10,frontmatter:{date:"2019-09-19 21:32:42",path:"/react-component-practice-learn/",tags:"前端, React, PureComponent",title:"React之Component入门学习",draft:null}},{excerpt:"PureComponent  最早在 React v15.3 版本中发布，主要是为了优化 React 应用而产生。 在这段代码中，   会浅比较   或   是否改变，来决定是否重新渲染组件。 实现  和   类似，都是定义一个组件类。不同是   没有实现  ，而   通过 props 和 state 的  浅比较  实现了。 使用场景 当   的 props 和 state 均为基本类型，使用   会节省应用的性能 可能出现的问题及解决方案 当 props 或 state…",html:'<h1 id="purecomponent"><a href="#purecomponent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PureComponent</h1>\n<p><code class="language-text">PureComponent</code> 最早在 React v15.3 版本中发布，主要是为了优化 React 应用而产生。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="21022034461670015000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class Counter extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { count: 1 };\n  }\n\n  render() {\n    return (\n      <button color={this.props.color} onClick={() => this.setState((state) => ({ count: state.count + 1 }))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}`, `21022034461670015000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>button color<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n        Count<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在这段代码中， <code class="language-text">React.PureComponent</code> 会浅比较 <code class="language-text">props.color</code> 或 <code class="language-text">state.count</code> 是否改变，来决定是否重新渲染组件。</p>\n<ul>\n<li>\n<p><strong>实现</strong></p>\n<p><code class="language-text">React.PureComponent</code> 和 <code class="language-text">React.Component</code> 类似，都是定义一个组件类。不同是 <code class="language-text">React.Component</code> 没有实现 <code class="language-text">shouldComponentUpdate()</code>，而 <code class="language-text">React.PureComponent</code> 通过 props 和 state 的 <strong>浅比较</strong> 实现了。</p>\n</li>\n<li>\n<p><strong>使用场景</strong></p>\n<p>当 <code class="language-text">React.Component</code> 的 props 和 state 均为基本类型，使用 <code class="language-text">React.PureComponent</code> 会节省应用的性能</p>\n</li>\n<li>\n<p><strong>可能出现的问题及解决方案</strong></p>\n<p>当 props 或 state 为 <strong>复杂的数据结构</strong> （例如：嵌套对象和数组）时，因为 <code class="language-text">React.PureComponent</code> 仅仅是 <strong>浅比较</strong> ，可能会渲染出 <strong>错误的结果</strong> 。这时有 <strong>两种解决方案</strong> ：</p>\n<ul>\n<li>当 <strong>知道</strong> 有深度数据结构更新时，可以直接调用 <strong>forceUpdate</strong> 强制更新</li>\n<li>考虑使用 <a href="https://facebook.github.io/immutable-js/" target="_blank" rel="nofollow noreferrer noopener">immutable objects</a> （不可突变的对象），实现快速的比较对象</li>\n</ul>\n</li>\n<li>\n<p><strong>注意</strong></p>\n<p><code class="language-text">React.PureComponent</code> 中的 <code class="language-text">shouldComponentUpdate()</code> 将跳过所有子组件树的 props 更新（具体原因参考 <a href="https://github.com/sisterAn/blog/issues/34" target="_blank" rel="nofollow noreferrer noopener">Hooks 与 React 生命周期</a>：即：更新阶段，由父至子去判断是否需要重新渲染），所以使用 React.PureComponent 的组件，它的所有 <strong>子组件也必须都为 React.PureComponent</strong> 。</p>\n</li>\n</ul>\n<h1 id="purecomponent-与-stateless-functional-component"><a href="#purecomponent-%E4%B8%8E-stateless-functional-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PureComponent 与 Stateless Functional Component</h1>\n<p>对于 React 开发人员来说，知道何时在代码中使用 <strong>Component</strong>，<strong>PureComponent ** 和 **Stateless Functional Component</strong> 非常重要。</p>\n<p>首先，让我们看一下无状态组件。</p>\n<h2 id="无状态组件"><a href="#%E6%97%A0%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>无状态组件</h2>\n<p>输入输出数据完全由 <code class="language-text">props</code> 决定，而且不会产生任何副作用。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67244735179842640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const Button = (props) => <button onClick={props.onClick}>{props.text}</button>;`, `67244735179842640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>无状态组件可以通过减少继承 <code class="language-text">Component</code> 而来的生命周期函数而达到性能优化的效果。从本质上来说，无状态组件就是一个单纯的 <code class="language-text">render</code> 函数，所以无状态组件的缺点也是显而易见的。因为它没有 <code class="language-text">shouldComponentUpdate</code> 生命周期函数，所以每次 <code class="language-text">state</code> 更新，它都会重新绘制 <code class="language-text">render</code> 函数。</p>\n<p>React 16.8 之后，React 引入 Hooks 。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<h2 id="何时使用-purecomponent？"><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8-purecomponent%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>何时使用 <code class="language-text">PureComponent</code>？</h2>\n<p><code class="language-text">PureComponent</code> 提高了性能，因为它减少了应用程序中的渲染操作次数，这对于复杂的 UI 来说是一个巨大的胜利，因此建议尽可能使用。此外，还有一些情况需要使用 <code class="language-text">Component</code> 的生命周期方法，在这种情况下，我们不能使用无状态组件。</p>\n<h2 id="何时使用无状态组件？"><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%97%A0%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>何时使用无状态组件？</h2>\n<p>无状态组件易于实施且快速实施。它们适用于非常小的 UI 视图，其中重新渲染成本无关紧要。它们提供更清晰的代码和更少的文件来处理。</p>\n<h1 id="purecomponent-与-reactmemo"><a href="#purecomponent-%E4%B8%8E-reactmemo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PureComponent 与 React.memo</h1>\n<p><code class="language-text">React.memo</code> 为高阶组件。它实现的效果与 <code class="language-text">React.PureComponent</code> 相似，不同的是：</p>\n<ul>\n<li><code class="language-text">React.memo</code> 用于函数组件</li>\n<li><code class="language-text">React.PureComponent</code> 适用于 class 组件</li>\n<li><code class="language-text">React.PureComponent</code> 只是浅比较 <code class="language-text">props</code>、<code class="language-text">state</code>，<code class="language-text">React.memo</code> 也是浅比较，但它可以自定义比较函数</li>\n</ul>\n<h2 id="reactmemo"><a href="#reactmemo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React.memo</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53882485501435660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function MyComponent(props) {\n  /* 使用 props 渲染 */\n}\n\n// 比较函数\nfunction areEqual(prevProps, nextProps) {\n  /*\n  如果把 nextProps 传入 render 方法的返回结果与\n  将 prevProps 传入 render 方法的返回结果一致则返回 true，\n  否则返回 false\n  返回 true，复用最近一次渲染\n  返回 false，重新渲染\n  */\n}\n\nexport default React.memo(MyComponent, areEqual);`, `53882485501435660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 使用 props 渲染 */</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 比较函数</span>\n<span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/*\n  如果把 nextProps 传入 render 方法的返回结果与\n  将 prevProps 传入 render 方法的返回结果一致则返回 true，\n  否则返回 false\n  返回 true，复用最近一次渲染\n  返回 false，重新渲染\n  */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><code class="language-text">React.memo</code> 通过记忆组件渲染结果的方式实现 ，提高组件的性能</li>\n<li>只会对 <code class="language-text">props</code> 浅比较，如果相同，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</li>\n<li>可以将自定义的比较函数作为第二个参数，实现自定义比较</li>\n<li>此方法仅作为<strong>性能优化</strong>的方式而存在。但请不要依赖它来“阻止”渲染，这会产生 bug。</li>\n<li>与 class 组件中 <code class="language-text">shouldComponentUpdate()</code> 方法不同的是，如果 props 相等，<code class="language-text">areEqual</code>会返回 <code class="language-text">true</code>；如果 props 不相等，则返回 <code class="language-text">false</code>。这与 <code class="language-text">shouldComponentUpdate</code> 方法的返回值相反。</li>\n</ul>\n<h1 id="使用-purecomponent-常见误区"><a href="#%E4%BD%BF%E7%94%A8-purecomponent-%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 PureComponent 常见误区</h1>\n<h2 id="误区一：在渲染方法中创建函数"><a href="#%E8%AF%AF%E5%8C%BA%E4%B8%80%EF%BC%9A%E5%9C%A8%E6%B8%B2%E6%9F%93%E6%96%B9%E6%B3%95%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>误区一：在渲染方法中创建函数</h2>\n<p>如果你在 <code class="language-text">render</code> 方法里创建函数，那么使用 <code class="language-text">props</code> 会抵消使用 <code class="language-text">React.PureComponent</code> 带来的优势。因为每次渲染运行时，都会分配一个新函数，如果你有子组件，即使数据没有改变，它们也会重新渲染，因为浅比较 <code class="language-text">props</code> 的时候总会得到 <code class="language-text">false</code>。</p>\n<p>例如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25852043829919080000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// FriendsItem 在父组件引用样式\n<FriendsItem key={friend.id} name={friend.name} id={friend.id} onDeleteClick={() => this.deleteFriends(friend.id)} />\n// 在父组件中绑定\n// 父组件在 props 中传递了一个箭头函数。箭头函数在每次 render 时都会重新分配（和使用 bind 的方式相同）`, `25852043829919080000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// FriendsItem 在父组件引用样式</span>\n<span class="token operator">&lt;</span>FriendsItem key<span class="token operator">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span> id<span class="token operator">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">}</span> onDeleteClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteFriends</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token comment">// 在父组件中绑定</span>\n<span class="token comment">// 父组件在 props 中传递了一个箭头函数。箭头函数在每次 render 时都会重新分配（和使用 bind 的方式相同）</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中，<code class="language-text">FriendsItem</code> 为 <code class="language-text">PureComponent</code>：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59651358222996010000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 其中 FriendsItem 为 PureComponent\nclass FriendsItem extends React.PureComponent {\n  render() {\n    const { name, onDeleteClick } = this.props;\n    console.log(\\`FriendsItem：\\${name} 渲染\\`);\n    return (\n      <div>\n        <span>{name}</span>\n        <button onClick={onDeleteClick}>删除</button>\n      </div>\n    );\n  }\n}\n// 每次点击删除操作时，未删除的 FriendsItem 都将被重新渲染`, `59651358222996010000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 其中 FriendsItem 为 PureComponent</span>\n<span class="token keyword">class</span> <span class="token class-name">FriendsItem</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> onDeleteClick <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">FriendsItem：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 渲染</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onDeleteClick<span class="token punctuation">}</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 每次点击删除操作时，未删除的 FriendsItem 都将被重新渲染</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href="https://stackblitz.com/edit/react-ta6tww" target="_blank" rel="nofollow noreferrer noopener">点击查看在线实例</a></p>\n<p>这种在 <code class="language-text">FriendsItem</code> 直接调用 <code class="language-text">() =&gt; this.deleteFriends(friend.id)</code>，看起来操作更简单，逻辑更清晰，但它有一个有一个最大的弊端，甚至打破了像 <code class="language-text">shouldComponentUpdate</code> 和 <code class="language-text">PureComponent</code> 这样的性能优化。</p>\n<p>这是因为：父组件在 <code class="language-text">render</code> 声明了一个函数<code class="language-text">onDeleteClick</code>，每次父组件渲染都会重新生成新的函数。因此，每次父组件重新渲染，都会给每个子组件 <code class="language-text">FriendsItem</code> 传递不同的 <code class="language-text">props</code>，导致每个子组件都会重新渲染， 即使 <code class="language-text">FriendsItem</code> 为 <code class="language-text">PureComponent</code>。</p>\n<p><strong>避免在 render 方法里创建函数并使用它。它会打破了像 shouldComponentUpdate 和 PureComponent 这样的性能优化。</strong></p>\n<p>要解决这个问题，只需要将原本在父组件上的绑定放到子组件上即可。<code class="language-text">FriendsItem</code> 将始终具有相同的 <code class="language-text">props</code>，并且永远不会导致不必要的重新渲染。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="80955485439538070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// FriendsItem 在父组件引用样式\n<FriendsItem key={friend.id} id={friend.id} name={friend.name} onClick={this.deleteFriends} />`, `80955485439538070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// FriendsItem 在父组件引用样式</span>\n<span class="token operator">&lt;</span>FriendsItem key<span class="token operator">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">}</span> id<span class="token operator">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteFriends<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p><code class="language-text">FriendsItem</code>:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96217462246793280000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class FriendsItem extends React.PureComponent {\n  onDeleteClick = () => {\n    this.props.onClick(this.props.id);\n  }; // 在子组件中绑定\n  render() {\n    const { name } = this.props;\n    console.log(\\`FriendsItem：\\${name} 渲染\\`);\n    return (\n      <div>\n        <span>{name}</span>\n        <button onClick={this.onDeleteClick}>删除</button>\n      </div>\n    );\n  }\n}\n// 每次点击删除操作时，FriendsItem 都不会被重新渲染`, `96217462246793280000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">FriendsItem</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">onDeleteClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 在子组件中绑定</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">FriendsItem：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 渲染</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onDeleteClick<span class="token punctuation">}</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 每次点击删除操作时，FriendsItem 都不会被重新渲染</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href="https://stackblitz.com/edit/react-sr5yvp" target="_blank" rel="nofollow noreferrer noopener">点击查看在线实例</a></p>\n<p>通过此更改，当单击删除操作时，其他 <code class="language-text">FriendsItem</code> 都不会被重新渲染了 👍</p>\n<h2 id="误区二：在渲染方法中派生-state"><a href="#%E8%AF%AF%E5%8C%BA%E4%BA%8C%EF%BC%9A%E5%9C%A8%E6%B8%B2%E6%9F%93%E6%96%B9%E6%B3%95%E4%B8%AD%E6%B4%BE%E7%94%9F-state" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>误区二：在渲染方法中派生 state</h2>\n<p>考虑一个文章列表，您的个人资料组件将从中显示用户最喜欢的 10 个作品。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="49799321041660070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`render() {\n  const { posts } = this.props\n  // 在渲染函数中生成 topTen，并渲染\n  const topTen = [...posts].sort((a, b) =>\n    b.likes - a.likes).slice(0, 9)\n  return //...\n}\n// 这会导致组件每次重新渲染，都会生成新的 topTen，导致不必要的渲染`, `49799321041660070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> posts <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n  <span class="token comment">// 在渲染函数中生成 topTen，并渲染</span>\n  <span class="token keyword">const</span> topTen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>posts<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    b<span class="token punctuation">.</span>likes <span class="token operator">-</span> a<span class="token punctuation">.</span>likes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 这会导致组件每次重新渲染，都会生成新的 topTen，导致不必要的渲染</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">topTen</code>每次组件重新渲染时都会有一个全新的引用，即使 <code class="language-text">posts</code> 没有更改，派生 <code class="language-text">state</code> 也是相同的。</p>\n<p>这个时候，我们应该将 <code class="language-text">topTen</code> 的判断逻辑提取到 <code class="language-text">render</code> 函数之外，通过缓存派生 <code class="language-text">state</code> 来解决此问题。</p>\n<p>例如，在组件的状态中设置派生 <code class="language-text">state</code>，并仅在 <code class="language-text">posts</code> 已更新时更新。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59327517967971290000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`componentWillMount() {\n  this.setTopTenPosts(this.props.posts)\n}\ncomponentWillReceiveProps(nextProps) {\n  if (this.props.posts !== nextProps.posts) {\n    this.setTopTenPosts(nextProps.posts)\n  }\n}\n// 每次 posts 更新时，更新派生 state，而不是在渲染函数中重新生成\nsetTopTenPosts(posts) {\n  this.setState({\n    topTen: [...posts].sort((a, b) => b.likes - a.likes).slice(0, 9)\n  })\n}`, `59327517967971290000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTopTenPosts</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>posts<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>posts <span class="token operator">!==</span> nextProps<span class="token punctuation">.</span>posts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTopTenPosts</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>posts<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 每次 posts 更新时，更新派生 state，而不是在渲染函数中重新生成</span>\n<span class="token function">setTopTenPosts</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    topTen<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>posts<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b<span class="token punctuation">.</span>likes <span class="token operator">-</span> a<span class="token punctuation">.</span>likes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h2>\n<p>在使用 <code class="language-text">PureComponent</code> 时，请注意：</p>\n<ul>\n<li>突变一般是不好的，但在使用 <code class="language-text">PureComponent</code> 时，问题会更加复杂。</li>\n<li>不要在渲染方法中创建新函数、对象或数组，这会导致项目性能显著降低。</li>\n</ul>\n<h1 id="purecomponent-源码解析"><a href="#purecomponent-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PureComponent 源码解析</h1>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86486724120669620000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 新建了空方法ComponentDummy ，ComponentDummy 的原型 指向 Component 的原型;\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n} // 解析同 React.Component，详细请看上一章\n\n/**\n * 实现 React.PureComponent 对 React.Component 的原型继承\n */\n/**\n * 用 ComponentDummy 的原因是为了不直接实例化一个 Component 实例，可以减少一些内存使用\n *\n * 因为，我们这里只需要继承 React.Component 的 原型，直接 PureComponent.prototype = new Component() 的话\n * 会继承包括 constructor 在内的其他 Component 属性方法，但是 PureComponent 已经有自己的 constructor 了，\n * 再继承的话，造成不必要的内存消耗\n * 所以会新建ComponentDummy，只继承Component的原型，不包括constructor，以此来节省内存。\n */\nconst pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\n\n// 修复 pureComponentPrototype 构造函数指向\npureComponentPrototype.constructor = PureComponent;\n\n// Avoid an extra prototype jump for these methods.\n// 虽然上面两句已经让PureComponent继承了Component\n// 但多加一个 Object.assign()，能有效的避免多一次原型链查找\nObject.assign(pureComponentPrototype, Component.prototype);\n\n// 唯一的区别，原型上添加了 isPureReactComponent 属性去表示该 Component 是 PureComponent\n// 在后续组件渲染的时候，react-dom 会去判断 isPureReactComponent 这个属性，来确定是否浅比较 props、status 实现更新\n/** 在 ReactFiberClassComponent.js 中，有对 isPureReactComponent 的判断\n if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n */\npureComponentPrototype.isPureReactComponent = true;`, `86486724120669620000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 新建了空方法ComponentDummy ，ComponentDummy 的原型 指向 Component 的原型;</span>\n<span class="token keyword">function</span> <span class="token function">ComponentDummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token class-name">ComponentDummy</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Convenience component with default shallow equality check for sCU.\n */</span>\n<span class="token keyword">function</span> <span class="token function">PureComponent</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>\n  <span class="token comment">// If a component has string refs, we will assign a different object later.</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">// 解析同 React.Component，详细请看上一章</span>\n\n<span class="token comment">/**\n * 实现 React.PureComponent 对 React.Component 的原型继承\n */</span>\n<span class="token comment">/**\n * 用 ComponentDummy 的原因是为了不直接实例化一个 Component 实例，可以减少一些内存使用\n *\n * 因为，我们这里只需要继承 React.Component 的 原型，直接 PureComponent.prototype = new Component() 的话\n * 会继承包括 constructor 在内的其他 Component 属性方法，但是 PureComponent 已经有自己的 constructor 了，\n * 再继承的话，造成不必要的内存消耗\n * 所以会新建ComponentDummy，只继承Component的原型，不包括constructor，以此来节省内存。\n */</span>\n<span class="token keyword">const</span> pureComponentPrototype <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PureComponent</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentDummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 修复 pureComponentPrototype 构造函数指向</span>\npureComponentPrototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> PureComponent<span class="token punctuation">;</span>\n\n<span class="token comment">// Avoid an extra prototype jump for these methods.</span>\n<span class="token comment">// 虽然上面两句已经让PureComponent继承了Component</span>\n<span class="token comment">// 但多加一个 Object.assign()，能有效的避免多一次原型链查找</span>\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>pureComponentPrototype<span class="token punctuation">,</span> <span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 唯一的区别，原型上添加了 isPureReactComponent 属性去表示该 Component 是 PureComponent</span>\n<span class="token comment">// 在后续组件渲染的时候，react-dom 会去判断 isPureReactComponent 这个属性，来确定是否浅比较 props、status 实现更新</span>\n<span class="token comment">/** 在 ReactFiberClassComponent.js 中，有对 isPureReactComponent 的判断\n if (ctor.prototype &amp;&amp; ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n */</span>\npureComponentPrototype<span class="token punctuation">.</span>isPureReactComponent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里只是 <code class="language-text">PureComponent</code> 的声明创建，至于如何实现 <code class="language-text">shouldComponentUpdate()</code> ，核心代码在：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="30537393152814006000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// ReactFiberClassComponent.js\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  // ...\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    // 如果是纯组件，比较新老 props、state\n    // 返回 true，重新渲染，\n    // 即 shallowEqual props 返回 false，或 shallowEqual state 返回 false\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n  return true;\n}`, `30537393152814006000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// ReactFiberClassComponent.js</span>\n<span class="token keyword">function</span> <span class="token function">checkShouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">workInProgress<span class="token punctuation">,</span> ctor<span class="token punctuation">,</span> oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">,</span> oldState<span class="token punctuation">,</span> newState<span class="token punctuation">,</span> nextContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctor<span class="token punctuation">.</span>prototype <span class="token operator">&amp;&amp;</span> ctor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isPureReactComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果是纯组件，比较新老 props、state</span>\n    <span class="token comment">// 返回 true，重新渲染，</span>\n    <span class="token comment">// 即 shallowEqual props 返回 false，或 shallowEqual state 返回 false</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>shallowEqual.js</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98465282557805700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`/**\n * 通过遍历对象上的键并返回 false 来执行相等性\n * 在参数列表中，当任意键对应的值不严格相等时，返回 false。\n * 当所有键的值严格相等时,返回 true。\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  // 通过 Object.is 判断 objA、objB 是否相等\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== \'object\' || objA === null || typeof objB !== \'object\' || objB === null) {\n    return false;\n  }\n\n  // 参数列表\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  // 参数列表长度不相同\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // 比较参数列表每一个参数，但仅比较一层\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}`, `98465282557805700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">/**\n * 通过遍历对象上的键并返回 false 来执行相等性\n * 在参数列表中，当任意键对应的值不严格相等时，返回 false。\n * 当所有键的值严格相等时,返回 true。\n */</span>\n<span class="token keyword">function</span> <span class="token function">shallowEqual</span><span class="token punctuation">(</span><span class="token parameter">objA<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span> objB<span class="token punctuation">:</span> mixed</span><span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>\n  <span class="token comment">// 通过 Object.is 判断 objA、objB 是否相等</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> objB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> objA <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> objB <span class="token operator">!==</span> <span class="token string">\'object\'</span> <span class="token operator">||</span> objB <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 参数列表</span>\n  <span class="token keyword">const</span> keysA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> keysB <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 参数列表长度不相同</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length <span class="token operator">!==</span> keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 比较参数列表每一个参数，但仅比较一层</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keysA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>objB<span class="token punctuation">,</span> keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>objA<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> objB<span class="token punctuation">[</span>keysA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="附：objectis（来自-mdn）"><a href="#%E9%99%84%EF%BC%9Aobjectis%EF%BC%88%E6%9D%A5%E8%87%AA-mdn%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>附：Object.is（来自 MDN）</h2>\n<p><code class="language-text">Object.is()</code> 判断两个值是否<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="nofollow noreferrer noopener">相同</a>。</p>\n<p>这种相等性判断逻辑和传统的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">==</code></a> 运算不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">==</code></a> 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 <code class="language-text">&quot;&quot; == false</code> 等于 <code class="language-text">true</code> 的现象），但 <code class="language-text">Object.is</code> 不会做这种类型转换。</p>\n<p>这与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">===</code></a> 运算符的判定方式也不一样。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">===</code></a> 运算符（和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">==</code></a> 运算符）将数字值 <code class="language-text">-0</code> 和 <code class="language-text">+0</code> 视为相等，并认为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">Number.NaN</code></a> 不等于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">NaN</code></a>。</p>\n<p>如果下列任何一项成立，则两个值相同：</p>\n<ul>\n<li>两个值都是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">undefined</code></a></li>\n<li>两个值都是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">null</code></a></li>\n<li>两个值都是 <code class="language-text">true</code> 或者都是 <code class="language-text">false</code></li>\n<li>两个值是由相同个数的字符按照相同的顺序组成的字符串</li>\n<li>两个值指向同一个对象</li>\n<li>\n<p>两个值都是数字并且</p>\n<ul>\n<li>都是正零 <code class="language-text">+0</code></li>\n<li>都是负零 <code class="language-text">-0</code></li>\n<li>都是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">NaN</code></a></li>\n<li>都是除零和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="nofollow noreferrer noopener"><code class="language-text">NaN</code></a> 外的其它同一个数字</li>\n</ul>\n</li>\n</ul>',
id:"/github/workspace/blog/React之PureComponent入门学习/index.md absPath of file >>> MarkdownRemark",timeToRead:9,frontmatter:{date:"2019-09-19 19:44:14",path:"/react-purecomponent-practice-learn/",tags:"前端, React, PureComponent",title:"React之PureComponent入门学习",draft:null}}],length:2,tag:"PureComponent",pagesSum:1,page:1}}}});