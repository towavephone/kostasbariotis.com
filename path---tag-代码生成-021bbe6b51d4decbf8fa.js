webpackJsonp([0xcc6a4d5b9457],{1343:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"需求 用生成 x86-64 汇编代码的代码替换程序中的解释器 核心逻辑 修改解释树 开始之前，先回顾以下解释器的代码： interp.c 该 interpretAST() 函数先走给定的 AST 树深度。它先遍历任何左子树，然后再遍历右子树，最后它使用 op 当前树的底部的值对这些子代进行操作。 如果该 op 值是四个数学运算符之一，则将执行此数学运算。如果该 op…",html:'<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>用生成 x86-64 汇编代码的代码替换程序中的解释器</p>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="修改解释树"><a href="#%E4%BF%AE%E6%94%B9%E8%A7%A3%E9%87%8A%E6%A0%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>修改解释树</h2>\n<p>开始之前，先回顾以下解释器的代码：</p>\n<p>interp.c</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72083638810620520000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// AST tree interpreter\n// Copyright (c) 2019 Warren Toomey, GPL3\n\n// List of AST operators\nstatic char *ASTop[] = { &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot; };\n\n// 给一个 AST 树并做出解释得到最终值\nint interpretAST(struct ASTnode *n) {\n  int leftval, rightval;\n\n  if (n->left)\n    leftval = interpretAST(n->left);\n  if (n->right)\n    rightval = interpretAST(n->right);\n\n  // 调试\n  if (n->op == A_INTLIT)\n    printf(&quot;int %d\\n&quot;, n->intvalue);\n  else\n    printf(&quot;%d %s %d\\n&quot;, leftval, ASTop[n->op], rightval);\n\n  switch (n->op) {\n    case A_ADD:\n      return (leftval + rightval);\n    case A_SUBTRACT:\n      return (leftval - rightval);\n    case A_MULTIPLY:\n      return (leftval * rightval);\n    case A_DIVIDE:\n      return (leftval / rightval);\n    case A_INTLIT:\n      return (n->intvalue);\n    default:\n      fprintf(stderr, &quot;Unknown AST operator %d\\n&quot;, n->op);\n      exit(1);\n  }\n}`, `72083638810620520000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// AST tree interpreter</span>\n<span class="token comment">// Copyright (c) 2019 Warren Toomey, GPL3</span>\n\n<span class="token comment">// List of AST operators</span>\n<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>ASTop<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 给一个 AST 树并做出解释得到最终值</span>\n<span class="token keyword">int</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> leftval<span class="token punctuation">,</span> rightval<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span>\n    leftval <span class="token operator">=</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span>\n    rightval <span class="token operator">=</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 调试</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op <span class="token operator">==</span> A_INTLIT<span class="token punctuation">)</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int %d\\n"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s %d\\n"</span><span class="token punctuation">,</span> leftval<span class="token punctuation">,</span> ASTop<span class="token punctuation">[</span>n<span class="token operator">-></span>op<span class="token punctuation">]</span><span class="token punctuation">,</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> A_ADD<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">+</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_SUBTRACT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">-</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_MULTIPLY<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">*</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_DIVIDE<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">/</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_INTLIT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unknown AST operator %d\\n"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>该 interpretAST() 函数先走给定的 AST 树深度。它先遍历任何左子树，然后再遍历右子树，最后它使用 op 当前树的底部的值对这些子代进行操作。</p>\n<p>如果该 op 值是四个数学运算符之一，则将执行此数学运算。如果该 op 值指示该节点只是简单的整数文字，则返回整数值。</p>\n<p>该函数返回此树的最终值，并且由于它是递归的，它将一次为一棵子树计算整个树的最终值。</p>\n<h2 id="更改为汇编代码生成"><a href="#%E6%9B%B4%E6%94%B9%E4%B8%BA%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更改为汇编代码生成</h2>\n<p>我们将编写一个通用的汇编代码生成器。反过来，这将调出一组特定于 CPU 的代码生成功能。</p>\n<p>这是通用汇编代码生成器 gen.c：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="37028251949040250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Given an AST, generate\n// assembly code recursively\nstatic int genAST(struct ASTnode *n) {\n  int leftreg, rightreg;\n\n  // Get the left and right sub-tree values\n  if (n->left)\n    leftreg = genAST(n->left);\n  if (n->right)\n    rightreg = genAST(n->right);\n\n  switch (n->op) {\n    case A_ADD:\n      return (cgadd(leftreg,rightreg));\n    case A_SUBTRACT:\n      return (cgsub(leftreg,rightreg));\n    case A_MULTIPLY:\n      return (cgmul(leftreg,rightreg));\n    case A_DIVIDE:\n      return (cgdiv(leftreg,rightreg));\n    case A_INTLIT:\n      return (cgload(n->intvalue));\n    default:\n      fprintf(stderr, &quot;Unknown AST operator %d\\n&quot;, n->op);\n      exit(1);\n  }\n}`, `37028251949040250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Given an AST, generate</span>\n<span class="token comment">// assembly code recursively</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">genAST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> leftreg<span class="token punctuation">,</span> rightreg<span class="token punctuation">;</span>\n\n  <span class="token comment">// Get the left and right sub-tree values</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span>\n    leftreg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span>\n    rightreg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> A_ADD<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgadd</span><span class="token punctuation">(</span>leftreg<span class="token punctuation">,</span>rightreg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_SUBTRACT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgsub</span><span class="token punctuation">(</span>leftreg<span class="token punctuation">,</span>rightreg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_MULTIPLY<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgmul</span><span class="token punctuation">(</span>leftreg<span class="token punctuation">,</span>rightreg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_DIVIDE<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgdiv</span><span class="token punctuation">(</span>leftreg<span class="token punctuation">,</span>rightreg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_INTLIT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgload</span><span class="token punctuation">(</span>n<span class="token operator">-></span>intvalue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unknown AST operator %d\\n"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>看起来很熟吧？我们正在进行相同的深度优先树遍历。这次：</p>\n<ul>\n<li>A_INTLIT：使用文字值加载寄存器</li>\n<li>其他运算符：在保存左子树和右子树的两个寄存器上执行数学函数</li>\n</ul>\n<p>不是传递值而是通过代码 genAST() 传递寄存器标识符，例如 cgload() 将值加载到寄存器中，并返回具有已加载值的寄存器的标识。</p>\n<p>genAST() 本身返回此时持有树的最终值的寄存器的标识，这就是为什么顶部的代码获取寄存器标识的原因：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46828643475458966000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (n->left) leftreg = genAST(n->left);\nif (n->right) rightreg = genAST(n->right);`, `46828643475458966000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span> leftreg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span> rightreg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h2 id="调用-genast"><a href="#%E8%B0%83%E7%94%A8-genast" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>调用 genAST()</h2>\n<p>genAST() 只会计算赋予它的表达式的值，我们需要打印出最终的计算结果。我们还需要用一些前导代码（preamble）和一些尾随代码（postamble）包装生成的汇编代码，这是通过以下其他功能完成的 gen.c：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="5056630628776037000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void generatecode(struct ASTnode *n) {\n  int reg;\n\n  cgpreamble();\n  reg= genAST(n);\n  cgprintint(reg);\n  cgpostamble();\n}`, `5056630628776037000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">void</span> <span class="token function">generatecode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> reg<span class="token punctuation">;</span>\n\n  <span class="token function">cgpreamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  reg<span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">cgprintint</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">cgpostamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="x86-64-代码生成器"><a href="#x86-64-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>x86-64 代码生成器</h2>\n<p>那就是通用代码生成器，现在我们需要看看一些实际的汇编代码的生成。目前我的目标是 x86-64 CPU，因为它仍然是最常见的 Linux 平台之一，因此打开 cg.c 并开始浏览。</p>\n<h3 id="分配寄存器"><a href="#%E5%88%86%E9%85%8D%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>分配寄存器</h3>\n<p>任何 CPU 的寄存器数量都有限，我们将不得不分配一个寄存器来保存整数文字值，以及我们对它们执行的任何计算。但是一旦使用了一个值，我们通常可以丢弃该值，从而释放保存它的寄存器，然后我们可以将该寄存器重用于另一个值。</p>\n<p>有三个函数处理寄存器分配：</p>\n<ul>\n<li>freeall_registers()：将所有寄存器设置为可用</li>\n<li>alloc_register()：分配寄存器</li>\n<li>free_register()：释放分配的寄存器</li>\n</ul>\n<p>我不会通过代码使用因为它很简单，但是会进行一些错误检查。现在如果我用完了寄存器，程序将崩溃。稍后当自由寄存器用完时，我将处理这种情况。</p>\n<p>该代码适用于通用寄存器：r0，r1，r2 和 r3，有一个带有实际寄存器名称的字符串表：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77971108794395820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`static char *reglist[4]= { &quot;%r8&quot;, &quot;%r9&quot;, &quot;%r10&quot;, &quot;%r11&quot; };`, `77971108794395820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>reglist<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"%r8"</span><span class="token punctuation">,</span> <span class="token string">"%r9"</span><span class="token punctuation">,</span> <span class="token string">"%r10"</span><span class="token punctuation">,</span> <span class="token string">"%r11"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>这使得这些功能相当独立于 CPU 体系结构。</p>\n<h3 id="加载寄存器"><a href="#%E5%8A%A0%E8%BD%BD%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>加载寄存器</h3>\n<p>这是通过以下方式完成的 cgload()：分配了一个寄存器，然后一条 movq 指令将文字值加载到分配的寄存器中。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44147154235859040000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Load an integer literal value into a register.\n// Return the number of the register\nint cgload(int value) {\n\n  // Get a new register\n  int r = alloc_register();\n\n  // Print out the code to initialise it\n  fprintf(Outfile, &quot;\\tmovq\\t\\$%d, %s\\n&quot;, value, reglist[r]);\n  return(r);\n}`, `44147154235859040000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Load an integer literal value into a register.</span>\n<span class="token comment">// Return the number of the register</span>\n<span class="token keyword">int</span> <span class="token function">cgload</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// Get a new register</span>\n  <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">alloc_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Print out the code to initialise it</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovq\\t$%d, %s\\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="加法寄存器"><a href="#%E5%8A%A0%E6%B3%95%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>加法寄存器</h3>\n<p>cgadd() 接受两个寄存器号并生成代码以将它们加在一起，结果保存在两个寄存器之一中，然后释放另一个以供将来使用：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25257878382335820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Add two registers together and return\n// the number of the register with the result\nint cgadd(int r1, int r2) {\n  fprintf(Outfile, &quot;\\taddq\\t%s, %s\\n&quot;, reglist[r1], reglist[r2]);\n  free_register(r1);\n  return(r2);\n}`, `25257878382335820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Add two registers together and return</span>\n<span class="token comment">// the number of the register with the result</span>\n<span class="token keyword">int</span> <span class="token function">cgadd</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\taddq\\t%s, %s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">free_register</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="相乘寄存器"><a href="#%E7%9B%B8%E4%B9%98%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>相乘寄存器</h3>\n<p>这与加法非常相似，并且操作也是可交换的，因此可以返回任何寄存器：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6795123353585142000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Multiply two registers together and return\n// the number of the register with the result\nint cgmul(int r1, int r2) {\n  fprintf(Outfile, &quot;\\timulq\\t%s, %s\\n&quot;, reglist[r1], reglist[r2]);\n  free_register(r1);\n  return(r2);\n}`, `6795123353585142000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Multiply two registers together and return</span>\n<span class="token comment">// the number of the register with the result</span>\n<span class="token keyword">int</span> <span class="token function">cgmul</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\timulq\\t%s, %s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">free_register</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="减法寄存器"><a href="#%E5%87%8F%E6%B3%95%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减法寄存器</h3>\n<p>减法不是可交换的：我们必须使顺序正确，从第一个寄存器减去第二个寄存器，因此我们返回第一个寄存器并释放第二个寄存器：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26013796781656830000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Subtract the second register from the first and\n// return the number of the register with the result\nint cgsub(int r1, int r2) {\n  fprintf(Outfile, &quot;\\tsubq\\t%s, %s\\n&quot;, reglist[r2], reglist[r1]);\n  free_register(r2);\n  return(r1);\n}`, `26013796781656830000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Subtract the second register from the first and</span>\n<span class="token comment">// return the number of the register with the result</span>\n<span class="token keyword">int</span> <span class="token function">cgsub</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tsubq\\t%s, %s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">free_register</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="除法寄存器"><a href="#%E9%99%A4%E6%B3%95%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>除法寄存器</h3>\n<p>除法也不是可交换的，在 x86-64 上它比较复杂。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86594394345407940000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Divide the first register by the second and\n// return the number of the register with the result\nint cgdiv(int r1, int r2) {\n  // movq 完成 8 个字节的复制\n  fprintf(Outfile, &quot;\\tmovq\\t%s,%%rax\\n&quot;, reglist[r1]);\n  // 将字转换为双字/将双字转换为四字\n  fprintf(Outfile, &quot;\\tcqo\\n&quot;);\n  // idivq 除法，%rax保存商 %rdx保存余数\n  fprintf(Outfile, &quot;\\tidivq\\t%s\\n&quot;, reglist[r2]);\n  fprintf(Outfile, &quot;\\tmovq\\t%%rax,%s\\n&quot;, reglist[r1]);\n  free_register(r2);\n  return(r1);\n}`, `86594394345407940000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Divide the first register by the second and</span>\n<span class="token comment">// return the number of the register with the result</span>\n<span class="token keyword">int</span> <span class="token function">cgdiv</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// movq 完成 8 个字节的复制</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovq\\t%s,%%rax\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将字转换为双字/将双字转换为四字</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tcqo\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// idivq 除法，%rax保存商 %rdx保存余数</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tidivq\\t%s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovq\\t%%rax,%s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">free_register</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="打印寄存器"><a href="#%E6%89%93%E5%8D%B0%E5%AF%84%E5%AD%98%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>打印寄存器</h3>\n<p>没有 x86-64 指令可将寄存器输出为十进制数字。为了解决此问题，汇编程序包含一个 printint() 的函数，该函数带有一个寄存器参数，并调用 printf() 以十进制格式将其打印出来。</p>\n<p>我不会提供代码 cgpreamble()，但其中也包含开始代码 main()，以便我们可以汇编输出文件以获得完整的程序代码（cgpostamble() 此处也未提供）只是调用 exit(0) 以结束程序。</p>\n<p>但是，这里是 cgprintint()：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17093937713777142000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void cgprintint(int r) {\n  fprintf(Outfile, &quot;\\tmovq\\t%s, %%rdi\\n&quot;, reglist[r]);\n  fprintf(Outfile, &quot;\\tcall\\tprintint\\n&quot;);\n  free_register(r);\n}`, `17093937713777142000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">void</span> <span class="token function">cgprintint</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovq\\t%s, %%rdi\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tcall\\tprintint\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">free_register</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Linux x86-64 期望函数的第一个参数在 %rdi 寄存器中，因此我们将寄存器移到 %rdi 之前调用 printint。</p>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54098543870426960000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`2 + 3 * 5 - 8 / 3`, `54098543870426960000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">2 + 3 * 5 - 8 / 3</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45496738983227060000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`cc -o comp1 -g cg.c expr.c gen.c interp.c main.c scan.c tree.c\n\n\\$ make test\n./comp1 input01\n15\ncc -o out out.s\n./out\n15`, `45496738983227060000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">cc -o comp1 -g cg.c expr.c gen.c interp.c main.c scan.c tree.c\n\n$ make test\n./comp1 input01\n15\ncc -o out out.s\n./out\n15</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>生成的 out.s 文件</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="66188350383562770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`        .text\n.LC0:\n        .string &quot;%d\\n&quot;\nprintint:\n        pushq   %rbp\n        movq    %rsp, %rbp\n        subq    \\$16, %rsp\n        movl    %edi, -4(%rbp)\n        movl    -4(%rbp), %eax\n        movl    %eax, %esi\n        leaq    .LC0(%rip), %rdi\n        movl    \\$0, %eax\n        call    printf@PLT\n        nop\n        leave\n        ret\n\n        .globl  main\n        .type   main, @function\nmain:\n        pushq   %rbp\n        movq    %rsp, %rbp\n        movq    \\$13, %r8\n        movq    \\$6, %r9\n        subq    %r9, %r8\n        movq    \\$4, %r9\n        movq    \\$5, %r10\n        imulq   %r9, %r10\n        addq    %r8, %r10\n        movq    \\$8, %r8\n        movq    \\$3, %r9\n        movq    %r8,%rax\n        cqo\n        idivq   %r9\n        movq    %rax,%r8\n        addq    %r10, %r8\n        movq    %r8, %rdi\n        call    printint\n        movl    \\$0, %eax\n        popq    %rbp\n        ret`, `66188350383562770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">        .text\n.LC0:\n        .string &quot;%d\\n&quot;\nprintint:\n        pushq   %rbp\n        movq    %rsp, %rbp\n        subq    $16, %rsp\n        movl    %edi, -4(%rbp)\n        movl    -4(%rbp), %eax\n        movl    %eax, %esi\n        leaq    .LC0(%rip), %rdi\n        movl    $0, %eax\n        call    printf@PLT\n        nop\n        leave\n        ret\n\n        .globl  main\n        .type   main, @function\nmain:\n        pushq   %rbp\n        movq    %rsp, %rbp\n        movq    $13, %r8\n        movq    $6, %r9\n        subq    %r9, %r8\n        movq    $4, %r9\n        movq    $5, %r10\n        imulq   %r9, %r10\n        addq    %r8, %r10\n        movq    $8, %r8\n        movq    $3, %r9\n        movq    %r8,%rax\n        cqo\n        idivq   %r9\n        movq    %rax,%r8\n        addq    %r10, %r8\n        movq    %r8, %rdi\n        call    printint\n        movl    $0, %eax\n        popq    %rbp\n        ret</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>优秀！现在，我们有了一个合法的编译器：一个程序以一种语言输入并生成另一种语言的翻译。</p>\n<p>然后，我们仍然必须将输出组装成机器代码并将其与支持库链接，但这是我们现在可以手动执行的操作。稍后，我们将编写一些代码来自动执行此操作。</p>\n<h1 id="结论"><a href="#%E7%BB%93%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结论</h1>\n<p>从解释器更改为通用代码生成器是微不足道的，但是随后我们不得不编写一些代码以生成实际的程序集输出，为此我们必须考虑如何分配寄存器：目前我们有一个幼稚的解决方案。我们还必须处理一些 x86-64 的怪异 idivq 指令。</p>\n<p>我还没有谈到的是：为什么要为表达式生成 AST 呢？当然，cgadd() 当我们在 Pratt 解析器中命中“+”令牌时，我们可能会调用，其他运算符也是如此。我要让您考虑一下，但是我将在一到两步之后再讲一遍。</p>\n<p>在编译器编写过程的下一部分中，我们将在语言中添加一些语句，以使其开始类似于适当的计算机语言。</p>',
id:"/github/workspace/blog/编译器之旅（四）——真正的编译器/index.md absPath of file >>> MarkdownRemark",timeToRead:6,frontmatter:{date:"2020-03-03 10:44:03",path:"/tour-of-compiler-real-compiler/",tags:"编译原理, 代码生成",title:"编译器之旅（四）——真正的编译器",draft:null}}],length:1,tag:"代码生成",pagesSum:1,page:1}}}});