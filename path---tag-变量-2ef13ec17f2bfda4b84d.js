webpackJsonp([0xbd21fed8002a],{1370:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"需求 在语言中添加变量，希望能够做到 声明变量 使用变量获取存储的值 分配给变量 这是 input02 输入文件的内容： 最明显的变化是在表达式中具有变量声明，赋值语句和变量名称。但是在开始之前，让我们先看看如何实现变量。 准备 BNF 语法 核心逻辑 符号表 每个编译器都需要一个符号表，稍后我们将不仅仅持有全局变量，但现在这是表中的一项的结构（来自 defs.h）： 我们在 data.h 中有一个符号数组： Globs 实际上是位于 sym.c 中用于管理符号表的文件，具有以下功能： int…",html:'<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>在语言中添加变量，希望能够做到</p>\n<ul>\n<li>声明变量</li>\n<li>使用变量获取存储的值</li>\n<li>分配给变量</li>\n</ul>\n<p>这是 input02 输入文件的内容：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">int fred;\nint jim;\nfred = 5;\njim = 12;\nprint fred + jim;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最明显的变化是在表达式中具有变量声明，赋值语句和变量名称。但是在开始之前，让我们先看看如何实现变量。</p>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<h2 id="bnf-语法"><a href="#bnf-%E8%AF%AD%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BNF 语法</h2>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">statements: statement\n    |      statement statements\n    ;\n\nstatement: &#39;print&#39; expression &#39;;&#39;\n    |     &#39;int&#39;   identifier &#39;;&#39;\n    |     identifier &#39;=&#39; expression &#39;;&#39;\n    ;\n\nidentifier: T_IDENT\n    ;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="符号表"><a href="#%E7%AC%A6%E5%8F%B7%E8%A1%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>符号表</h2>\n<p>每个编译器都需要一个符号表，稍后我们将不仅仅持有全局变量，但现在这是表中的一项的结构（来自 defs.h）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68382676120175610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Symbol table structure\nstruct symtable {\n  char *name;                   // Name of a symbol\n};`, `68382676120175610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Symbol table structure</span>\n<span class="token keyword">struct</span> <span class="token class-name">symtable</span> <span class="token punctuation">{</span>\n  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>                   <span class="token comment">// Name of a symbol</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们在 data.h 中有一个符号数组：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52944120224995260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#define NSYMBOLS        1024            // Number of symbol table entries\nextern_ struct symtable Gsym[NSYMBOLS]; // Global symbol table\nstatic int Globs = 0;                   // Position of next free global symbol slot`, `52944120224995260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> NSYMBOLS        1024            </span><span class="token comment">// Number of symbol table entries</span>\nextern_ <span class="token keyword">struct</span> <span class="token class-name">symtable</span> Gsym<span class="token punctuation">[</span>NSYMBOLS<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Global symbol table</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> Globs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">// Position of next free global symbol slot</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>Globs 实际上是位于 sym.c 中用于管理符号表的文件，具有以下功能：</p>\n<ul>\n<li>int findglob(char *s)：确定符号 s 是否在全局符号表中，返回其插槽位置；如果找不到，则返回 -1。</li>\n<li>static int newglob(void)：获取新的全局符号槽的位置，否则如果我们用完所有位置则结束。</li>\n<li>int addglob(char *name)：将全局符号添加到符号表，返回符号表中的插槽号。</li>\n</ul>\n<p>该代码相当简单，因此我不会在这里给出代码。使用这些功能，我们可以找到符号并将新符号添加到符号表中。</p>\n<h2 id="扫描和新令牌"><a href="#%E6%89%AB%E6%8F%8F%E5%92%8C%E6%96%B0%E4%BB%A4%E7%89%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>扫描和新令牌</h2>\n<p>如果查看示例输入文件，我们需要一些新标记：</p>\n<ul>\n<li>‘int’，称为 T_INT</li>\n<li>’=‘，称为 T_EQUALS</li>\n<li>标识符名称，称为 T_IDENT</li>\n</ul>\n<p>’=’ 很容易添加到 scan()：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43783752243889260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`case \'=\':\n  t->token = T_EQUALS;\n  break;`, `43783752243889260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">case</span> <span class="token string">\'=\'</span><span class="token operator">:</span>\n  t<span class="token operator">-></span>token <span class="token operator">=</span> T_EQUALS<span class="token punctuation">;</span>\n  <span class="token keyword">break</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>我们可以将 ‘int’ 关键字添加到 keyword()：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18424573217813877000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`case \'i\':\n  if (!strcmp(s, &quot;int&quot;))\n    return (T_INT);\n  break;`, `18424573217813877000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">case</span> <span class="token string">\'i\'</span><span class="token operator">:</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>T_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">break</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对于标识符，我们已经在 scanident() 将单词存储到 Text 变量中了，我们可以返回一个 T_IDENT 令牌：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96507515483996210000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (isalpha(c) || \'_\' == c) {\n  // Read in a keyword or identifier\n  scanident(c, Text, TEXTLEN);\n\n  // If it\'s a recognised keyword, return that token\n  if (tokentype = keyword(Text)) {\n    t->token = tokentype;\n    break;\n  }\n  // Not a recognised keyword, so it must be an identifier\n  t->token = T_IDENT;\n  break;\n}`, `96507515483996210000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'_\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Read in a keyword or identifier</span>\n  <span class="token function">scanident</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> TEXTLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If it\'s a recognised keyword, return that token</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">=</span> <span class="token function">keyword</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    t<span class="token operator">-></span>token <span class="token operator">=</span> tokentype<span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Not a recognised keyword, so it must be an identifier</span>\n  t<span class="token operator">-></span>token <span class="token operator">=</span> T_IDENT<span class="token punctuation">;</span>\n  <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="新语法"><a href="#%E6%96%B0%E8%AF%AD%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新语法</h2>\n<p>标识符作为 T_IDENT 令牌返回，并且我们已经有了解析打印语句的代码，但是由于我们现在拥有三种类型的语句，因此编写一个处理每种类型的函数是有意义的，现在我们的顶级 statements() 函数 stmt.c 如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89320183840867550000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parse one or more statements\nvoid statements(void) {\n\n  while (1) {\n    switch (Token.token) {\n    case T_PRINT:\n      print_statement();\n      break;\n    case T_INT:\n      var_declaration();\n      break;\n    case T_IDENT:\n      assignment_statement();\n      break;\n    case T_EOF:\n      return;\n    default:\n      fatald(&quot;Syntax error, token&quot;, Token.token);\n    }\n  }\n}`, `89320183840867550000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parse one or more statements</span>\n<span class="token keyword">void</span> <span class="token function">statements</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> T_PRINT<span class="token operator">:</span>\n      <span class="token function">print_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_INT<span class="token operator">:</span>\n      <span class="token function">var_declaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_IDENT<span class="token operator">:</span>\n      <span class="token function">assignment_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_EOF<span class="token operator">:</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fatald</span><span class="token punctuation">(</span><span class="token string">"Syntax error, token"</span><span class="token punctuation">,</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="变量声明"><a href="#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>变量声明</h2>\n<p>让我们看一下变量声明，这是在一个新文件 decl.c 中，因为将来我们将有许多其他类型的声明。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="13782274883789025000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parse the declaration of a variable\nvoid var_declaration(void) {\n\n  // Ensure we have an \'int\' token followed by an identifier\n  // and a semicolon. Text now has the identifier\'s name.\n  // Add it as a known identifier\n  match(T_INT, &quot;int&quot;);\n  ident();\n  addglob(Text);\n  genglobsym(Text);\n  semi();\n}`, `13782274883789025000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parse the declaration of a variable</span>\n<span class="token keyword">void</span> <span class="token function">var_declaration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// Ensure we have an \'int\' token followed by an identifier</span>\n  <span class="token comment">// and a semicolon. Text now has the identifier\'s name.</span>\n  <span class="token comment">// Add it as a known identifier</span>\n  <span class="token function">match</span><span class="token punctuation">(</span>T_INT<span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">ident</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">addglob</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">genglobsym</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">semi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 ident() 和 semi() 函数中包装 match()：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36326302308290080000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void semi(void)  { match(T_SEMI, &quot;;&quot;); }\nvoid ident(void) { match(T_IDENT, &quot;identifier&quot;); }`, `36326302308290080000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">void</span> <span class="token function">semi</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">match</span><span class="token punctuation">(</span>T_SEMI<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">ident</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">match</span><span class="token punctuation">(</span>T_IDENT<span class="token punctuation">,</span> <span class="token string">"identifier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>返回 var_declaration()，一旦我们将标识符扫描到 Text 缓冲区中，就可以使用将其添加到全局符号表中 addglob(Text)，那里的代码允许多次声明一个变量。</p>\n<h2 id="赋值声明"><a href="#%E8%B5%8B%E5%80%BC%E5%A3%B0%E6%98%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>赋值声明</h2>\n<p>这是 stmt.c 中的 assignment_statement()：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="28332748346665060000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void assignment_statement(void) {\n  struct ASTnode *left, *right, *tree;\n  int id;\n\n  // Ensure we have an identifier\n  ident();\n\n  // Check it\'s been defined then make a leaf node for it\n  if ((id = findglob(Text)) == -1) {\n    fatals(&quot;Undeclared variable&quot;, Text);\n  }\n  right = mkastleaf(A_LVIDENT, id);\n\n  // Ensure we have an equals sign\n  match(T_EQUALS, &quot;=&quot;);\n\n  // Parse the following expression\n  left = binexpr(0);\n\n  // Make an assignment AST tree\n  tree = mkastnode(A_ASSIGN, left, right, 0);\n\n  // Generate the assembly code for the assignment\n  genAST(tree, -1);\n  genfreeregs();\n\n  // Match the following semicolon\n  semi();\n}`, `28332748346665060000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">void</span> <span class="token function">assignment_statement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">,</span> <span class="token operator">*</span>tree<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n  <span class="token comment">// Ensure we have an identifier</span>\n  <span class="token function">ident</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Check it\'s been defined then make a leaf node for it</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token function">findglob</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fatals</span><span class="token punctuation">(</span><span class="token string">"Undeclared variable"</span><span class="token punctuation">,</span> Text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  right <span class="token operator">=</span> <span class="token function">mkastleaf</span><span class="token punctuation">(</span>A_LVIDENT<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Ensure we have an equals sign</span>\n  <span class="token function">match</span><span class="token punctuation">(</span>T_EQUALS<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Parse the following expression</span>\n  left <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Make an assignment AST tree</span>\n  tree <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span>A_ASSIGN<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Generate the assembly code for the assignment</span>\n  <span class="token function">genAST</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Match the following semicolon</span>\n  <span class="token function">semi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们有几个新的 AST 节点类型，<code class="language-text">A_ASSIGN</code> 在左侧的子级中获取表达式，并将其分配给右侧的子级，右边的孩子将是一个 <code class="language-text">A_LVIDENT</code> 节点。</p>\n<p>为什么将这个节点称为 A_LVIDENT？因为它代表左值标识符，那么什么是左值？</p>\n<p>左值是绑定到特定位置的值，在这里它是内存中保存变量值的地址。当我们这样做时：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">area = width * height;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>我们将右侧的结果（即 rvalue）分配给左侧的变量（即 lvalue），在右值不依赖于特定的位置，表达式结果可能在任意寄存器中。</p>\n<p>还要注意，尽管赋值语句具有以下语法</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">identifier &#39;=&#39; expression &#39;;&#39;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>我们将使表达式成为 <code class="language-text">A_ASSIGN</code> 节点的左侧子树，并将 <code class="language-text">A_LVIDENT</code> 详细信息保存在右侧子树中。为什么？因为我们需要先计算表达式，然后再将其保存到变量中。</p>\n<h2 id="ast-结构的变化"><a href="#ast-%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AST 结构的变化</h2>\n<p>现在我们需要在 <code class="language-text">A_INTLIT AST</code> 节点中存储整数文字值，或者在 <code class="language-text">A_IDENT AST</code> 节点中存储符号的详细信息，我在 AST 结构中添加了一个并集以执行此操作（在 defs.h 中）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41118162813724000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Abstract Syntax Tree structure\nstruct ASTnode {\n  int op;                       // &quot;Operation&quot; to be performed on this tree\n  struct ASTnode *left;         // Left and right child trees\n  struct ASTnode *right;\n  union {\n    int intvalue;               // For A_INTLIT, the integer value\n    int id;                     // For A_IDENT, the symbol slot number\n  } v;\n};`, `41118162813724000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Abstract Syntax Tree structure</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> op<span class="token punctuation">;</span>                       <span class="token comment">// "Operation" to be performed on this tree</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>         <span class="token comment">// Left and right child trees</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">union</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> intvalue<span class="token punctuation">;</span>               <span class="token comment">// For A_INTLIT, the integer value</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>                     <span class="token comment">// For A_IDENT, the symbol slot number</span>\n  <span class="token punctuation">}</span> v<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="生成分配代码"><a href="#%E7%94%9F%E6%88%90%E5%88%86%E9%85%8D%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>生成分配代码</h2>\n<p>现在让我们来看看 gen.c 中变化的 genAST()</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41210753293140790000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`int genAST(struct ASTnode *n, int reg) {\n  int leftreg, rightreg;\n\n  // Get the left and right sub-tree values\n  if (n->left)\n    leftreg = genAST(n->left, -1);\n  if (n->right)\n    rightreg = genAST(n->right, leftreg);\n\n  switch (n->op) {\n    ...\n    case A_INTLIT:\n      return (cgloadint(n->v.intvalue));\n    case A_IDENT:\n      return (cgloadglob(Gsym[n->v.id].name));\n    case A_LVIDENT:\n      return (cgstorglob(reg, Gsym[n->v.id].name));\n    case A_ASSIGN:\n      // The work has already been done, return the result\n      return (rightreg);\n    default:\n      fatald(&quot;Unknown AST operator&quot;, n->op);\n  }`, `41210753293140790000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">int</span> <span class="token function">genAST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> leftreg<span class="token punctuation">,</span> rightreg<span class="token punctuation">;</span>\n\n  <span class="token comment">// Get the left and right sub-tree values</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span>\n    leftreg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span>\n    rightreg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">,</span> leftreg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">case</span> A_INTLIT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgloadint</span><span class="token punctuation">(</span>n<span class="token operator">-></span>v<span class="token punctuation">.</span>intvalue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_IDENT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgloadglob</span><span class="token punctuation">(</span>Gsym<span class="token punctuation">[</span>n<span class="token operator">-></span>v<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_LVIDENT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgstorglob</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> Gsym<span class="token punctuation">[</span>n<span class="token operator">-></span>v<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_ASSIGN<span class="token operator">:</span>\n      <span class="token comment">// The work has already been done, return the result</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>rightreg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fatald</span><span class="token punctuation">(</span><span class="token string">"Unknown AST operator"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>请注意我们首先执行左侧的 AST 子级，然后获取一个保存左侧子树值的寄存器号，现在我们将此寄存器号传递给右侧子树，我们需要对 A_LVIDENT 节点执行此操作，以便于让 cg.c 中的 cgstorglob() 函数知道哪个寄存器保存赋值表达式的右值结果。</p>\n<p>因此，请考虑以下 AST 树：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">      A_ASSIGN\n     /        \\\nA_INTLIT   A_LVIDENT\n   (3)        (5)</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们调用 leftreg = genAST(n->left, -1); 以执行 <code class="language-text">A_INTLIT</code> 操作，这将执行 return (cgloadint(n->v.intvalue)); 即加载值为 3 的寄存器并返回寄存器 ID。</p>\n<p>然后我们调用 rightreg = genAST(n->right, leftreg); 以执行 <code class="language-text">A_LVIDENT</code> 操作，这将把 return (cgstorglob(reg, Gsym[n->v.id].name)); 返回的寄存器存储到名称为 Gsym[5] 的变量中。</p>\n<p>然后我们切换到 <code class="language-text">A_ASSIGN</code> 情况，我们所有的工作都已经完成，右值仍在寄存器中。因此让它保留在那里并返回它，稍后我们将能够执行以下表达式：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">a = b = c = 0;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>赋值不仅是语句，而且是表达式。</p>\n<h2 id="生成-x86-64-代码"><a href="#%E7%94%9F%E6%88%90-x86-64-%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>生成 x86-64 代码</h2>\n<p>您可能已经注意到，我将旧 cgload() 函数的名称更改为 cgloadint()，现在我们有一个函数可以从全局变量（在 cg.c 中）加载值：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74392774411571200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`int cgloadglob(char *identifier) {\n  // Get a new register\n  int r = alloc_register();\n\n  // Print out the code to initialise it\n  fprintf(Outfile, &quot;\\tmovq\\t%s(\\%%rip), %s\\n&quot;, identifier, reglist[r]);\n  return (r);\n}`, `74392774411571200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cgloadglob</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>identifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Get a new register</span>\n  <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">alloc_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Print out the code to initialise it</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovq\\t%s(\\%%rip), %s\\n"</span><span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>同样我们需要一个函数来将寄存器保存到变量中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54776730645972574000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Store a register\'s value into a variable\nint cgstorglob(int r, char *identifier) {\n  fprintf(Outfile, &quot;\\tmovq\\t%s, %s(\\%%rip)\\n&quot;, reglist[r], identifier);\n  return (r);\n}`, `54776730645972574000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Store a register\'s value into a variable</span>\n<span class="token keyword">int</span> <span class="token function">cgstorglob</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>identifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovq\\t%s, %s(\\%%rip)\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们还需要一个函数来创建新的全局整数变量：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64187157774607910000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Generate a global symbol\nvoid cgglobsym(char *sym) {\n  fprintf(Outfile, &quot;\\t.comm\\t%s,8,8\\n&quot;, sym);\n}`, `64187157774607910000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Generate a global symbol</span>\n<span class="token keyword">void</span> <span class="token function">cgglobsym</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>sym<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\t.comm\\t%s,8,8\\n"</span><span class="token punctuation">,</span> sym<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当然我们不能让解析器直接访问此代码，相反通用代码生成器中有一个函数 gen.c 充当接口：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94520054979225240000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void genglobsym(char *s) { cgglobsym(s); }`, `94520054979225240000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">void</span> <span class="token function">genglobsym</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">cgglobsym</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="表达式中的变量"><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>表达式中的变量</h2>\n<p>现在我们可以分配变量了，但是我们如何将变量的值放入表达式中。我们已经有了一个 primary() 获取整数文字的函数，让我们对其进行修改以同时加载变量的值：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35014773260956434000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parse a primary factor and return an\n// AST node representing it.\nstatic struct ASTnode *primary(void) {\n  struct ASTnode *n;\n  int id;\n\n  switch (Token.token) {\n    case T_INTLIT:\n      // For an INTLIT token, make a leaf AST node for it.\n      n = mkastleaf(A_INTLIT, Token.intvalue);\n      break;\n\n    case T_IDENT:\n      // Check that this identifier exists\n      id = findglob(Text);\n      if (id == -1)\n        fatals(&quot;Unknown variable&quot;, Text);\n\n      // Make a leaf AST node for it\n      n = mkastleaf(A_IDENT, id);\n      break;\n\n    default:\n      fatald(&quot;Syntax error, token&quot;, Token.token);\n  }\n\n  // Scan in the next token and return the leaf node\n  scan(&Token);\n  return (n);\n}`, `35014773260956434000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parse a primary factor and return an</span>\n<span class="token comment">// AST node representing it.</span>\n<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> T_INTLIT<span class="token operator">:</span>\n      <span class="token comment">// For an INTLIT token, make a leaf AST node for it.</span>\n      n <span class="token operator">=</span> <span class="token function">mkastleaf</span><span class="token punctuation">(</span>A_INTLIT<span class="token punctuation">,</span> Token<span class="token punctuation">.</span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">case</span> T_IDENT<span class="token operator">:</span>\n      <span class="token comment">// Check that this identifier exists</span>\n      id <span class="token operator">=</span> <span class="token function">findglob</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">fatals</span><span class="token punctuation">(</span><span class="token string">"Unknown variable"</span><span class="token punctuation">,</span> Text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Make a leaf AST node for it</span>\n      n <span class="token operator">=</span> <span class="token function">mkastleaf</span><span class="token punctuation">(</span>A_IDENT<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fatald</span><span class="token punctuation">(</span><span class="token string">"Syntax error, token"</span><span class="token punctuation">,</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Scan in the next token and return the leaf node</span>\n  <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意在 T_IDENT 情况下的语法检查，以确保在尝试使用变量之前已声明该变量。</p>\n<p>还要注意检索变量值的 AST 叶节点是 <code class="language-text">A_IDENT</code> 节点，保存到变量中的是 <code class="language-text">A_LVIDENT</code> 节点，这是 rvalues 和 lvalues 之间的区别。</p>\n<h2 id="其他变化"><a href="#%E5%85%B6%E4%BB%96%E5%8F%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他变化</h2>\n<p>我可能还做了其他一些更改，在 misc.c 中创建一些帮助器函数以便更轻松地报告致命错误：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81357131953448090000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Print out fatal messages\nvoid fatal(char *s) {\n  fprintf(stderr, &quot;%s on line %d\\n&quot;, s, Line); exit(1);\n}\n\nvoid fatals(char *s1, char *s2) {\n  fprintf(stderr, &quot;%s:%s on line %d\\n&quot;, s1, s2, Line); exit(1);\n}\n\nvoid fatald(char *s, int d) {\n  fprintf(stderr, &quot;%s:%d on line %d\\n&quot;, s, d, Line); exit(1);\n}\n\nvoid fatalc(char *s, int c) {\n  fprintf(stderr, &quot;%s:%c on line %d\\n&quot;, s, c, Line); exit(1);\n}`, `81357131953448090000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Print out fatal messages</span>\n<span class="token keyword">void</span> <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s on line %d\\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">fatals</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s:%s on line %d\\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">fatald</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s:%d on line %d\\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> d<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">fatalc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s:%c on line %d\\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> c<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<p>input01</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">print 12 * 3;\nprint\n   18 - 2\n      * 4; print\n1 + 2 +\n  9 - 5/2 + 3*5;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>input02</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">int fred;\nint jim;\nfred= 5;\njim= 12;\nprint fred + jim;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23006023075307900000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\\$ make test\ncc -o comp1 -g cg.c decl.c expr.c gen.c main.c misc.c scan.c stmt.c sym.c tree.c\n./comp1 input01\ncc -o out out.s\n./out\n36\n10\n25\n./comp1 input02\ncc -o out out.s\n./out\n17`, `23006023075307900000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">make</span> <span class="token builtin class-name">test</span>\ncc -o comp1 -g cg.c decl.c expr.c gen.c main.c misc.c scan.c stmt.c sym.c tree.c\n./comp1 input01\ncc -o out out.s\n./out\n<span class="token number">36</span>\n<span class="token number">10</span>\n<span class="token number">25</span>\n./comp1 input02\ncc -o out out.s\n./out\n<span class="token number">17</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>input01 生成的 out.s</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">\t.text\n.LC0:\n\t.string\t&quot;%d\\n&quot;\nprintint:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tsubq\t$16, %rsp\n\tmovl\t%edi, -4(%rbp)\n\tmovl\t-4(%rbp), %eax\n\tmovl\t%eax, %esi\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tnop\n\tleave\n\tret\n\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tmovq\t$12, %r8\n\tmovq\t$3, %r9\n\timulq\t%r8, %r9\n\tmovq\t%r9, %rdi\n\tcall\tprintint\n\tmovq\t$18, %r8\n\tmovq\t$2, %r9\n\tmovq\t$4, %r10\n\timulq\t%r9, %r10\n\tsubq\t%r10, %r8\n\tmovq\t%r8, %rdi\n\tcall\tprintint\n\tmovq\t$1, %r8\n\tmovq\t$2, %r9\n\taddq\t%r8, %r9\n\tmovq\t$9, %r8\n\taddq\t%r9, %r8\n\tmovq\t$5, %r9\n\tmovq\t$2, %r10\n\tmovq\t%r9,%rax\n\tcqo\n\tidivq\t%r10\n\tmovq\t%rax,%r9\n\tsubq\t%r9, %r8\n\tmovq\t$3, %r9\n\tmovq\t$5, %r10\n\timulq\t%r9, %r10\n\taddq\t%r8, %r10\n\tmovq\t%r10, %rdi\n\tcall\tprintint\n\tmovl\t$0, %eax\n\tpopq\t%rbp\n\tret</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>input02 生成的 out.s</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">\t.text\n.LC0:\n\t.string\t&quot;%d\\n&quot;\nprintint:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tsubq\t$16, %rsp\n\tmovl\t%edi, -4(%rbp)\n\tmovl\t-4(%rbp), %eax\n\tmovl\t%eax, %esi\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tnop\n\tleave\n\tret\n\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\t.comm\tfred,8,8\n\t.comm\tjim,8,8\n\tmovq\t$5, %r8\n\tmovq\t%r8, fred(%rip)\n\tmovq\t$12, %r8\n\tmovq\t%r8, jim(%rip)\n\tmovq\tfred(%rip), %r8\n\tmovq\tjim(%rip), %r9\n\taddq\t%r8, %r9\n\tmovq\t%r9, %rdi\n\tcall\tprintint\n\tmovl\t$0, %eax\n\tpopq\t%rbp\n\tret</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="结论"><a href="#%E7%BB%93%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结论</h1>\n<p>我们必须写出符号表管理，我们不得不处理两种新的语句类型，我们必须添加一些新的令牌和一些新的 AST 节点类型，最后我们必须添加一些代码以生成正确的 x86-64 程序集输出。</p>\n<p>尝试编写一些示例输入文件，并查看编译器是否可以正常工作，特别是如果它检测到语法错误和语义错误（可使用而无需声明）。</p>\n<p>在我们的编译器编写旅程的下一部分，我们将在我们的语言中添加六个比较运算符，在此之后的部分开始控制结构的编写。</p>',
id:"/github/workspace/blog/编译器之旅（六）——变量/index.md absPath of file >>> MarkdownRemark",timeToRead:8,frontmatter:{date:"2020-03-05 10:24:51",path:"/tour-of-compiler-variables/",tags:"编译原理, 变量",title:"编译器之旅（六）——变量",draft:null}}],length:1,tag:"变量",pagesSum:1,page:1}}}});