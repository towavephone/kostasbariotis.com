webpackJsonp([89724312631592],{1386:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"需求 在语言中添加一些声明语句： 准备 BNF 语法说明 我们已经看到了表达式的 BNF 表示法，现在让我们为以上语句定义 BNF 语法： 输入文件由几个语句组成，它们可以是一个语句，也可以是后面跟有更多语句的语句，每个语句均以关键字开头 print，然后是一个表达式，然后是分号。 核心逻辑 词法扫描器的更改 在编写解析以上语法的代码之前，我们需要在现有代码中添加更多细节，让我们从词法扫描器开始。 为分号添加 print…",html:'<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>在语言中添加一些声明语句：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55548080144819780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`print 2 + 3 * 5;\nprint 18 - 6/3 + 4*2;`, `55548080144819780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">print 2 + 3 * 5;\nprint 18 - 6/3 + 4*2;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<h2 id="bnf-语法说明"><a href="#bnf-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BNF 语法说明</h2>\n<p>我们已经看到了表达式的 BNF 表示法，现在让我们为以上语句定义 BNF 语法：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98342481815383210000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`statements: statement\n     | statement statements\n     ;\n\nstatement: \'print\' expression \';\'\n     ;`, `98342481815383210000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">statements: statement\n     | statement statements\n     ;\n\nstatement: &#39;print&#39; expression &#39;;&#39;\n     ;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>输入文件由几个语句组成，它们可以是一个语句，也可以是后面跟有更多语句的语句，每个语句均以关键字开头 print，然后是一个表达式，然后是分号。</p>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="词法扫描器的更改"><a href="#%E8%AF%8D%E6%B3%95%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E6%9B%B4%E6%94%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>词法扫描器的更改</h2>\n<p>在编写解析以上语法的代码之前，我们需要在现有代码中添加更多细节，让我们从词法扫描器开始。</p>\n<p>为分号添加 print 元素很容易，稍后我们将在该语言中有很多关键字，以及变量的标识符，因此我们需要添加一些代码来帮助我们处理它们。</p>\n<p>在 scan.c 中我添加了从 SubC 编译器搬来的这段代码，它将字母数字字符读入缓冲区，直到命中非字母数字字符为止。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64058540063002490000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Scan an identifier from the input file and\n// store it in buf[]. Return the identifier\'s length\nstatic int scanident(int c, char *buf, int lim) {\n  int i = 0;\n\n  // Allow digits, alpha and underscores\n  while (isalpha(c) || isdigit(c) || \'_\' == c) {\n    // Error if we hit the identifier length limit,\n    // else append to buf[] and get next character\n    if (lim - 1 == i) {\n      printf(&quot;identifier too long on line %d\\n&quot;, Line);\n      exit(1);\n    } else if (i < lim - 1) {\n      buf[i++] = c;\n    }\n    c = next();\n  }\n  // We hit a non-valid character, put it back.\n  // NUL-terminate the buf[] and return the length\n  putback(c);\n  buf[i] = \'\\0\';\n  return (i);\n}`, `64058540063002490000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Scan an identifier from the input file and</span>\n<span class="token comment">// store it in buf[]. Return the identifier\'s length</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">scanident</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Allow digits, alpha and underscores</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'_\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Error if we hit the identifier length limit,</span>\n    <span class="token comment">// else append to buf[] and get next character</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>lim <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"identifier too long on line %d\\n"</span><span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> lim <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      buf<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// We hit a non-valid character, put it back.</span>\n  <span class="token comment">// NUL-terminate the buf[] and return the length</span>\n  <span class="token function">putback</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'\\0\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们还需要一个功能来识别语言中的关键字，一种方法是拥有一个关键字列表，并将该列表和每个关键字逐个对比之后放在缓冲区中，SubC 的代码经过优化：在执行之前，与第一个字母匹配可以加快对数十个关键字的比较。现在，我们不需要此优化，但稍后将其放入其中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="38389286965777120000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Given a word from the input, return the matching\n// keyword token number or 0 if it\'s not a keyword.\n// Switch on the first letter so that we don\'t have\n// to waste time strcmp()ing against all the keywords.\nstatic int keyword(char *s) {\n  switch (*s) {\n    case \'p\':\n      if (!strcmp(s, &quot;print&quot;))\n        return (T_PRINT);\n      break;\n  }\n  return (0);\n}`, `38389286965777120000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Given a word from the input, return the matching</span>\n<span class="token comment">// keyword token number or 0 if it\'s not a keyword.</span>\n<span class="token comment">// Switch on the first letter so that we don\'t have</span>\n<span class="token comment">// to waste time strcmp()ing against all the keywords.</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">keyword</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'p\'</span><span class="token operator">:</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>T_PRINT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 scan() 的 switch 语句的底部，我们添加以下代码以识别分号和关键字：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12659816587866302000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`case \';\':\n  t->token = T_SEMI;\n  break;\ndefault:\n\n  // If it\'s a digit, scan the\n  // literal integer value in\n  if (isdigit(c)) {\n    t->intvalue = scanint(c);\n    t->token = T_INTLIT;\n    break;\n  } else if (isalpha(c) || \'_\' == c) {\n    // Read in a keyword or identifier\n    scanident(c, Text, TEXTLEN);\n\n    // If it\'s a recognised keyword, return that token\n    if (tokentype = keyword(Text)) {\n      t->token = tokentype;\n      break;\n    }\n    // Not a recognised keyword, so an error for now\n    printf(&quot;Unrecognised symbol %s on line %d\\n&quot;, Text, Line);\n    exit(1);\n  }\n  // The character isn\'t part of any recognised token, error\n  printf(&quot;Unrecognised character %c on line %d\\n&quot;, c, Line);\n  exit(1);`, `12659816587866302000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">case</span> <span class="token string">\';\'</span><span class="token operator">:</span>\n  t<span class="token operator">-></span>token <span class="token operator">=</span> T_SEMI<span class="token punctuation">;</span>\n  <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token keyword">default</span><span class="token operator">:</span>\n\n  <span class="token comment">// If it\'s a digit, scan the</span>\n  <span class="token comment">// literal integer value in</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    t<span class="token operator">-></span>intvalue <span class="token operator">=</span> <span class="token function">scanint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    t<span class="token operator">-></span>token <span class="token operator">=</span> T_INTLIT<span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'_\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Read in a keyword or identifier</span>\n    <span class="token function">scanident</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> TEXTLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// If it\'s a recognised keyword, return that token</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">=</span> <span class="token function">keyword</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> tokentype<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Not a recognised keyword, so an error for now</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unrecognised symbol %s on line %d\\n"</span><span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// The character isn\'t part of any recognised token, error</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unrecognised character %c on line %d\\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我还添加了一个全局 Text 缓冲区来存储关键字和标识符：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65453277225736500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#define TEXTLEN         512             // Length of symbols in input\nextern_ char Text[TEXTLEN + 1];         // Last identifier scanned`, `65453277225736500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TEXTLEN         512             </span><span class="token comment">// Length of symbols in input</span>\nextern_ <span class="token keyword">char</span> Text<span class="token punctuation">[</span>TEXTLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// Last identifier scanned</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h2 id="对表达式解析器的更改"><a href="#%E5%AF%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%99%A8%E7%9A%84%E6%9B%B4%E6%94%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>对表达式解析器的更改</h2>\n<p>到目前为止我们的输入文件只包含一个表达式，因此在 binexpr()（expr.c）中的 Pratt 解析器代码中，我们有以下代码退出解析器：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="78879489505755480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// If no tokens left, return just the left node\ntokentype = Token.token;\nif (tokentype == T_EOF)\n  return (left);`, `78879489505755480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// If no tokens left, return just the left node</span>\ntokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用我们的新语法每个表达式都以分号结尾（不是以文件结尾即 T<em>EOF），因此我们需要在表达式解析器中更改代码以发现 T</em>SEMI 标记并退出表达式解析：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51262803219650000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Return an AST tree whose root is a binary operator.\n// Parameter ptp is the previous token\'s precedence.\nstruct ASTnode *binexpr(int ptp) {\n  struct ASTnode *left, *right;\n  int tokentype;\n\n  // Get the integer literal on the left.\n  // Fetch the next token at the same time.\n  left = primary();\n\n  // If we hit a semicolon, return just the left node\n  tokentype = Token.token;\n  if (tokentype == T_SEMI)\n    return (left);\n\n    while (op_precedence(tokentype) > ptp) {\n      ...\n\n    // Update the details of the current token.\n    // If we hit a semicolon, return just the left node\n    tokentype = Token.token;\n    if (tokentype == T_SEMI)\n      return (left);\n    }\n}`, `51262803219650000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Return an AST tree whose root is a binary operator.</span>\n<span class="token comment">// Parameter ptp is the previous token\'s precedence.</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token keyword">int</span> ptp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> tokentype<span class="token punctuation">;</span>\n\n  <span class="token comment">// Get the integer literal on the left.</span>\n  <span class="token comment">// Fetch the next token at the same time.</span>\n  left <span class="token operator">=</span> <span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If we hit a semicolon, return just the left node</span>\n  tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_SEMI<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">op_precedence</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span> <span class="token operator">></span> ptp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token comment">// Update the details of the current token.</span>\n    <span class="token comment">// If we hit a semicolon, return just the left node</span>\n    tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_SEMI<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="对代码生成器的更改"><a href="#%E5%AF%B9%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E7%9A%84%E6%9B%B4%E6%94%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>对代码生成器的更改</h2>\n<p>我想将通用代码生成器 gen.c 与 CPU 中的特定代码分开 cg.c，这也意味着其余的编译器只能调用 gen.c 的代码，并且 gen.c 只可以调用 cg.c 中的代码。</p>\n<p>为此我在 gen.c 中定义了一些新的函数：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="19701584716759620000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void genpreamble()        { cgpreamble(); }\nvoid genpostamble()       { cgpostamble(); }\nvoid genfreeregs()        { freeall_registers(); }\nvoid genprintint(int reg) { cgprintint(reg); }`, `19701584716759620000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">void</span> <span class="token function">genpreamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">cgpreamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">genpostamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span> <span class="token function">cgpostamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">freeall_registers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">genprintint</span><span class="token punctuation">(</span><span class="token keyword">int</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">cgprintint</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="为语句添加解析器"><a href="#%E4%B8%BA%E8%AF%AD%E5%8F%A5%E6%B7%BB%E5%8A%A0%E8%A7%A3%E6%9E%90%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为语句添加解析器</h2>\n<p>stmt.c 将保存我们语言中所有主要语句的解析代码，现在我们需要解析 BNF 语法通过此单个功能即可完成，我已经将递归定义转换为循环：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52451144462138250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parse one or more statements\nvoid statements(void) {\n  struct ASTnode *tree;\n  int reg;\n\n  while (1) {\n    // Match a \'print\' as the first token\n    match(T_PRINT, &quot;print&quot;);\n\n    // Parse the following expression and\n    // generate the assembly code\n    tree = binexpr(0);\n    reg = genAST(tree);\n    genprintint(reg);\n    genfreeregs();\n\n    // Match the following semicolon\n    // and stop if we are at EOF\n    semi();\n    if (Token.token == T_EOF)\n      return;\n  }\n}`, `52451144462138250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parse one or more statements</span>\n<span class="token keyword">void</span> <span class="token function">statements</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>tree<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> reg<span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Match a \'print\' as the first token</span>\n    <span class="token function">match</span><span class="token punctuation">(</span>T_PRINT<span class="token punctuation">,</span> <span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Parse the following expression and</span>\n    <span class="token comment">// generate the assembly code</span>\n    tree <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    reg <span class="token operator">=</span> <span class="token function">genAST</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">genprintint</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Match the following semicolon</span>\n    <span class="token comment">// and stop if we are at EOF</span>\n    <span class="token function">semi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在每个循环中代码都会找到一个 <code class="language-text">T_PRINT</code> 元素，然后它调用 <code class="language-text">binexpr()</code> 解析表达式，最后它找到 <code class="language-text">T_SEMI</code> 元素，如果紧跟着 <code class="language-text">T_EOF</code> 元素，我们就会跳出循环。</p>\n<p>在每个表达式树之后，将 gen.c 调用的代码以将树转换为汇编代码，并调用 printint() 函数以打印出最终值。</p>\n<h2 id="一些辅助功能"><a href="#%E4%B8%80%E4%BA%9B%E8%BE%85%E5%8A%A9%E5%8A%9F%E8%83%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些辅助功能</h2>\n<p>上面的代码中有几个新的辅助函数，我将它们放入一个新文件中 misc.c：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35723518793958654000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Ensure that the current token is t,\n// and fetch the next token. Otherwise\n// throw an error\nvoid match(int t, char *what) {\n  if (Token.token == t) {\n    scan(&Token);\n  } else {\n    printf(&quot;%s expected on line %d\\n&quot;, what, Line);\n    exit(1);\n  }\n}\n\n// Match a semicon and fetch the next token\nvoid semi(void) {\n  match(T_SEMI, &quot;;&quot;);\n}`, `35723518793958654000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Ensure that the current token is t,</span>\n<span class="token comment">// and fetch the next token. Otherwise</span>\n<span class="token comment">// throw an error</span>\n<span class="token keyword">void</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s expected on line %d\\n"</span><span class="token punctuation">,</span> what<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Match a semicon and fetch the next token</span>\n<span class="token keyword">void</span> <span class="token function">semi</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">match</span><span class="token punctuation">(</span>T_SEMI<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这些构成了解析器中语法检查的一部分，稍后我将添加更多简短函数 match() 以使我们的语法检查更加容易。</p>\n<h2 id="更改为-main"><a href="#%E6%9B%B4%E6%94%B9%E4%B8%BA-main" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更改为 main()</h2>\n<p>main() 用于 binexpr() 直接调用以解析旧输入文件中的单个表达式，现在执行此操作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97123040391320760000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`scan(&Token);                 // Get the first token from the input\ngenpreamble();                // Output the preamble\nstatements();                 // Parse the statements in the input\ngenpostamble();               // Output the postamble\nfclose(Outfile);              // Close the output file and exit\nexit(0);`, `97123040391320760000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// Get the first token from the input</span>\n<span class="token function">genpreamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Output the preamble</span>\n<span class="token function">statements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// Parse the statements in the input</span>\n<span class="token function">genpostamble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// Output the postamble</span>\n<span class="token function">fclose</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// Close the output file and exit</span>\n<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83729049327687580000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`print 12 * 3;\nprint\n   18 - 2\n      * 4; print\n1 + 2 +\n  9 - 5/2 + 3*5;`, `83729049327687580000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">print 12 * 3;\nprint\n   18 - 2\n      * 4; print\n1 + 2 +\n  9 - 5/2 + 3*5;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41962652706702540000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\\$ make test\n# -o：编译可执行文件的地址 -g：便于调试\ncc -o comp1 -g cg.c expr.c gen.c main.c misc.c scan.c stmt.c tree.c\n# 执行并生成汇编文件\n./comp1 input01\n# 编译汇编文件 out.s 到可执行文件 out\ncc -o out out.s\n./out\n36\n10\n25`, `41962652706702540000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">make</span> <span class="token builtin class-name">test</span>\n<span class="token comment"># -o：编译可执行文件的地址 -g：便于调试</span>\ncc -o comp1 -g cg.c expr.c gen.c main.c misc.c scan.c stmt.c tree.c\n<span class="token comment"># 执行并生成汇编文件</span>\n./comp1 input01\n<span class="token comment"># 编译汇编文件 out.s 到可执行文件 out</span>\ncc -o out out.s\n./out\n<span class="token number">36</span>\n<span class="token number">10</span>\n<span class="token number">25</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>out.s</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="693171611101961500"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\t.text\n.LC0:\n\t.string\t&quot;%d\\n&quot;\nprintint:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tsubq\t\\$16, %rsp\n\tmovl\t%edi, -4(%rbp)\n\tmovl\t-4(%rbp), %eax\n\tmovl\t%eax, %esi\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t\\$0, %eax\n\tcall\tprintf@PLT\n\tnop\n\tleave\n\tret\n\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tmovq\t\\$12, %r8\n\tmovq\t\\$3, %r9\n\timulq\t%r8, %r9\n\tmovq\t%r9, %rdi\n\tcall\tprintint\n\tmovq\t\\$18, %r8\n\tmovq\t\\$2, %r9\n\tmovq\t\\$4, %r10\n\timulq\t%r9, %r10\n\tsubq\t%r10, %r8\n\tmovq\t%r8, %rdi\n\tcall\tprintint\n\tmovq\t\\$1, %r8\n\tmovq\t\\$2, %r9\n\taddq\t%r8, %r9\n\tmovq\t\\$9, %r8\n\taddq\t%r9, %r8\n\tmovq\t\\$5, %r9\n\tmovq\t\\$2, %r10\n\tmovq\t%r9,%rax\n\tcqo\n\tidivq\t%r10\n\tmovq\t%rax,%r9\n\tsubq\t%r9, %r8\n\tmovq\t\\$3, %r9\n\tmovq\t\\$5, %r10\n\timulq\t%r9, %r10\n\taddq\t%r8, %r10\n\tmovq\t%r10, %rdi\n\tcall\tprintint\n\tmovl\t\\$0, %eax\n\tpopq\t%rbp\n\tret`, `693171611101961500`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">\t.text\n.LC0:\n\t.string\t&quot;%d\\n&quot;\nprintint:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tsubq\t$16, %rsp\n\tmovl\t%edi, -4(%rbp)\n\tmovl\t-4(%rbp), %eax\n\tmovl\t%eax, %esi\n\tleaq\t.LC0(%rip), %rdi\n\tmovl\t$0, %eax\n\tcall\tprintf@PLT\n\tnop\n\tleave\n\tret\n\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n\tpushq\t%rbp\n\tmovq\t%rsp, %rbp\n\tmovq\t$12, %r8\n\tmovq\t$3, %r9\n\timulq\t%r8, %r9\n\tmovq\t%r9, %rdi\n\tcall\tprintint\n\tmovq\t$18, %r8\n\tmovq\t$2, %r9\n\tmovq\t$4, %r10\n\timulq\t%r9, %r10\n\tsubq\t%r10, %r8\n\tmovq\t%r8, %rdi\n\tcall\tprintint\n\tmovq\t$1, %r8\n\tmovq\t$2, %r9\n\taddq\t%r8, %r9\n\tmovq\t$9, %r8\n\taddq\t%r9, %r8\n\tmovq\t$5, %r9\n\tmovq\t$2, %r10\n\tmovq\t%r9,%rax\n\tcqo\n\tidivq\t%r10\n\tmovq\t%rax,%r9\n\tsubq\t%r9, %r8\n\tmovq\t$3, %r9\n\tmovq\t$5, %r10\n\timulq\t%r9, %r10\n\taddq\t%r8, %r10\n\tmovq\t%r10, %rdi\n\tcall\tprintint\n\tmovl\t$0, %eax\n\tpopq\t%rbp\n\tret</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="结论"><a href="#%E7%BB%93%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结论</h1>\n<p>我们已经在语言中添加了第一个 “真实” 语句语法，我已经用 BNF 表示法定义了它，但是通过循环而不是递归地实现它更容易。不用担心，我们将尽快返回递归解析。</p>\n<p>在此过程中，我们必须修改扫描程序，添加对关键字和标识符的支持，并更清晰地将通用代码生成器和特定于 CPU 的生成器分开。</p>\n<p>在编译器编写过程的下一部分中，我们将向语言添加变量。这将需要大量的工作。</p>',
id:"/github/workspace/blog/编译器之旅（五）——声明语句/index.md absPath of file >>> MarkdownRemark",timeToRead:6,frontmatter:{date:"2020-03-04 14:42:21",path:"/tour-of-compiler-declarative-statement/",tags:"编译原理, 声明语句",title:"编译器之旅（五）——声明语句",draft:null}}],length:1,tag:"声明语句",pagesSum:1,page:1}}}});