webpackJsonp([0xe051fd384539],{1332:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"背景知识 TypeScript Handbook 入门教程   深入理解 TypeScript 工具泛型的实现 Partial Partial 作用是将传入的属性变为可选项 前置知识 首先我们需要理解两个关键字 keyof 和 in，keyof 可以用来取得一个对象接口的所有 key 值，比如 而 in 则可以遍历枚举类型， 例如 源码解析 keyof 产生联合类型，in 则可以遍历枚举类型，所以他们经常一起使用，看下 Partial 源码 上面语句的意思是 keyof T 拿到 T…",html:'<h1 id="背景知识"><a href="#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>背景知识</h1>\n<p><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/" target="_blank" rel="nofollow noreferrer noopener">TypeScript Handbook 入门教程</a> <a href="https://jkchao.github.io/typescript-book-chinese/" target="_blank" rel="nofollow noreferrer noopener">深入理解 TypeScript</a></p>\n<h1 id="工具泛型的实现"><a href="#%E5%B7%A5%E5%85%B7%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>工具泛型的实现</h1>\n<h2 id="partial"><a href="#partial" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Partial</h2>\n<p>Partial 作用是将传入的属性变为可选项</p>\n<h3 id="前置知识"><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前置知识</h3>\n<p>首先我们需要理解两个关键字 keyof 和 in，keyof 可以用来取得一个对象接口的所有 key 值，比如</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47639974924843794000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Foo {\n  name: string;\n  age: number;\n}\ntype T = keyof Foo // -> &quot;name&quot; | &quot;age&quot;`, `47639974924843794000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\ntype <span class="token constant">T</span> <span class="token operator">=</span> keyof Foo <span class="token comment">// -> "name" | "age"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>而 in 则可以遍历枚举类型， 例如</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94910854859262670000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Keys = &quot;a&quot; | &quot;b&quot;\ntype Obj =  {\n  [p in Keys]: any\n} // -> { a: any， b: any }`, `94910854859262670000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Keys <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span>\ntype Obj <span class="token operator">=</span>  <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>p <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token punctuation">:</span> any\n<span class="token punctuation">}</span> <span class="token comment">// -> { a: any， b: any }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="源码解析"><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码解析</h3>\n<p>keyof 产生联合类型，in 则可以遍历枚举类型，所以他们经常一起使用，看下 Partial 源码</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67858728243840010000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Partial<T> = {\n  [P in keyof T]?: T[P]\n};`, `67858728243840010000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>上面语句的意思是 keyof T 拿到 T 所有属性名，然后 in 进行遍历，将值赋给 P，最后 <code class="language-text">T[P]</code> 取得相应属性的值</p>\n<p>结合中间的 ? 我们就明白了 Partial 的含义了</p>\n<h3 id="使用场景"><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用场景</h3>\n<p>假设我们有一个定义 user 的接口，如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67316399860938890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface IUser {\n  name: string\n  age: number\n  department: string\n}`, `67316399860938890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string\n  age<span class="token punctuation">:</span> number\n  department<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>经过 Partial 类型转化后得到</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="19787730791104807000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type optional = Partial<IUser>;\n\n// optional的结果如下\ntype optional = {\n  name?: string | undefined,\n  age?: number | undefined,\n  department?: string | undefined\n};`, `19787730791104807000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type optional <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>IUser<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// optional的结果如下</span>\ntype optional <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  age<span class="token operator">?</span><span class="token punctuation">:</span> number <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  department<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="required"><a href="#required" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Required</h2>\n<p>Required 的作用是将传入的属性变为必选项，源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="28015443854321553000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Required<T> = {\n  [P in keyof T]-?: T[P]\n};`, `28015443854321553000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>我们发现一个有意思的用法 -?，这里很好理解就是将可选项代表的 ? 去掉，从而让这个类型变成必选项。</p>\n<p>与之对应的还有个+? ，这个含义自然与-?之前相反，它是用来把属性变成可选项的.</p>\n<h2 id="mutable-未包含"><a href="#mutable-%E6%9C%AA%E5%8C%85%E5%90%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutable (未包含)</h2>\n<p>类似地，其实还有对 + 和 -，这里要说的不是变量的之间的进行加减而是对 readonly 进行加减。</p>\n<p>以下代码的作用就是将 T 的所有属性的 readonly 移除，你也可以写一个相反的出来.</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12176513020785707000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Mutable<T> = {\n  -readonly [P in keyof T]: T[P]\n}`, `12176513020785707000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Mutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">-</span>readonly <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="readonly"><a href="#readonly" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Readonly</h2>\n<p>将传入的属性变为只读选项, 源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92480920418662270000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Readonly<T> = {\n  readonly [P in keyof T]: T[P]\n};`, `92480920418662270000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  readonly <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="record"><a href="#record" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Record</h2>\n<h3 id="前置知识-1"><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前置知识</h3>\n<p>此处注意 K extends keyof T 和直接使用 K in keyof T 的区别，keyof T 仅仅代表键的字符串文字类型，而 extends keyof T 将返回该属性相同的类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="4917815208334430000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function prop<T, K extends keyof T>(obj: T, key: K) {\n    return obj[key];\n}\n\nfunction prop2<T>(obj: T, key: keyof T) {\n    return obj[key];\n}\n\nlet o = {\n    p1: 0,\n    p2: \'\'\n}\n\nlet v = prop(o, \'p1\') // is number, K is of type \'p1\'\nlet v2 = prop2(o, \'p1\') // is number | string, no extra info is captured`, `4917815208334430000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> prop<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> prop2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> keyof <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n    p1<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    p2<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">prop</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">\'p1\'</span><span class="token punctuation">)</span> <span class="token comment">// is number, K is of type \'p1\'</span>\n<span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token function">prop2</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">\'p1\'</span><span class="token punctuation">)</span> <span class="token comment">// is number | string, no extra info is captured</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="源码解析-1"><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码解析</h3>\n<p>将 K 中所有的属性的值转化为 T 类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9586823229582154000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Record<K extends keyof any, T> = {\n  [P in K]: T\n};`, `9586823229582154000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> any<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="pick"><a href="#pick" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Pick</h2>\n<p>从 T 中取出一系列 K 的属性</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="66765542021514035000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Pick<T, K extends keyof T> = {\n  [P in K]: T[P]\n};`, `66765542021514035000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h2 id="exclude"><a href="#exclude" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Exclude</h2>\n<h3 id="前置知识-2"><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前置知识</h3>\n<p>在 ts 2.8 中引入了一个条件类型，示例如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76889112228037200000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`T extends U ? X : Y`, `76889112228037200000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">X</span> <span class="token punctuation">:</span> <span class="token constant">Y</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>以上语句的意思就是如果 T 是 U 的子类型的话，那么就会返回 X，否则返回 Y，甚至可以组合多个</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41364602260625910000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TypeName<T> =\n    T extends string ? &quot;string&quot; :\n    T extends number ? &quot;number&quot; :\n    T extends boolean ? &quot;boolean&quot; :\n    T extends undefined ? &quot;undefined&quot; :\n    T extends Function ? &quot;function&quot; :\n    &quot;object&quot;;`, `41364602260625910000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span>\n    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">?</span> <span class="token string">"string"</span> <span class="token punctuation">:</span>\n    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span> <span class="token operator">?</span> <span class="token string">"number"</span> <span class="token punctuation">:</span>\n    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span> <span class="token operator">?</span> <span class="token string">"boolean"</span> <span class="token punctuation">:</span>\n    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">undefined</span> <span class="token operator">?</span> <span class="token string">"undefined"</span> <span class="token punctuation">:</span>\n    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token string">"function"</span> <span class="token punctuation">:</span>\n    <span class="token string">"object"</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对于联合类型来说会自动分发条件，例如 T extends U ? X : Y，T 可能是 A | B 的联合类型，那实际情况就变成(A extends U ? X : Y) | (B extends U ? X : Y)</p>\n<h3 id="源码解析-2"><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>源码解析</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20034472135781400000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Exclude<T, U> = T extends U ? never : T;`, `20034472135781400000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>结合实例</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="69043110696470070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type T = Exclude<1 | 2, 1 | 3>; // -> 2`, `69043110696470070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type <span class="token constant">T</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// -> 2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>很轻松地得出结果 2，据代码和示例我们可以推断出 Exclude 的作用是从 T 中找出 U 中没有的元素，换种更加贴近语义的说法其实就是从 T 中排除 U</p>\n<h2 id="extract"><a href="#extract" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Extract</h2>\n<p>根据源码我们推断出 Extract 的作用是提取出 T 包含在 U 中的元素，换种更加贴近语义的说法就是从 T 中提取出 U</p>\n<p>源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34270144764138320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Extract<T, U> = T extends U ? T : never;`, `34270144764138320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token punctuation">:</span> never<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="omit"><a href="#omit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Omit</h2>\n<p>用之前的 Pick 和 Exclude 进行组合，实现忽略对象某些属性功能，源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="49198919180975340000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Omit<T, K> = Pick<T, Exclude<keyof T, K>>\n\n// 使用\ntype Foo = Omit<{name: string, age: number}, \'name\'> // -> { age: number }`, `49198919180975340000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span>keyof <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span>\n\n<span class="token comment">// 使用</span>\ntype Foo <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> string<span class="token punctuation">,</span> age<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'name\'</span><span class="token operator">></span> <span class="token comment">// -> { age: number }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="returntype"><a href="#returntype" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ReturnType</h2>\n<p>在阅读源码之前我们需要了解一下 infer 这个关键字，在条件类型语句中，我们可以用 infer 声明一个类型变量并且对它进行使用，我们可以用它获取函数的返回类型，源码如下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="62822241224750620000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ReturnType<T> = T extends (\n  ...args: any[]\n) => infer R\n  ? R\n  : any;`, `62822241224750620000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R</span>\n  <span class="token operator">?</span> <span class="token constant">R</span>\n  <span class="token punctuation">:</span> any<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其实这里的 infer R 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="28150708806559986000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function foo(x: number): Array<number> {\n  return [x];\n}\ntype fn = ReturnType<typeof foo>;`, `28150708806559986000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\ntype fn <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> foo<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="axiosreturntype-未包含"><a href="#axiosreturntype-%E6%9C%AA%E5%8C%85%E5%90%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AxiosReturnType (未包含)</h2>\n<p>开发经常使用 axios 进行封装 API 层请求，通常是一个函数返回一个 <code class="language-text">AxiosPromise&lt;Resp&gt;</code>，现在我想取到它的 Resp 类型，根据上一个工具泛型的知识我们可以这样写</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="59173917005848770000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`import { AxiosPromise } from \'axios\' // 导入接口\ntype AxiosReturnType<T> = T extends (...args: any[]) => AxiosPromise<infer R> ? R : any\n\n// 使用\ntype Resp = AxiosReturnType<Api> // 泛型参数中传入你的 Api 请求函数`, `59173917005848770000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosPromise <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'axios\'</span> <span class="token comment">// 导入接口</span>\ntype AxiosReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> AxiosPromise<span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> any\n\n<span class="token comment">// 使用</span>\ntype Resp <span class="token operator">=</span> AxiosReturnType<span class="token operator">&lt;</span>Api<span class="token operator">></span> <span class="token comment">// 泛型参数中传入你的 Api 请求函数</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="巧用-typescript"><a href="#%E5%B7%A7%E7%94%A8-typescript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>巧用 TypeScript</h1>\n<h2 id="函数重载"><a href="#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数重载</h2>\n<p>TypeScript 提供函数重载的功能，用来处理因函数参数不同而返回类型不同的使用场景，使用时只需为同一个函数定义多个类型即可，简单使用如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81645470631160480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function test(a: number): number;\ndeclare function test(a: string): string;\n\nconst resS = test(\'Hello World\'); // resS 被推断出类型为 string；\nconst resN = test(1234); // resN 被推断出类型为 number;`, `81645470631160480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\ndeclare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">:</span> string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> resS <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Hello World\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// resS 被推断出类型为 string；</span>\n<span class="token keyword">const</span> resN <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// resN 被推断出类型为 number;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它也适用于参数不同，返回值类型相同的场景，我们只需要知道在哪种函数类型定义下能使用哪些参数即可。</p>\n<p>考虑如下例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="91352894030099070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n  name: string;\n  age: number;\n}\n\ndeclare function test(para: User | number, flag?: boolean): number;`, `91352894030099070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndeclare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> User <span class="token operator">|</span> number<span class="token punctuation">,</span> flag<span class="token operator">?</span><span class="token punctuation">:</span> boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在这个 test 函数里，我们的本意可能是当传入参数 para 是 User 时，不传 flag，当传入 para 是 number 时，传入 flag。TypeScript 并不知道这些，当你传入 para 为 User 时，flag 同样允许你传入：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47667519592796045000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const user = {\n  name: \'Jack\',\n  age: 666\n};\n\n// 没有报错，但是与想法违背\nconst res = test(user, false);`, `47667519592796045000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'Jack\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">666</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 没有报错，但是与想法违背</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用函数重载能帮助我们实现：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77132757731551480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n  name: string;\n  age: number;\n}\n\ndeclare function test(para: User): number;\ndeclare function test(para: number, flag: boolean): number;\n\nconst user = {\n  name: \'Jack\',\n  age: 666\n};\n\n// bingo\n// Error: 参数不匹配\nconst res = test(user, false);`, `77132757731551480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndeclare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> User</span><span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\ndeclare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> number<span class="token punctuation">,</span> flag<span class="token punctuation">:</span> boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'Jack\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">666</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bingo</span>\n<span class="token comment">// Error: 参数不匹配</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实际项目中，你可能要多写几步，如在 class 中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="5766758441831121000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n  name: string;\n  age: number;\n}\n\nconst user = {\n  name: \'Jack\',\n  age: 123\n};\n\nclass SomeClass {\n\n  /**\n   * 注释 1\n   */\n  public test(para: User): number;\n  /**\n   * 注释 2\n   */\n  public test(para: number, flag: boolean): number;\n  public test(para: User | number, flag?: boolean): number {\n    // 具体实现\n    return 11;\n  }\n}\n\nconst someClass = new SomeClass();\n\n// ok\nsomeClass.test(user);\nsomeClass.test(123, false);\n\n// Error，涉及到具体实现时，这个地方报错\nsomeClass.test(123);\nsomeClass.test(user, false);`, `5766758441831121000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'Jack\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">/**\n   * 注释 1\n   */</span>\n  <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  <span class="token comment">/**\n   * 注释 2\n   */</span>\n  <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> number<span class="token punctuation">,</span> flag<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> User <span class="token operator">|</span> number<span class="token punctuation">,</span> flag<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>\n    <span class="token comment">// 具体实现</span>\n    <span class="token keyword">return</span> <span class="token number">11</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Error，涉及到具体实现时，这个地方报错</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="映射类型"><a href="#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>映射类型</h2>\n<p>自从 TypeScript 2.1 版本推出映射类型以来，它便不断被完善与增强。在 2.1 版本中，可以通过 keyof 拿到对象 key 类型，内置 Partial、Readonly、Record、Pick 映射类型；2.3 版本增加 ThisType；2.8 版本增加 Exclude、Extract、NonNullable、ReturnType、InstanceType；同时在此版本中增加条件类型与增强 keyof 的能力；3.1 版本支持对元组与数组的映射。这些无不意味着映射类型在 TypeScript 有着举足轻重的地位。</p>\n<p>其中 ThisType 并没有出现在官方文档中，它主要用来在对象字面量中键入 this：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36344528941857444000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Compile with --noImplicitThis\n\ntype ObjectDescriptor<D, M> = {\n  data?: D;\n  methods?: M & ThisType<D & M>;  // Type of \'this\' in methods is D & M\n}\n\nfunction makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M {\n  let data: object = desc.data || {};\n  let methods: object = desc.methods || {};\n  return { ...data, ...methods } as D & M;\n}\n\nlet obj = makeObject({\n  data: { x: 0, y: 0 },\n  methods: {\n    moveBy(dx: number, dy: number) {\n      this.x += dx;  // Strongly typed this\n      this.y += dy;  // Strongly typed this\n    }\n  }\n});\n\nobj.x = 10;\nobj.y = 20;\nobj.moveBy(5, 5);`, `36344528941857444000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// Compile with --noImplicitThis</span>\n\ntype ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">D</span><span class="token punctuation">;</span>\n  methods<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">M</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">// Type of \'this\' in methods is D &amp; M</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> makeObject<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">(</span>desc<span class="token punctuation">:</span> ObjectDescriptor<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> data<span class="token punctuation">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> methods<span class="token punctuation">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">D</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token parameter">dx<span class="token punctuation">:</span> number<span class="token punctuation">,</span> dy<span class="token punctuation">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> dx<span class="token punctuation">;</span>  <span class="token comment">// Strongly typed this</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> dy<span class="token punctuation">;</span>  <span class="token comment">// Strongly typed this</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>正是由于 ThisType 的出现，Vue 2.5 才得以增强对 TypeScript 的支持。</p>\n</blockquote>\n<p>虽已内置了很多映射类型，但在很多时候，我们需要根据自己的项目自定义映射类型：</p>\n<p>比如你可能想取出接口类型中的函数类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12707995556531194000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never\n}[keyof T];\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;\n\ninterface Part {\n  id: number;\n  name: string;\n  subparts: Part[];\n  updatePart(newName: string): void;\n}\n\ntype T40 = FunctionPropertyNames<Part>;  // &quot;updatePart&quot;\ntype T42 = FunctionProperties<Part>;     // { updatePart(newName: string): void }`, `12707995556531194000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type FunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token punctuation">:</span> never\n<span class="token punctuation">}</span><span class="token punctuation">[</span>keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\ntype FunctionProperties<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> FunctionPropertyNames<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Part</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  subparts<span class="token punctuation">:</span> Part<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token function">updatePart</span><span class="token punctuation">(</span>newName<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">T40</span> <span class="token operator">=</span> FunctionPropertyNames<span class="token operator">&lt;</span>Part<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">// "updatePart"</span>\ntype <span class="token constant">T42</span> <span class="token operator">=</span> FunctionProperties<span class="token operator">&lt;</span>Part<span class="token operator">></span><span class="token punctuation">;</span>     <span class="token comment">// { updatePart(newName: string): void }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>比如你可能为了便捷，把本属于某个属性下的方法，通过一些方式 alias 到其他地方</p>\n<p>举个例子：SomeClass 下有个属性 value = [1, 2, 3]，你可能在 Decorators 给类添加了此种功能：在 SomeClass 里调用 this.find() 时，实际上是调用 this.value.find()，但是此时 TypeScript 并不知道这些：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="8671056335009042000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`class SomeClass {\n  value = [1, 2, 3];\n\n  someMethod() {\n    this.value.find(/* ... */); // ok\n    this.find(/* ... */); // Error：SomeClass 没有 find 方法。\n  }\n}`, `8671056335009042000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n  value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error：SomeClass 没有 find 方法。</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>借助于映射类型和 interface + class 的声明方式，可以实现我们的目的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79459110524726000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ArrayMethodName = \'filter\' | \'forEach\' | \'find\';\n\ntype SelectArrayMethod<T> = {\n [K in ArrayMethodName]: Array<T>[K]\n}\n\ninterface SomeClass extends SelectArrayMethod<number> {}\n\nclass SomeClass {\n value = [1, 2, 3];\n\n someMethod() {\n   this.forEach(/* ... */)        // ok\n   this.find(/* ... */)           // ok\n   this.filter(/* ... */)         // ok\n   this.value                     // ok\n   this.someMethod()              // ok\n }\n}\n\nconst someClass = new SomeClass();\nsomeClass.forEach(/* ... */)        // ok\nsomeClass.find(/* ... */)           // ok\nsomeClass.filter(/* ... */)         // ok\nsomeClass.value                     // ok\nsomeClass.someMethod()              // ok`, `79459110524726000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ArrayMethodName <span class="token operator">=</span> <span class="token string">\'filter\'</span> <span class="token operator">|</span> <span class="token string">\'forEach\'</span> <span class="token operator">|</span> <span class="token string">\'find\'</span><span class="token punctuation">;</span>\n\ntype SelectArrayMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> ArrayMethodName<span class="token punctuation">]</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">SomeClass</span> <span class="token keyword">extends</span> <span class="token class-name">SelectArrayMethod</span><span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>        <span class="token comment">// ok</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>           <span class="token comment">// ok</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>         <span class="token comment">// ok</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>value                     <span class="token comment">// ok</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// ok</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>        <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>           <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>         <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span>value                     <span class="token comment">// ok</span>\nsomeClass<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>导出 SomeClass 类时，也能使用。</p>\n</blockquote>\n<p>可能有点不足的地方，在这段代码里 <code class="language-text">interface SomeClass extends SelectArrayMethod&lt;number&gt; {}</code> 你需要手动添加范型的具体类型（暂时没想到更好方式）。</p>\n<h2 id="类型断言"><a href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>类型断言</h2>\n<p>类型断言用来明确的告诉 TypeScript 值的详细类型，合理使用能减少我们的工作量。</p>\n<p>比如一个变量并没有初始值，但是我们知道它的类型信息（它可能是从后端返回）有什么办法既能正确推导类型信息，又能正常运行了？有一种网上的推荐方式是设置初始值，然后使用 typeof 拿到类型（可能会给其他地方用）。然而我可能比较懒，不喜欢设置初始值，这时候使用类型断言可以解决这类问题：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25124900752146110000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n  name: string;\n  age: number;\n}\n\nexport default class NewRoom extends Vue {\n  private user = {} as User;\n}`, `25124900752146110000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">NewRoom</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> User<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在设置初始化时，添加断言，我们就无须添加初始值，编辑器也能正常的给予代码提示了。如果 user 属性很多，这样就能解决大量不必要的工作了，定义的 interface 也能给其他地方使用。</p>\n<h2 id="枚举类型"><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>枚举类型</h2>\n<p>枚举类型分为数字类型与字符串类型，其中数字类型的枚举可以当标志使用：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12189714117564932000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// https://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts#L3859\nexport const enum ObjectFlags {\n  Class            = 1 << 0,  // Class\n  Interface        = 1 << 1,  // Interface\n  Reference        = 1 << 2,  // Generic type reference\n  Tuple            = 1 << 3,  // Synthesized generic tuple type\n  Anonymous        = 1 << 4,  // Anonymous\n  Mapped           = 1 << 5,  // Mapped\n  Instantiated     = 1 << 6,  // Instantiated anonymous or mapped type\n  ObjectLiteral    = 1 << 7,  // Originates in an object literal\n  EvolvingArray    = 1 << 8,  // Evolving array type\n  ObjectLiteralPatternWithComputedProperties = 1 << 9,  // Object literal pattern with computed properties\n  ContainsSpread   = 1 << 10, // Object literal contains spread operation\n  ReverseMapped    = 1 << 11, // Object contains a property from a reverse-mapped type\n  JsxAttributes    = 1 << 12, // Jsx attributes type\n  MarkerType       = 1 << 13, // Marker type used for variance probing\n  JSLiteral        = 1 << 14, // Object type declared in JS - disables errors on read/write of nonexisting members\n  ClassOrInterface = Class | Interface\n}`, `12189714117564932000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// https://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts#L3859</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ObjectFlags <span class="token punctuation">{</span>\n  Class            <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// Class</span>\n  Interface        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// Interface</span>\n  Reference        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">// Generic type reference</span>\n  Tuple            <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token comment">// Synthesized generic tuple type</span>\n  Anonymous        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token comment">// Anonymous</span>\n  Mapped           <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">// Mapped</span>\n  Instantiated     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token comment">// Instantiated anonymous or mapped type</span>\n  ObjectLiteral    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment">// Originates in an object literal</span>\n  EvolvingArray    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token comment">// Evolving array type</span>\n  ObjectLiteralPatternWithComputedProperties <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token comment">// Object literal pattern with computed properties</span>\n  ContainsSpread   <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// Object literal contains spread operation</span>\n  ReverseMapped    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token comment">// Object contains a property from a reverse-mapped type</span>\n  JsxAttributes    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token comment">// Jsx attributes type</span>\n  MarkerType       <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token comment">// Marker type used for variance probing</span>\n  JSLiteral        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token comment">// Object type declared in JS - disables errors on read/write of nonexisting members</span>\n  ClassOrInterface <span class="token operator">=</span> Class <span class="token operator">|</span> Interface\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 TypeScript src/compiler/types 源码里，定义了大量如上所示的基于数字类型的常量枚举。它们是一种有效存储和表示布尔值集合的方法。</p>\n<p>在 《深入理解 TypeScript》 中有一个使用例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71240153079370880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`enum AnimalFlags {\n  None        = 0,\n  HasClaws    = 1 << 0,\n  CanFly      = 1 << 1,\n  HasClawsOrCanFly = HasClaws | CanFly\n}\n\ninterface Animal {\n  flags: AnimalFlags;\n  [key: string]: any;\n}\n\nfunction printAnimalAbilities(animal: Animal) {\n  var animalFlags = animal.flags;\n  if (animalFlags & AnimalFlags.HasClaws) {\n    console.log(\'animal has claws\');\n  }\n  if (animalFlags & AnimalFlags.CanFly) {\n    console.log(\'animal can fly\');\n  }\n  if (animalFlags == AnimalFlags.None) {\n    console.log(\'nothing\');\n  }\n}\n\nvar animal = { flags: AnimalFlags.None };\nprintAnimalAbilities(animal); // nothing\nanimal.flags |= AnimalFlags.HasClaws;\nprintAnimalAbilities(animal); // animal has claws\nanimal.flags &= ~AnimalFlags.HasClaws;\nprintAnimalAbilities(animal); // nothing\nanimal.flags |= AnimalFlags.HasClaws | AnimalFlags.CanFly;\nprintAnimalAbilities(animal); // animal has claws, animal can fly`, `71240153079370880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">enum</span> AnimalFlags <span class="token punctuation">{</span>\n  None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  HasClaws    <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  CanFly      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  HasClawsOrCanFly <span class="token operator">=</span> HasClaws <span class="token operator">|</span> CanFly\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  flags<span class="token punctuation">:</span> AnimalFlags<span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span><span class="token parameter">animal<span class="token punctuation">:</span> Animal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> animalFlags <span class="token operator">=</span> animal<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'animal has claws\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">&amp;</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'animal can fly\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animalFlags <span class="token operator">==</span> AnimalFlags<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'nothing\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span> flags<span class="token punctuation">:</span> AnimalFlags<span class="token punctuation">.</span>None <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>AnimalFlags<span class="token punctuation">.</span>HasClaws<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nothing</span>\nanimal<span class="token punctuation">.</span>flags <span class="token operator">|=</span> AnimalFlags<span class="token punctuation">.</span>HasClaws <span class="token operator">|</span> AnimalFlags<span class="token punctuation">.</span>CanFly<span class="token punctuation">;</span>\n<span class="token function">printAnimalAbilities</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// animal has claws, animal can fly</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上例代码中 |= 用来添加一个标志，&#x26;= 和 ~ 用来删除标志，| 用来合并标志。</p>\n<h2 id="decorator"><a href="#decorator" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Decorator</h2>\n<p>Decorator 早已不是什么新鲜事物，在 TypeScript 1.5 + 的版本中，我们可以利用内置类型 ClassDecorator、PropertyDecorator、MethodDecorator 与 ParameterDecorator 更快书写 Decorator，如 MethodDecorator：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10654384935919569000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare type MethodDecorator = <T>(\n  target: Object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n) => TypedPropertyDescriptor<T> | void;`, `10654384935919569000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare type MethodDecorator <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>\n  <span class="token parameter">target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>\n  propertyKey<span class="token punctuation">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span>\n  descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用时，只需在相应地方加上类型注解，匿名函数的参数类型也就会被自动推导出来了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79324601355940680000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function methodDecorator(): MethodDecorator {\n  return (target, key, descriptor) => {\n    // ...\n  };\n}`, `79324601355940680000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> MethodDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>值得一提的是，如果你在 Decorator 给目标类的 prototype 添加属性时，TypeScript 并不知道这些：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="13550894725070360000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function testAble(): ClassDecorator {\n  return (target) => {\n    target.prototype.someValue = true;\n  };\n}\n\n@testAble()\nclass SomeClass {}\n\nconst someClass = new SomeClass();\n\nsomeClass.someValue(); // Error: Property \'someValue\' does not exist on type \'SomeClass\'.`, `13550894725070360000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsomeClass<span class="token punctuation">.</span><span class="token function">someValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Property \'someValue\' does not exist on type \'SomeClass\'.</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这很常见，特别是当你想用 Decorator 来扩展一个类时。</p>\n<p>GitHub 上有一个关于此问题的 issues，直至目前，也没有一个合适的方案实现它。其主要问题在于 TypeScript 并不知道目标类是否使用了 Decorator 以及 Decorator 的名称。从这个 issues 来看，建议的解决办法是使用 Mixin：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25924397608161520000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Constructor<T> = new(...args: any[]) => T\n\n// mixin 函数的声明，需要实现\ndeclare function mixin<T1, T2>(...MixIns: [Constructor<T1>, Constructor<T2>]): Constructor<T1 & T2>;\n\nclass MixInClass1 {\n    mixinMethod1() {}\n}\n\nclass MixInClass2 {\n    mixinMethod2() {}\n}\n\nclass Base extends mixin(MixInClass1, MixInClass2) {\n    baseMethod() { }\n}\n\nconst x = new Base();\n\nx.baseMethod(); // OK\nx.mixinMethod1(); // OK\nx.mixinMethod2(); // OK\nx.mixinMethod3(); // Error`, `25924397608161520000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Constructor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>\n\n<span class="token comment">// mixin 函数的声明，需要实现</span>\ndeclare <span class="token keyword">function</span> mixin<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">...</span>MixIns<span class="token punctuation">:</span> <span class="token punctuation">[</span>Constructor<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token operator">></span><span class="token punctuation">,</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T1</span> <span class="token operator">&amp;</span> <span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MixInClass1</span> <span class="token punctuation">{</span>\n    <span class="token function">mixinMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MixInClass2</span> <span class="token punctuation">{</span>\n    <span class="token function">mixinMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">extends</span> <span class="token class-name">mixin</span><span class="token punctuation">(</span>MixInClass1<span class="token punctuation">,</span> MixInClass2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">baseMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nx<span class="token punctuation">.</span><span class="token function">baseMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nx<span class="token punctuation">.</span><span class="token function">mixinMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nx<span class="token punctuation">.</span><span class="token function">mixinMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\nx<span class="token punctuation">.</span><span class="token function">mixinMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当把大量的 JavaScript Decorator 重构为 Mixin 时，这无疑是一件让人头大的事情。</p>\n<p>这有一些偏方，能让你顺利从 JavaScript 迁移至 TypeScript：</p>\n<ul>\n<li>\n<p>显式赋值断言修饰符，即是在类里，明确说明某些属性存在于类上：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56925827831217470000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function testAble(): ClassDecorator {\nreturn target => {\n  target.prototype.someValue = true\n}\n}\n\n@testAble()\nclass SomeClass {\npublic someValue!: boolean;\n}\n\nconst someClass = new SomeClass();\nsomeClass.someValue // true`, `56925827831217470000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n<span class="token keyword">return</span> <span class="token parameter">target</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span> someValue<span class="token operator">!</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span>someValue <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>采用声明合并形式，单独定义一个 interface，把用 Decorator 扩展的属性的类型，放入 interface 中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11125264382410838000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface SomeClass {\nsomeValue: boolean;\n}\n\nfunction testAble(): ClassDecorator {\nreturn (target) => {\n  target.prototype.someValue = true;\n};\n}\n\n@testAble()\nclass SomeClass {}\n\nconst someClass = new SomeClass();\nsomeClass.someValue; // true`, `11125264382410838000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\nsomeValue<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>someValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">testAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> someClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsomeClass<span class="token punctuation">.</span>someValue<span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h2 id="reflect-metadata"><a href="#reflect-metadata" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reflect Metadata</h2>\n<p>Reflect Metadata 是 ES7 的一个提案，它主要用来在声明的时候添加和读取元数据。TypeScript 在 1.5+ 的版本已经支持它，你只需要：</p>\n<ul>\n<li>npm i reflect-metadata —save。</li>\n<li>在 tsconfig.json 里配置 emitDecoratorMetadata 选项。</li>\n</ul>\n<p>它具有诸多使用场景。</p>\n<h3 id="获取类型信息"><a href="#%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>获取类型信息</h3>\n<p>譬如在 vue-property-decorator 6.1 及其以下版本中，通过使用 Reflect.getMetadata API，Prop Decorator 能获取属性类型传至 Vue，简要代码如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84024578141763160000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function Prop(): PropertyDecorator {\n  return (target, key: string) => {\n    const type = Reflect.getMetadata(\'design:type\', target, key);\n    console.log(\\`\\${key} type: \\${type.name}\\`);\n    // other...\n  }\n}\n\nclass SomeClass {\n  @Prop()\n  public Aprop!: string;\n};`, `84024578141763160000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PropertyDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> type <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'design:type\'</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// other...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n  @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> Aprop<span class="token operator">!</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>运行代码可在控制台看到 Aprop type: string。除能获取属性类型外，通过 Reflect.getMetadata(“design:paramtypes”, target, key) 和 Reflect.getMetadata(“design:returntype”, target, key) 可以分别获取函数参数类型和返回值类型。</p>\n<h3 id="自定义-metadatakey"><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-metadatakey" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>自定义 metadataKey</h3>\n<p>除能获取类型信息外，常用于自定义 metadataKey，并在合适的时机获取它的值，示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79052766512674820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function classDecorator(): ClassDecorator {\n  return (target) => {\n    // 在类上定义元数据，key 为 \\`classMetaData\\`，value 为 \\`a\\`\n    Reflect.defineMetadata(\'classMetaData\', \'a\', target);\n  };\n}\n\nfunction methodDecorator(): MethodDecorator {\n  return (target, key, descriptor) => {\n    // 在类的原型属性 \'someMethod\' 上定义元数据，key 为 \\`methodMetaData\\`，value 为 \\`b\\`\n    Reflect.defineMetadata(\'methodMetaData\', \'b\', target, key);\n  };\n}\n\n@classDecorator()\nclass SomeClass {\n  @methodDecorator()\n  someMethod() {}\n}\n\nReflect.getMetadata(\'classMetaData\', SomeClass); // \'a\'\nReflect.getMetadata(\'methodMetaData\', new SomeClass(), \'someMethod\'); // \'b\'`, `79052766512674820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">classDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClassDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在类上定义元数据，key 为 `classMetaData`，value 为 `a`</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">\'classMetaData\'</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> MethodDecorator <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在类的原型属性 \'someMethod\' 上定义元数据，key 为 `methodMetaData`，value 为 `b`</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token string">\'methodMetaData\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">classDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n  @<span class="token function">methodDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'classMetaData\'</span><span class="token punctuation">,</span> SomeClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'a\'</span>\nReflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'methodMetaData\'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'someMethod\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'b\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="用例"><a href="#%E7%94%A8%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用例</h3>\n<h4 id="控制反转和依赖注入"><a href="#%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>控制反转和依赖注入</h4>\n<p>在 Angular 2+ 的版本中，控制反转与依赖注入便是基于此实现，现在，我们来实现一个简单版：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96005738038175290000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Constructor<T = any> = new (...args: any[]) => T;\n\nconst Injectable = (): ClassDecorator => target => {}\n\nclass OtherService {\n  a = 1\n}\n\n@Injectable()\nclass TestService {\n  constructor(public readonly otherService: OtherService) {}\n\n  testMethod() {\n    console.log(this.otherService.a);\n  }\n}\n\nconst Factory = <T>(target: Constructor<T>): T  => {\n  // 获取所有注入的服务\n  const providers = Reflect.getMetadata(\'design:paramtypes\', target); // [OtherService]\n  const args = providers.map((provider: Constructor) => new provider());\n  return new target(...args);\n}\n\nFactory(TestService).testMethod()   // 1`, `96005738038175290000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Constructor<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Injectable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter">ClassDecorator</span> <span class="token operator">=></span> <span class="token parameter">target</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">OtherService</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> readonly otherService<span class="token punctuation">:</span> OtherService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>otherService<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> Factory <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> Constructor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter"><span class="token constant">T</span></span>  <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取所有注入的服务</span>\n  <span class="token keyword">const</span> providers <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">\'design:paramtypes\'</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [OtherService]</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">provider<span class="token punctuation">:</span> Constructor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">Factory</span><span class="token punctuation">(</span>TestService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id="controller-与-get-的实现"><a href="#controller-%E4%B8%8E-get-%E7%9A%84%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Controller 与 Get 的实现</h4>\n<p>如果你在使用 TypeScript 开发 Node 应用，相信你对 Controller、Get、POST 这些 Decorator，并不陌生：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98734345052664300000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`@Controller(\'/test\')\nclass SomeClass {\n  @Get(\'/a\')\n  someGetMethod() {\n    return \'hello world\';\n  }\n\n  @Post(\'/b\')\n  somePostMethod() {}\n}`, `98734345052664300000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">\'/test\'</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">\'/a\'</span><span class="token punctuation">)</span>\n  <span class="token function">someGetMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'hello world\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">\'/b\'</span><span class="token punctuation">)</span>\n  <span class="token function">somePostMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它们也是基于 Reflect Metadata 实现，不同的是，这次我们将 metadataKey 定义在 descriptor 的 value 上（稍后解释），简单实现如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="5643307503999174000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const METHOD_METADATA = \'method\'；\nconst PATH_METADATA = \'path\'；\n\nconst Controller = (path: string): ClassDecorator => {\n  return target => {\n    Reflect.defineMetadata(PATH_METADATA, path, target);\n  }\n}\n\nconst createMappingDecorator = (method: string) => (path: string): MethodDecorator => {\n  return (target, key, descriptor) => {\n    Reflect.defineMetadata(PATH_METADATA, path, descriptor.value);\n    Reflect.defineMetadata(METHOD_METADATA, method, descriptor.value);\n  }\n}\n\nconst Get = createMappingDecorator(\'GET\');\nconst Post = createMappingDecorator(\'POST\');`, `5643307503999174000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">METHOD_METADATA</span> <span class="token operator">=</span> <span class="token string">\'method\'</span>；\n<span class="token keyword">const</span> <span class="token constant">PATH_METADATA</span> <span class="token operator">=</span> <span class="token string">\'path\'</span>；\n\n<span class="token keyword">const</span> Controller <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter">ClassDecorator</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token parameter">target</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">createMappingDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>path<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token parameter">MethodDecorator</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token constant">METHOD_METADATA</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> Get <span class="token operator">=</span> <span class="token function">createMappingDecorator</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Post <span class="token operator">=</span> <span class="token function">createMappingDecorator</span><span class="token punctuation">(</span><span class="token string">\'POST\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>接着，创建一个函数，映射出 route：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46476679639442285000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function mapRoute(instance: Object) {\n  const prototype = Object.getPrototypeOf(instance);\n\n  // 筛选出类的 methodName\n  const methodsNames = Object.getOwnPropertyNames(prototype).filter(\n    (item) => !isConstructor(item) && isFunction(prototype[item])\n  );\n  return methodsNames.map((methodName) => {\n    const fn = prototype[methodName];\n\n    // 取出定义的 metadata\n    const route = Reflect.getMetadata(PATH_METADATA, fn);\n    const method = Reflect.getMetadata(METHOD_METADATA, fn);\n    return {\n      route,\n      method,\n      fn,\n      methodName\n    };\n  });\n}`, `46476679639442285000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mapRoute</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 筛选出类的 methodName</span>\n  <span class="token keyword">const</span> methodsNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token function">isConstructor</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>prototype<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> methodsNames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">methodName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fn <span class="token operator">=</span> prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 取出定义的 metadata</span>\n    <span class="token keyword">const</span> route <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> method <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">METHOD_METADATA</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      route<span class="token punctuation">,</span>\n      method<span class="token punctuation">,</span>\n      fn<span class="token punctuation">,</span>\n      methodName\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们可以得到一些有用的信息：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9503165927236300000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Reflect.getMetadata(PATH_METADATA, SomeClass); // \'/test\'\n\nmapRoute(new SomeClass());\n\n/**\n * [{\n *    route: \'/a\',\n *    method: \'GET\',\n *    fn: someGetMethod() { ... },\n *    methodName: \'someGetMethod\'\n *  },{\n *    route: \'/b\',\n *    method: \'POST\',\n *    fn: somePostMethod() { ... },\n *    methodName: \'somePostMethod\'\n * }]\n *\n */`, `9503165927236300000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">PATH_METADATA</span><span class="token punctuation">,</span> SomeClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'/test\'</span>\n\n<span class="token function">mapRoute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * [{\n *    route: \'/a\',\n *    method: \'GET\',\n *    fn: someGetMethod() { ... },\n *    methodName: \'someGetMethod\'\n *  },{\n *    route: \'/b\',\n *    method: \'POST\',\n *    fn: somePostMethod() { ... },\n *    methodName: \'somePostMethod\'\n * }]\n *\n */</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最后，只需把 route 相关信息绑在 express 或者 koa 上就 ok 了。</p>\n<p>至于为什么要定义在 descriptor 的 value 上，我们希望 mapRoute 函数的参数是一个实例，而非 class 本身（控制反转）。</p>\n<h2 id="数组与元组"><a href="#%E6%95%B0%E7%BB%84%E4%B8%8E%E5%85%83%E7%BB%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>数组与元组</h2>\n<p>创建一个数组很简单：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97197548964047620000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr = [1];`, `97197548964047620000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>此时 TypeScript 将会推断 arr 类型为 number[]：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50080470723690260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`arr.push(\'1\'); // Error`, `50080470723690260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>当数组元素具有其它类型时，可以通过类型注解的方式：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="10142367097787530000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr: Array<string | number> = [1];\n\narr.push(\'1\'); // OK\narr.push(true); // Error`, `10142367097787530000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> arr<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>或者你也可以通过可选元组的方式：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17804390773547651000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr: [number, string?] = [1];  // arr 的成员类型可以是: number, string, undefined\narr.push(\'1\');   // OK\narr.push(true);   // Error`, `17804390773547651000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// arr 的成员类型可以是: number, string, undefined</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'1\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>\narr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>使用元组形式，还能提供指定位置的类型检查：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48954473666328700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`arr[0] = \'1\'; // Error\narr[1] = 1; // Error`, `48954473666328700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'1\'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\narr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<h3 id="使用"><a href="#%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用</h3>\n<p>通常，我们使用 Promise.all 并行发出多个请求：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="49769212936211100000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface A {\n  name: string;\n}\n\ninterface B {\n  age: number;\n}\n\nconst [{ data: a }, { data: b }] = await Promise.all([\n  axios.get < A > \'http://some.1\',\n  axios.get < B > \'http://some.2\'\n]);`, `49769212936211100000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> b <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  axios<span class="token punctuation">.</span>get <span class="token operator">&lt;</span> <span class="token constant">A</span> <span class="token operator">></span> <span class="token string">\'http://some.1\'</span><span class="token punctuation">,</span>\n  axios<span class="token punctuation">.</span>get <span class="token operator">&lt;</span> <span class="token constant">B</span> <span class="token operator">></span> <span class="token string">\'http://some.2\'</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>此时，TypeScript 能推出 a 的类型是 A, b 的类型是 B。</p>\n<p>现在，稍作改变：当满足特定条件时，才发出第二个请求：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6214785187217364000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 使用类型注解\nconst requestList: [Promise<AxiosResponse<A>>, Promise<AxiosResponse<B>>?]\n                    = [axios.get<A>(\'http://some.1\')];\nif (flag) {\n  requestList[1] = (axios.get<B>(\'http://some.2\'));\n};\nconst [ { data: a }, response ] = await Promise.all(requestList);`, `6214785187217364000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 使用类型注解</span>\n<span class="token keyword">const</span> requestList<span class="token punctuation">:</span> <span class="token punctuation">[</span>Promise<span class="token operator">&lt;</span>AxiosResponse<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">>></span><span class="token punctuation">,</span> Promise<span class="token operator">&lt;</span>AxiosResponse<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">>></span><span class="token operator">?</span><span class="token punctuation">]</span>\n                    <span class="token operator">=</span> <span class="token punctuation">[</span>axios<span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.1\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  requestList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.2\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span> response <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们期望它会如预想时那样工作，可是事与愿违，Promise.all(requestList)，会出现类型兼容性的报错，在这个 Issues 里，描述了相同的问题。</p>\n<p>现在，你可以通过断言的方式，来让程序正常运作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="3691916491382785000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const requestList: any[]  = [axios.get<A>(\'http://some.1\')];  // 设置为 any[] 类型\nif (flag) {\n  requestList[1] = (axios.get<B>(\'http://some.2\'));\n}\nconst [\n  { data: a },\n  response\n] = await Promise.all(requestList) as [AxiosResponse<A>, AxiosResponse<B>?] // 类型安全`, `3691916491382785000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> requestList<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">[</span>axios<span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.1\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 设置为 any[] 类型</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  requestList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span>get<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'http://some.2\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> data<span class="token punctuation">:</span> a <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  response\n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requestList<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">[</span>AxiosResponse<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">,</span> AxiosResponse<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token comment">// 类型安全</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="字面量类型"><a href="#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>字面量类型</h2>\n<p>在 JavaScript 基础上，TypeScript 扩展了一系列字面量类型，用来确保类型的准确性。</p>\n<p>如创建一个字符串字面量：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="80337608824176530000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const a = \'hello\'; // a 的类型是 \'hello\'\na = \'world\'; // Error`, `80337608824176530000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span> <span class="token comment">// a 的类型是 \'hello\'</span>\na <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>或者你也可以：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24692289809622213000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`let a: \'hello\' = \'hello\'; // a 的类型是 \'hello\'\na = \'world\'; // Error`, `24692289809622213000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token string">\'hello\'</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span> <span class="token comment">// a 的类型是 \'hello\'</span>\na <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>其它数据类型与此相似。</p>\n<p>你也可以定义交叉类型与联合类型的字面量：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6780438016507362000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface A {\n  name: string;\n}\ninterface B {\n  name: string;\n  age: number;\n}\n\ntype C = A | B;\ntype D = A & B;`, `6780438016507362000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">C</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span><span class="token punctuation">;</span>\ntype <span class="token constant">D</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="对象字面量类型"><a href="#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>对象字面量类型</h3>\n<p>对于对象字面量的类型，TypeScript 有一个被称之为 <code class="language-text">Freshness</code> 的概念，它也被称为更严格的对象字面量检查，如下例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17672102601149374000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`let someThing: { name: string };\nsomeThing = { name: \'hello\' }; // ok\nsomeThing = { name: \'hello\', age: 123 }; // Error, 对象字面量只能指定已知属性, { name: string } 类型中不存在 age 属性\n\nlet otherThing = { name: \'hello\', age: 123 };\nsomeThing = otherThing; // ok`, `17672102601149374000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">let</span> someThing<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span>\nsomeThing <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'hello\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\nsomeThing <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'hello\'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Error, 对象字面量只能指定已知属性, { name: string } 类型中不存在 age 属性</span>\n\n<span class="token keyword">let</span> otherThing <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'hello\'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nsomeThing <span class="token operator">=</span> otherThing<span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>TypeScript 认为创建的每个对象字面量都是 <code class="language-text">fresh</code> 状态；当一个 <code class="language-text">fresh</code> 对象字面量赋值给一个变量时，如果对象的类型与变量类型不兼容时，会出现报错（如上例子中 someThine = { name: ‘hello’, age: 123 }; 的错误）；当对象字面量的类型变宽，对象字面量的 <code class="language-text">fresh</code> 状态会消失（如上例子中 someThing = otherThing; ，赋值以后，someThing 的类型变宽）。</p>\n<p>一个更实际的用例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76741080338444390000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function logName(something: { name: string }) {\n  console.log(something.name);\n}\n\nconst obj = {\n  name: \'matt\',\n  job: \'being awesome\'\n};\n\nlogName(obj); // ok\nlogName({ name: \'matt\' }); // ok\nlogName({ nama: \'matt\' }); // Error: nama 属性在 { name: string } 属性中不存在。\nlogName({ name: \'matt\', job: \'being awesome\' }); // Error: 对象字面量只能指定已知属性，\\`job\\` 属性在这里并不存在。`, `76741080338444390000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">logName</span><span class="token punctuation">(</span><span class="token parameter">something<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'matt\'</span><span class="token punctuation">,</span>\n  job<span class="token punctuation">:</span> <span class="token string">\'being awesome\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">logName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'matt\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nama<span class="token punctuation">:</span> <span class="token string">\'matt\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: nama 属性在 { name: string } 属性中不存在。</span>\n<span class="token function">logName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'matt\'</span><span class="token punctuation">,</span> job<span class="token punctuation">:</span> <span class="token string">\'being awesome\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: 对象字面量只能指定已知属性，`job` 属性在这里并不存在。</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>基本原理与上文中相似，当想用更严格的类型检查时，可以传一个具有 fresh 状态的对象字面量（如 logName({ name: ‘matt’, job: ‘being awesome’ });）。当你想多传一些属性至函数，可以将对象字面量赋值至一个新变量，然后再传至函数（如 logName(obj)）。或者你也可以通过给函数形参添加多余类型的方式 function logName(someThing: { name: string; [key: string]: string })。</p>\n<h2 id="用-decorator-限制类型"><a href="#%E7%94%A8-decorator-%E9%99%90%E5%88%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用 Decorator 限制类型</h2>\n<p>Decorator 可用于限制类方法的返回类型，如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="61326014631282960000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const TestDecorator = () => {\n  return (\n    target: Object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<() => number> // 函数返回值必须是 number\n  ) => {\n    // 其他代码\n  };\n};\n\nclass Test {\n  @TestDecorator()\n  testMethod() {\n    return \'123\'; // Error: Type \'string\' is not assignable to type \'number\'\n  }\n}`, `61326014631282960000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">TestDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>\n    key<span class="token punctuation">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span>\n    descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> number<span class="token operator">></span> <span class="token comment">// 函数返回值必须是 number</span>\n  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 其他代码</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n  @<span class="token function">TestDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'123\'</span><span class="token punctuation">;</span> <span class="token comment">// Error: Type \'string\' is not assignable to type \'number\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>你也可以用泛型让 TestDecorator 的传入参数类型与 testMethod 的返回参数类型兼容：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="95852776469063650000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const TestDecorator = <T>(para: T) => {\n  return (target: Object, key: string | symbol, descriptor: TypedPropertyDescriptor<() => T>) => {\n    // 其他代码\n  };\n};\n\nclass Test {\n  @TestDecorator(\'hello\')\n  testMethod() {\n    return 123; // Error: Type \'number\' is not assignable to type \'string\'\n  }\n}`, `95852776469063650000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> TestDecorator <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token parameter">para<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span> descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 其他代码</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n  @<span class="token function">TestDecorator</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span>\n  <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Error: Type \'number\' is not assignable to type \'string\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="泛型的类型推断"><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>泛型的类型推断</h2>\n<p>在定义泛型后，有两种方式使用，一种是传入泛型类型，另一种使用类型推断，即编译器根据其他参数类型来推断泛型类型。简单示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18808152824906420000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function fn<T>(arg: T): T; // 定义一个泛型函数\n\nconst fn1 = fn < string > \'hello\'; // 第一种方式，传入泛型类型 string\nconst fn2 = fn(1); // 第二种方式，从参数 arg 传入的类型 number，来推断出泛型 T 的类型是 number`, `18808152824906420000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare <span class="token keyword">function</span> fn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个泛型函数</span>\n\n<span class="token keyword">const</span> fn1 <span class="token operator">=</span> fn <span class="token operator">&lt;</span> string <span class="token operator">></span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span> <span class="token comment">// 第一种方式，传入泛型类型 string</span>\n<span class="token keyword">const</span> fn2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二种方式，从参数 arg 传入的类型 number，来推断出泛型 T 的类型是 number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它通常与映射类型一起使用，用来实现一些比较复杂的功能。</p>\n<h3 id="vue-type-简单实现"><a href="#vue-type-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vue Type 简单实现</h3>\n<p>如下一个例子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29397582305698333000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Options<T> = {\n  [P in keyof T]: T[P];\n}\n\ndeclare function test<T>(o: Options<T>): T;\n\ntest({ name: \'Hello\' }).name     // string`, `29397582305698333000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndeclare <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name     <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>test 函数将传入参数的所有属性取出来，现在我们来一步一步加工，实现想要的功能。</p>\n<p>首先，更改传入参数的形式，由 <code class="language-text">{ name: &#39;Hello&#39; }</code> 的形式变更为 <code class="language-text">{ data: { name: &#39;Hello&#39; } }</code>，调用函数的返回值类型不变，即 <code class="language-text">test({ data: { name: &#39;Hello&#39; } }).name</code> 的值也是 string 类型。</p>\n<p>这并不复杂，这只需要把传入参数的 data 类型设置为 T 即可：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26737170038777934000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function test<T>(o: { data: Options<T> }): T;\n\ntest({ data: { name: \'Hello\' } }).name; // string`, `26737170038777934000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>当 data 对象里，含有函数时，它也能运作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92019642199926730000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const param = {\n  data: {\n    name: \'Hello\',\n    someMethod() {\n      return \'hello world\';\n    }\n  }\n};\n\ntest(param).someMethod(); // string`, `92019642199926730000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span><span class="token punctuation">,</span>\n    <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'hello world\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>接着，考虑一种特殊的函数情景，像 Vue 中 Computed 一样，不调用函数，也能取出函数的返回值类型。现在传入参数的形式变更为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86136220904347700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const param = {\n  data: {\n    name: \'Hello\'\n  },\n  computed: {\n    age() {\n      return 20;\n    }\n  }\n};`, `86136220904347700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>一个函数的类型可以简单的看成是 <code class="language-text">() =&gt; T</code> 的形式，对象中的方法类型，可以看成 <code class="language-text">a: () =&gt; T</code> 的形式，在反向推导时（由函数返回值，来推断类型 a 的类型）可以利用它，需要添加一个映射类型 <code class="language-text">Computed&lt;T&gt;</code>，用来处理 computed 里的函数：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86883533605714580000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Options<T> = {\n  [P in keyof T]: T[P]\n}\n\ntype Computed<T> = {\n  [P in keyof T]: () => T[P]\n}\n\ninterface Params<T, M> {\n  data: Options<T>;\n  computed: Computed<M>;\n}\n\ndeclare function test<T, M>(o: Params<T, M>): T & M;\n\nconst param = {\n  data: {\n    name: \'Hello\'\n  },\n  computed: {\n    age() {\n      return 20\n    }\n  }\n}\n\ntest(param).name    // string\ntest(param).age     // number`, `86883533605714580000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\ntype Computed<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Params</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n  computed<span class="token punctuation">:</span> Computed<span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndeclare <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> Params<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">20</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token comment">// string</span>\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>age     <span class="token comment">// number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最后，结合巧用 ThisType 映射类型，可以轻松的实现在 computed age 方法下访问 data 中的数据：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="69522778102231600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Options<T> = {\n  [P in keyof T]: T[P]\n}\n\ntype Computed<T> = {\n  [P in keyof T]: () => T[P]\n}\n\ninterface Params<T, M> {\n  data: Options<T>;\n  computed: Computed<M>;\n}\n\ndeclare function test<T, M>(o: Params<T, M>): T & M;\n\nconst param = {\n  data: {\n    name: \'Hello\'\n  },\n  computed: {\n    age() {\n      return 20\n    }\n  }\n}\n\ntest(param).name    // string\ntest(param).age     // number`, `69522778102231600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\ntype Computed<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Params</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\n  computed<span class="token punctuation">:</span> Computed<span class="token operator">&lt;</span><span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndeclare <span class="token keyword">function</span> test<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> Params<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">M</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">M</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'Hello\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">20</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token comment">// string</span>\n<span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>age     <span class="token comment">// number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="扁平数组构建树形结构"><a href="#%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E6%9E%84%E5%BB%BA%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>扁平数组构建树形结构</h3>\n<p>扁平数组构建树形结构即是将一组扁平数组，根据 parent_id（或者是其他）转换成树形结构：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="91632811314162610000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 转换前数据\nconst arr = [\n  { id: 1, parentId: 0, name: \'test1\' },\n  { id: 2, parentId: 1, name: \'test2\' },\n  { id: 3, parentId: 0, name: \'test3\' }\n];\n\n// 转化后\n[\n  {\n    id: 1,\n    parentId: 0,\n    name: \'test1\',\n    children: [\n      {\n        id: 2,\n        parentId: 1,\n        name: \'test2\',\n        children: []\n      }\n    ]\n  },\n  {\n    id: 3,\n    parentId: 0,\n    name: \'test3\',\n    children: []\n  }\n];`, `91632811314162610000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 转换前数据</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test1\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test2\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test3\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 转化后</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'test1\'</span><span class="token punctuation">,</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        parentId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> <span class="token string">\'test2\'</span><span class="token punctuation">,</span>\n        children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'test3\'</span><span class="token punctuation">,</span>\n    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果 children 字段名字不变，函数的类型并不难写，它大概是如下样子：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98942866550997140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Item {\n  id: number;\n  parentId: number;\n  name: string;\n}\n\ntype TreeItem = Item & { children: TreeItem[] | [] };\n\ndeclare function listToTree(list: Item[]): TreeItem[];\n\nlistToTree(arr).forEach((i) => i.children); // ok`, `98942866550997140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  parentId<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype TreeItem <span class="token operator">=</span> Item <span class="token operator">&amp;</span> <span class="token punctuation">{</span> children<span class="token punctuation">:</span> TreeItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ndeclare <span class="token keyword">function</span> <span class="token function">listToTree</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">:</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> TreeItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但是在很多时候，children 字段的名字并不固定，而是从参数中传进来：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29057226235281596000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const options = {\n  childrenKey: \'childrenList\'\n};\n\nlistToTree(arr, options);`, `29057226235281596000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  childrenKey<span class="token punctuation">:</span> <span class="token string">\'childrenList\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>此时 children 字段名称应该为 childrenList：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73883182745645710000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`[\n  {\n    id: 1,\n    parentId: 0,\n    name: \'test1\',\n    childrenList: [{ id: 2, parentId: 1, name: \'test2\', childrenList: [] }]\n  },\n  {\n    id: 3,\n    parentId: 0,\n    name: \'test3\',\n    childrenList: []\n  }\n];`, `73883182745645710000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'test1\'</span><span class="token punctuation">,</span>\n    childrenList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> parentId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'test2\'</span><span class="token punctuation">,</span> childrenList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    parentId<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'test3\'</span><span class="token punctuation">,</span>\n    childrenList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实现的思路大致是前文所说的利用泛型的类型推断，从传入的 options 参数中，得到 childrenKey 的类型，然后再传给 TreeItem，如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15815203959114666000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Options<T extends string> {   // 限制为 string 类型\n  childrenKey: T;\n}\n\ndeclare function listToTree<T extends string = \'children\'>(list: Item[], options: Options<T>): TreeItem<T>[];`, `15815203959114666000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment">// 限制为 string 类型</span>\n  childrenKey<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndeclare <span class="token keyword">function</span> listToTree<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">=</span> <span class="token string">\'children\'</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当 options 为 <code class="language-text">{ childrenKey: &#39;childrenList&#39; }</code> 时，T 能被正确推导出为 childrenList，接着只需要在 TreeItem 中，把 children 修改为传入的 T 即可：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="1971354618726195500"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Item {\n  id: number;\n  parentId: number;\n  name: string;\n}\n\ninterface Options<T extends string> {\n  childrenKey: T;\n}\n\ntype TreeItem<T extends string> = Item & { [key in T]: TreeItem<T>[] | [] };\n\ndeclare function listToTree<T extends string = \'children\'>(list: Item[], options: Options<T>): TreeItem<T>[];\n\nlistToTree(arr, { childrenKey: \'childrenList\' }).forEach(i => i.childrenList)    // ok`, `1971354618726195500`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>\n  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  parentId<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  childrenKey<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> Item <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ndeclare <span class="token keyword">function</span> listToTree<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">=</span> <span class="token string">\'children\'</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> TreeItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span> childrenKey<span class="token punctuation">:</span> <span class="token string">\'childrenList\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>childrenList<span class="token punctuation">)</span>    <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>有一点局限性，由于对象字面量的 Fresh 的影响，当 options 不是以对象字面量的形式传入时，需要给它断言：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23373385848336190000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const options = {\n  childrenKey: \'childrenList\' as \'childrenList\'\n}\n\nlistToTree(arr, options).forEach(i => i.childrenList)    // ok`, `23373385848336190000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  childrenKey<span class="token punctuation">:</span> <span class="token string">\'childrenList\'</span> <span class="token keyword">as</span> <span class="token string">\'childrenList\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">listToTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>childrenList<span class="token punctuation">)</span>    <span class="token comment">// ok</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="infer"><a href="#infer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>infer</h2>\n<p>infer 最早出现在此 PR 中，表示在 extends 条件语句中待推断的类型变量。</p>\n<p>简单示例如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48178675887740300000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ParamType<T> = T extends (param: infer P) => any ? P : T;`, `48178675887740300000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ParamType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>在这个条件语句 <code class="language-text">T extends (param: infer P) =&gt; any ? P : T</code> 中，<code class="language-text">infer P</code> 表示待推断的函数参数。</p>\n<p>整句表示为：如果 T 能赋值给 <code class="language-text">(param: infer P) =&gt; any</code>，则结果是 <code class="language-text">(param: infer P) =&gt; any</code> 类型中的参数 P，否则返回为 T。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46186038458687290000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface User {\n  name: string;\n  age: number;\n}\n\ntype Func = (user: User) => void;\n\ntype Param = ParamType<Func>; // Param = User\ntype AA = ParamType<string>; // string`, `46186038458687290000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user<span class="token punctuation">:</span> User</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\ntype Param <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>Func<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Param = User</span>\ntype <span class="token constant">AA</span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="内置类型"><a href="#%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>内置类型</h3>\n<p>在 2.8 版本中，TypeScript 内置了一些与 infer 有关的映射类型：</p>\n<ul>\n<li>\n<p>用于提取函数类型的返回值类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86395813736893190000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ReturnType<T> = T extends (...args: any[]) => infer P ? P : any;`, `86395813736893190000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> any<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>相比于文章开始给出的示例，<code class="language-text">ReturnType&lt;T&gt;</code> 只是将 infer P 从参数位置移动到返回值位置，因此此时 P 即是表示待推断的返回值类型。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="75836281930876940000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Func = () => User;\ntype Test = ReturnType<Func>; // Test = User`, `75836281930876940000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type <span class="token function-variable function">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> User<span class="token punctuation">;</span>\ntype Test <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// Test = User</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>用于提取构造函数中参数（实例）类型：</p>\n<p>一个构造函数可以使用 new 来实例化，因此它的类型通常表示如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="61503085847968000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Constructor = new (...args: any[]) => any;`, `61503085847968000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Constructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>当 infer 用于构造函数类型中，可用于参数位置 <code class="language-text">new (...args: infer P) =&gt; any;</code> 和返回值位置 <code class="language-text">new (...args: any[]) =&gt; infer P;</code>。</p>\n<p>因此就内置如下两个映射类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24828581732915868000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 获取参数类型\ntype ConstructorParameters<T extends new (...args: any[]) => any> = T extends new (...args: infer P) => any ? P : never;\n\n// 获取实例类型\ntype InstanceType<T extends new (...args: any[]) => any> = T extends new (...args: any[]) => infer R ? R : any;\n\nclass TestClass {\n\nconstructor(\n  public name: string,\n  public string: number\n) {}\n}\n\ntype Params = ConstructorParameters<typeof TestClass>;  // [string, number]\n\ntype Instance = InstanceType<typeof TestClass>;         // TestClass`, `24828581732915868000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 获取参数类型</span>\ntype ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> infer <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> never<span class="token punctuation">;</span>\n\n<span class="token comment">// 获取实例类型</span>\ntype InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> any<span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>\n\n<span class="token function">constructor</span><span class="token punctuation">(</span>\n  <span class="token parameter"><span class="token keyword">public</span> name<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n  <span class="token keyword">public</span> string<span class="token punctuation">:</span> number</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ntype Params <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">// [string, number]</span>\n\ntype Instance <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">></span><span class="token punctuation">;</span>         <span class="token comment">// TestClass</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h3 id="一些用例"><a href="#%E4%B8%80%E4%BA%9B%E7%94%A8%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>一些用例</h3>\n<p>至此，相信你已经对 infer 已有基本了解，我们来看看一些使用它的「骚操作」：</p>\n<ul>\n<li>\n<p>tuple 转 union ，如：<code class="language-text">[string, number] -&gt; string | number</code></p>\n<p>解答之前，我们需要了解 tuple 类型在一定条件下，是可以赋值给数组类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="44992413395709940000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TTuple = [string, number];\ntype TArray = Array<string | number>;\n\ntype Res = TTuple extends TArray ? true : false;    // true\ntype ResO = TArray extends TTuple ? true : false;   // false`, `44992413395709940000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type TTuple <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>\ntype TArray <span class="token operator">=</span> Array<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">></span><span class="token punctuation">;</span>\n\ntype Res <span class="token operator">=</span> TTuple <span class="token keyword">extends</span> <span class="token class-name">TArray</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>\ntype ResO <span class="token operator">=</span> TArray <span class="token keyword">extends</span> <span class="token class-name">TTuple</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// false</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>因此，在配合 infer 时，很容易做到：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="30505490190507168000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ElementOf<T> = T extends Array<infer E> ? E : never\n\ntype TTuple = [string, number];\n\ntype ToUnion = ElementOf<TTuple>; // string | number`, `30505490190507168000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ElementOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">E</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">E</span> <span class="token punctuation">:</span> never\n\ntype TTuple <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\ntype ToUnion <span class="token operator">=</span> ElementOf<span class="token operator">&lt;</span>TTuple<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string | number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在 stackoverflow 上看到另一种解法，比较简（牛）单（逼）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="19059239970939945000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TTuple = [string, number];\ntype Res = TTuple[number];  // string | number`, `19059239970939945000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type TTuple <span class="token operator">=</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>\ntype Res <span class="token operator">=</span> TTuple<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// string | number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>union 转 intersection，如：<code class="language-text">string | number -&gt; string &amp; number</code></p>\n<p>这个可能要稍微麻烦一点，需要 infer 配合 <code class="language-text">Distributive conditional types</code> 使用。</p>\n<p><code class="language-text">Distributive conditional types</code> 是由 <code class="language-text">naked type parameter</code> 构成的条件类型。而 <code class="language-text">naked type parameter</code> 表示没有被 Wrapped 的类型（如：<code class="language-text">Array&lt;T&gt;</code>、<code class="language-text">[T]</code>、<code class="language-text">Promise&lt;T&gt;</code> 等都是不是 <code class="language-text">naked type parameter</code>）。<code class="language-text">Distributive conditional types</code> 主要用于拆分 extends 左边部分的联合类型，举个例子：在条件类型 <code class="language-text">T extends U ? X : Y</code> 中，当 T 是 <code class="language-text">A | B</code> 时，会拆分成 <code class="language-text">A extends U ? X : Y | B extends U ? X : Y</code>；</p>\n<p>有了这个前提，再利用在逆变位置上，同一类型变量的多个候选类型将会被推断为交叉类型的特性，即</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14185423772063287000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Bar<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U : never;\ntype T20 = Bar<{ a: (x: string) => void, b: (x: string) => void }>;  // string\ntype T21 = Bar<{ a: (x: string) => void, b: (x: number) => void }>;  // string & number`, `14185423772063287000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Bar<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> infer <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function-variable function">b</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> infer <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token punctuation">:</span> never<span class="token punctuation">;</span>\ntype <span class="token constant">T20</span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function-variable function">b</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">// string</span>\ntype <span class="token constant">T21</span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function-variable function">b</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">// string &amp; number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>因此，综合以上几点，我们可以得到在 stackoverflow 上的一个答案：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="40055065296794760000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type UnionToIntersection<U> =\n(U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\ntype Result = UnionToIntersection<string | number>; // string & number`, `40055065296794760000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span>\n<span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">any</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> <span class="token constant">U</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">:</span> never<span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">:</span> infer <span class="token constant">I</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token punctuation">:</span> never<span class="token punctuation">;</span>\n\ntype Result <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// string &amp; number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当传入 <code class="language-text">string | number</code> 时：</p>\n<ul>\n<li>\n<p>第一步：<code class="language-text">(U extends any ? (k: U) =&gt; void : never)</code> 会把 union 拆分成 <code class="language-text">(string extends any ? (k: string) =&gt; void : never) | (number extends any ? (k: number)=&gt; void : never)</code>，即是得到 <code class="language-text">(k: string) =&gt; void | (k: number) =&gt; void</code>；</p>\n</li>\n<li>\n<p>第二步：<code class="language-text">(k: string) =&gt; void | (k: number) =&gt; void extends ((k: infer I) =&gt; void) ? I : never</code>，根据上文，可以推断出 I 为 string &#x26; number。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="leetcode-的一道-typescript-面试题"><a href="#leetcode-%E7%9A%84%E4%B8%80%E9%81%93-typescript-%E9%9D%A2%E8%AF%95%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LeetCode 的一道 TypeScript 面试题</h3>\n<p>前段时间，在 GitHub 上，发现一道来自 LeetCode TypeScript 的面试题，比较有意思，题目的大致意思是：</p>\n<p>假设有一个这样的类型（原题中给出的是类，这里简化为 interface）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97581126865441690000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Module {\n  count: number;\n  message: string;\n  asyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>;\n  syncMethod<T, U>(action: Action<T>): Action<U>;\n}`, `97581126865441690000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>\n  count<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  message<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">>></span><span class="token punctuation">;</span>\n  syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在经过 Connect 函数之后，返回值类型为</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60412048277674210000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Result {\n  asyncMethod<T, U>(input: T): Action<U>;\n  syncMethod<T, U>(action: T): Action<U>;\n}`, `60412048277674210000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Result <span class="token punctuation">{</span>\n  asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n  syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中 <code class="language-text">Action&lt;T&gt;</code> 的定义为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34749111057873240000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Action<T> {\n  payload?: T\n  type: string\n}`, `34749111057873240000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span>\n  type<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里主要考察两点</p>\n<ul>\n<li>挑选出函数</li>\n<li>条件类型 + 此篇文章所提及的 infer</li>\n</ul>\n<p>接下来就比较简单了，主要是利用条件类型 + infer，如果函数可以赋值给 <code class="language-text">asyncMethod&lt;T, U&gt;(input: Promise&lt;T&gt;): Promise&lt;Action&lt;U&gt;&gt;</code>，则取值为 <code class="language-text">asyncMethod&lt;T, U&gt;(input: T): Action&lt;U&gt;</code></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48818328815264960000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interface Action<T> {\n  payload?: T\n  type: string\n}\n\ninterface Module {\n  count: number;\n  message: string;\n  asyncMethod<T, U>(input: Promise<T>): Promise<Action<U>>;\n  syncMethod<T, U>(action: Action<T>): Action<U>;\n}\n\ntype asyncMethod<T, U> = (input: Promise<T>) => Promise<Action<U>> // 转换前\ntype asyncMethodConnect<T, U> = (input: T) => Action<U> // 转换后\ntype syncMethod<T, U> = (action: Action<T>) => Action<U> // 转换前\ntype syncMethodConnect<T, U> = (action: T) => Action<U> // 转换后\n\ntype methodsPick<T>  = {\n  [P in keyof T]: T[P] extends Function ? P : never;\n}[keyof T];\n\ntype ModuleMethodsConnect<T> = T extends asyncMethod<infer U, infer V>\n  ? asyncMethodConnect<U, V>\n  : T extends syncMethod<infer U, infer V>\n  ? syncMethodConnect<U, V>\n  : never\n\ntype ModuleMethods = methodsPick<Module>\n\ntype Connect = (module: Module) => {\n  [T in ModuleMethods]: ModuleMethodsConnect<Module[T]>\n}`, `48818328815264960000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  payload<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span>\n  type<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>\n  count<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  message<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n  asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">>></span><span class="token punctuation">;</span>\n  syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype asyncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">>></span> <span class="token comment">// 转换前</span>\ntype asyncMethodConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token comment">// 转换后</span>\ntype syncMethod<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token comment">// 转换前</span>\ntype syncMethodConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token comment">// 转换后</span>\n\ntype methodsPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>  <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token punctuation">:</span> never<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">[</span>keyof <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\ntype ModuleMethodsConnect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">asyncMethod</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token punctuation">,</span> infer <span class="token constant">V</span><span class="token operator">></span>\n  <span class="token operator">?</span> asyncMethodConnect<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span>\n  <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">syncMethod</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token punctuation">,</span> infer <span class="token constant">V</span><span class="token operator">></span>\n  <span class="token operator">?</span> syncMethodConnect<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">></span>\n  <span class="token punctuation">:</span> never\n\ntype ModuleMethods <span class="token operator">=</span> methodsPick<span class="token operator">&lt;</span>Module<span class="token operator">></span>\n\ntype <span class="token function-variable function">Connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">:</span> Module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">T</span> <span class="token keyword">in</span> ModuleMethods<span class="token punctuation">]</span><span class="token punctuation">:</span> ModuleMethodsConnect<span class="token operator">&lt;</span>Module<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">></span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="实战"><a href="#%E5%AE%9E%E6%88%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>实战</h1>\n<h2 id="参数简化"><a href="#%E5%8F%82%E6%95%B0%E7%AE%80%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参数简化</h2>\n<p>通过一个简单的功能把</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="95315005648445260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`distribute({\n  type: \'LOGIN\',\n  email: string\n});`, `95315005648445260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'LOGIN\'</span><span class="token punctuation">,</span>\n  email<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样的函数调用方式给简化为：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="82452209530887520000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`distribute(\'LOGIN\', {\n  email: string\n});`, `82452209530887520000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">distribute</span><span class="token punctuation">(</span><span class="token string">\'LOGIN\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  email<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h3 id="分布条件类型的真实用例"><a href="#%E5%88%86%E5%B8%83%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%9C%9F%E5%AE%9E%E7%94%A8%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>分布条件类型的真实用例</h3>\n<p>举一个类似 redux 中的 dispatch 的例子。</p>\n<p>首先，我们有一个联合类型 Action，用来表示所有可以被 dispatch 接受的参数类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99344314845145760000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Action =\n  | {\n      type: &quot;INIT&quot;\n    }\n  | {\n      type: &quot;SYNC&quot;\n    }\n  | {\n      type: &quot;LOG_IN&quot;\n      emailAddress: string\n    }\n  | {\n      type: &quot;LOG_IN_SUCCESS&quot;\n      accessToken: string\n    }`, `99344314845145760000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Action <span class="token operator">=</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"INIT"</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"SYNC"</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"LOG_IN"</span>\n      emailAddress<span class="token punctuation">:</span> string\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"LOG_IN_SUCCESS"</span>\n      accessToken<span class="token punctuation">:</span> string\n    <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>然后我们定义这个 dispatch 方法：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="4254569294258781000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function dispatch(action: Action): void;\n\n// ok\ndispatch({\n  type: \'INIT\'\n});\n\n// ok\ndispatch({\n  type: \'LOG_IN\',\n  emailAddress: \'david.sheldrick@artsy.net\'\n});\n\n// ok\ndispatch({\n  type: \'LOG_IN_SUCCESS\',\n  accessToken: \'038fh239h923908h\'\n});`, `4254569294258781000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'INIT\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span>\n  emailAddress<span class="token punctuation">:</span> <span class="token string">\'david.sheldrick@artsy.net\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'LOG_IN_SUCCESS\'</span><span class="token punctuation">,</span>\n  accessToken<span class="token punctuation">:</span> <span class="token string">\'038fh239h923908h\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个 API 是类型安全的，当 TS 识别到 type 为 LOG_IN 的时候，它会要求你在参数中传入 emailAddress 这个参数，这样才能完全满足联合类型中的其中一项。</p>\n<p>等等，我们好像可以让这个 api 变得更简单一点：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98032009163644400000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`dispatch(\'LOG_IN_SUCCESS\', {\n  accessToken: \'038fh239h923908h\'\n});`, `98032009163644400000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'LOG_IN_SUCCESS\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  accessToken<span class="token punctuation">:</span> <span class="token string">\'038fh239h923908h\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h3 id="参数简化实现"><a href="#%E5%8F%82%E6%95%B0%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>参数简化实现</h3>\n<p>首先，利用方括号选择出 Action 中的所有 type，这个技巧很有用。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26927943331722592000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ActionType = Action[&quot;type&quot;]\n// => &quot;INIT&quot; | &quot;SYNC&quot; | &quot;LOG_IN&quot; | &quot;LOG_IN_SUCCESS&quot;`, `26927943331722592000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ActionType <span class="token operator">=</span> Action<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span>\n<span class="token comment">// => "INIT" | "SYNC" | "LOG_IN" | "LOG_IN_SUCCESS"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>但是第二个参数的类型取决于第一个参数，我们可以使用类型变量来对该依赖关系建模。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77384060299544150000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function dispatch<T extends ActionType>(\n  type: T,\n  args: ExtractActionParameters<Action, T>\n): void`, `77384060299544150000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare <span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ActionType</span><span class="token operator">></span><span class="token punctuation">(</span>\n  type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  args<span class="token punctuation">:</span> ExtractActionParameters<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意，这里就用到了 extends 语法，规定了我们的入参 type 必须是 ActionType 中一部分。</p>\n<p>注意这里的第二个参数 args 用 <code class="language-text">ExtractActionParameters&lt;Action, T&gt;</code> 这个类型来把 type 和 args 做了关联</p>\n<p>来看看 ExtractActionParameters 是如何实现的：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71433630118400850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractActionParameters<A, T> = A extends { type: T } ? A : never`, `71433630118400850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> never</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>在这次实战中，我们第一次运用到了条件类型，<code class="language-text">ExtractActionParameters&lt;Action, T&gt;</code> 会按照我们上文提到的分布条件类型，把 Action 中的 4 项依次去和 <code class="language-text">{ type: T }</code> 进行比对，找出符合的那一项。</p>\n<p>来看看如何使用它：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="21714736811956280000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Test = ExtractActionParameters<Action, \'LOG_IN\'>;\n// => { type: &quot;LOG_IN&quot;, emailAddress: string }`, `21714736811956280000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Test <span class="token operator">=</span> ExtractActionParameters<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token string">\'LOG_IN\'</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// => { type: "LOG_IN", emailAddress: string }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>这样就筛选出了 type 匹配的一项。</p>\n<p>接下来我们要把 type 去掉，第一个参数已经是 type 了，因此我们不想再额外声明 type 了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20793674332950675000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 把类型中key为&quot;type&quot;去掉\ntype ExcludeTypeField<A> = { [K in Exclude<keyof A, &quot;type&quot;>]: A[K] }`, `20793674332950675000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 把类型中key为"type"去掉</span>\ntype ExcludeTypeField<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span>keyof <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>这里利用了 keyof 语法，并且利用内置类型 Exclude 把 type 这个 key 去掉，因此只会留下额外的参数。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43244000552630714000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Test = ExcludeTypeField<{ type: \'LOG_IN\', emailAddress: string }>;\n// { emailAddress: string }`, `43244000552630714000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Test <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span> emailAddress<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token comment">// { emailAddress: string }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>然后用它来剔除参数中的 type</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18400657957204558000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 把参数对象中的type去掉\ntype ExtractActionParametersWithoutType<A, T> = ExcludeTypeField<ExtractActionParameters<A, T>>;`, `18400657957204558000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 把参数对象中的type去掉</span>\ntype ExtractActionParametersWithoutType<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span>ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11912316014363754000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`declare function dispatch<T extends ActionType>(\n  type: T,\n  args: ExtractActionParametersWithoutType<Action, T>\n): void`, `11912316014363754000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">declare <span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ActionType</span><span class="token operator">></span><span class="token punctuation">(</span>\n  type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  args<span class="token punctuation">:</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>到此为止，我们就可以实现上文中提到的参数简化功能：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48524648445494310000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// ok\ndispatch({\n  type: \'LOG_IN\',\n  emailAddress: \'david.sheldrick@artsy.net\'\n});`, `48524648445494310000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span>\n  emailAddress<span class="token punctuation">:</span> <span class="token string">\'david.sheldrick@artsy.net\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="利用重载进一步优化"><a href="#%E5%88%A9%E7%94%A8%E9%87%8D%E8%BD%BD%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BC%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>利用重载进一步优化</h3>\n<p>到了这一步为止，虽然带参数的 Action 可以完美支持了，但是对于 “INIT” 这种不需要传参的 Action，我们依然要写下面这样代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84530156559361750000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`dispatch(\'INIT\', {});`, `84530156559361750000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'INIT\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>这肯定是不能接受的！所以我们要利用 TypeScript 的函数重载功能。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="37083625772598450000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 简单参数类型\nfunction dispatch<T extends SimpleActionType>(type: T): void\n\n// 复杂参数类型\nfunction dispatch<T extends ComplexActionType>(\n  type: T,\n  args: ExtractActionParametersWithoutType<Action, T>,\n): void\n\n// 实现\nfunction dispatch(arg: any, payload?: any) {}`, `37083625772598450000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 简单参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleActionType</span><span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span>\n\n<span class="token comment">// 复杂参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComplexActionType</span><span class="token operator">></span><span class="token punctuation">(</span>\n  type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  args<span class="token punctuation">:</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span>\n\n<span class="token comment">// 实现</span>\n<span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> any<span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token punctuation">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>那么关键点就在于 SimpleActionType 和 ComplexActionType 要如何实现了</p>\n<p>SimpleActionType 顾名思义就是除了 type 以外不需要额外参数的 Action 类型</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55219542312566600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SimpleAction = ExtractSimpleAction<Action>;`, `55219542312566600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type SimpleAction <span class="token operator">=</span> ExtractSimpleAction<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>我们如何定义这个 ExtractSimpleAction 条件类型？如果我们从这个 Action 中删除 type 字段，并且结果是一个空的接口，那么这就是一个 SimpleAction，所以我们可能会凭直觉写出这样的代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="78140166649978390000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractSimpleAction<A> = ExcludeTypeField<A> extends {} ? A : never`, `78140166649978390000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> never</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>但这样是行不通的，几乎所有的类型都可以 <code class="language-text">extends {}</code>，因为 <code class="language-text">{}</code> 太宽泛了。</p>\n<p>我们应该反过来写：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94488605543965160000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractSimpleAction<A> = {} extends ExcludeTypeField<A> ? A : never`, `94488605543965160000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ExcludeTypeField</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> never</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>现在如果 <code class="language-text">ExcludeTypeField &lt;A&gt;</code> 为空，则 extends 表达式为 true，否则为 false。</p>\n<p>但这仍然行不通！因为分布条件类型仅在 extends 关键字的前面是类型变量时发生。</p>\n<p>分布条件类型仅发生在如下场景：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9330787450985634000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Blah<Var> = Var extends Whatever ? A : B`, `9330787450985634000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Blah<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token operator">=</span> Var <span class="token keyword">extends</span> <span class="token class-name">Whatever</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>而不是：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76678642012986360000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Blah<Var> = Foo<Var> extends Whatever ? A : B\ntype Blah<Var> = Whatever extends Var ? A : B`, `76678642012986360000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Blah<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Whatever</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span>\ntype Blah<span class="token operator">&lt;</span>Var<span class="token operator">></span> <span class="token operator">=</span> Whatever <span class="token keyword">extends</span> <span class="token class-name">Var</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> <span class="token constant">B</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>但是我们可以通过一些小技巧绕过这个限制：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9350902341377432000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type ExtractSimpleAction<A> = A extends any\n  ? {} extends ExcludeTypeField<A>\n    ? A\n    : never\n  : never`, `9350902341377432000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span>\n  <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ExcludeTypeField</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>\n    <span class="token operator">?</span> <span class="token constant">A</span>\n    <span class="token punctuation">:</span> never\n  <span class="token punctuation">:</span> never</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">A extends any</code> 是一定成立的，这只是用来绕过 ts 对于分布条件类型的限制，没错啊，我们的 A 确实是在 extends 的前面了，就是骗你 TS，这里是分布条件类型。</p>\n<p>而我们真正想要做的条件判断被放在了中间，因此 Action 联合类型中的每一项又能够分布的去匹配了。</p>\n<p>那么我们就可以简单的筛选出所有不需要额外参数的 type</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="57555016862106560000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type SimpleAction = ExtractSimpleAction<Action>\ntype SimpleActionType = SimpleAction[\'type\']`, `57555016862106560000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type SimpleAction <span class="token operator">=</span> ExtractSimpleAction<span class="token operator">&lt;</span>Action<span class="token operator">></span>\ntype SimpleActionType <span class="token operator">=</span> SimpleAction<span class="token punctuation">[</span><span class="token string">\'type\'</span><span class="token punctuation">]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>再利用 Exclude 取反，找到复杂类型：</p>\n<p>type ComplexActionType = Exclude&#x3C;ActionType, SimpleActionType></p>\n<p>到此为止，我们所需要的功能就完美实现了：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54285753180739070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 简单参数类型\nfunction dispatch<T extends SimpleActionType>(type: T): void\n// 复杂参数类型\nfunction dispatch<T extends ComplexActionType>(\n  type: T,\n  args: ExtractActionParameters<Action, T>,\n): void\n// 实现\nfunction dispatch(arg: any, payload?: any) {}\n\n// ok\ndispatch(&quot;SYNC&quot;)\n\n// ok\ndispatch({\n  type: &quot;LOG_IN&quot;,\n  emailAddress: &quot;david.sheldrick@artsy.net&quot;\n})`, `54285753180739070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 简单参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleActionType</span><span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span>\n<span class="token comment">// 复杂参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComplexActionType</span><span class="token operator">></span><span class="token punctuation">(</span>\n  type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  args<span class="token punctuation">:</span> ExtractActionParameters<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span>\n<span class="token comment">// 实现</span>\n<span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> any<span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token punctuation">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"SYNC"</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ok</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token string">"LOG_IN"</span><span class="token punctuation">,</span>\n  emailAddress<span class="token punctuation">:</span> <span class="token string">"david.sheldrick@artsy.net"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="完整代码"><a href="#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>完整代码</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29933019997292655000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Action =\n  | {\n      type: &quot;INIT&quot;;\n    }\n  | {\n      type: &quot;SYNC&quot;;\n    }\n  | {\n      type: &quot;LOG_IN&quot;;\n      emailAddress: string;\n    }\n  | {\n      type: &quot;LOG_IN_SUCCESS&quot;;\n      accessToken: string;\n    };\n\n// 用类型查询查出 Action 中所有 type 的联合类型\ntype ActionType = Action[&quot;type&quot;];\n\n// 把类型中 key 为 type 去掉\ntype ExcludeTypeField<A> = { [K in Exclude<keyof A, &quot;type&quot;>]: A[K] };\n\ntype ExtractActionParameters<A, T> = A extends { type: T } ? A : never\n\n// 把参数对象中的 type 去掉\n// Extract<A, { type: T } 会挑选出能 extend { type: T } 这个结构的 Action 中的类型\ntype ExtractActionParametersWithoutType<A, T> = ExcludeTypeField<ExtractActionParameters<A, T>>;\n\ntype ExtractSimpleAction<A> = A extends any\n  ? {} extends ExcludeTypeField<A>\n    ? A\n    : never\n  : never;\n\ntype SimpleActionType = ExtractSimpleAction<Action>[&quot;type&quot;];\ntype ComplexActionType = Exclude<ActionType, SimpleActionType>;\n\n// 简单参数类型\nfunction dispatch<T extends SimpleActionType>(type: T): void;\n// 复杂参数类型\nfunction dispatch<T extends ComplexActionType>(\n  type: T,\n  args: ExtractActionParametersWithoutType<Action, T>\n): void;\n// 实现\nfunction dispatch(arg: any, payload?: any) {}\n\ndispatch(&quot;SYNC&quot;);\n\ndispatch(\'LOG_IN\', {\n  emailAddress: \'ssh@qq.com\'\n})`, `29933019997292655000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Action <span class="token operator">=</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"INIT"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"SYNC"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"LOG_IN"</span><span class="token punctuation">;</span>\n      emailAddress<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">"LOG_IN_SUCCESS"</span><span class="token punctuation">;</span>\n      accessToken<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用类型查询查出 Action 中所有 type 的联合类型</span>\ntype ActionType <span class="token operator">=</span> Action<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 把类型中 key 为 type 去掉</span>\ntype ExcludeTypeField<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span>keyof <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ntype ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token punctuation">:</span> never\n\n<span class="token comment">// 把参数对象中的 type 去掉</span>\n<span class="token comment">// Extract&lt;A, { type: T } 会挑选出能 extend { type: T } 这个结构的 Action 中的类型</span>\ntype ExtractActionParametersWithoutType<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> ExcludeTypeField<span class="token operator">&lt;</span>ExtractActionParameters<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span>\n\ntype ExtractSimpleAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">any</span>\n  <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ExcludeTypeField</span><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>\n    <span class="token operator">?</span> <span class="token constant">A</span>\n    <span class="token punctuation">:</span> never\n  <span class="token punctuation">:</span> never<span class="token punctuation">;</span>\n\ntype SimpleActionType <span class="token operator">=</span> ExtractSimpleAction<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\ntype ComplexActionType <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>ActionType<span class="token punctuation">,</span> SimpleActionType<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 简单参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleActionType</span><span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 复杂参数类型</span>\n<span class="token keyword">function</span> dispatch<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ComplexActionType</span><span class="token operator">></span><span class="token punctuation">(</span>\n  type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  args<span class="token punctuation">:</span> ExtractActionParametersWithoutType<span class="token operator">&lt;</span>Action<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 实现</span>\n<span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">:</span> any<span class="token punctuation">,</span> payload<span class="token operator">?</span><span class="token punctuation">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"SYNC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'LOG_IN\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  emailAddress<span class="token punctuation">:</span> <span class="token string">\'ssh@qq.com\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="ref-类型从零实现"><a href="#ref-%E7%B1%BB%E5%9E%8B%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ref 类型从零实现</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68198848352607896000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const count = ref(ref(ref(ref(2))));`, `68198848352607896000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>需要支持嵌套后解包，最后只会剩下 { value: number } 这个类型。</p>\n<h3 id="泛型的反向推导"><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%8D%E5%90%91%E6%8E%A8%E5%AF%BC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>泛型的反向推导</h3>\n<p>泛型的正向用法很多人都知道了。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="80061800425202700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Value<T> = T;\n\ntype NumberValue = Value<number>;`, `80061800425202700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Value<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\ntype NumberValue <span class="token operator">=</span> Value<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>这样，NumberValue 解析出的类型就是 number，其实就类似于类型系统里的传参。</p>\n<p>那么反向推导呢？</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="95436862449125500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function create<T>(val: T): T\n\nlet num: number\n\nconst c = create(num)`, `95436862449125500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> create<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token constant">T</span>\n\n<span class="token keyword">let</span> num<span class="token punctuation">:</span> number\n\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里泛型没有传入，居然也能推断出 value 的类型是 number。</p>\n<p>因为 <code class="language-text">create&lt;T&gt;</code> 这里的泛型 T 被分配给了传入的参数 <code class="language-text">value: T</code>，然后又用这个 T 直接作为返回的类型，</p>\n<p>简单来说，这里的三个 T 被关联起来了，并且在传入 create(2) 的那一刻，这个 T 被统一推断成了 number。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46815580857577360000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function create<2>(value: 2): 2`, `46815580857577360000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> create<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h3 id="索引签名"><a href="#%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>索引签名</h3>\n<p>假设我们有一个这样的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56350527203673620000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Test = {\n  foo: number;\n  bar: string\n}\n\ntype N = Test[\'foo\'] // number`, `56350527203673620000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Test <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  bar<span class="token punctuation">:</span> string\n<span class="token punctuation">}</span>\n\ntype <span class="token constant">N</span> <span class="token operator">=</span> Test<span class="token punctuation">[</span><span class="token string">\'foo\'</span><span class="token punctuation">]</span> <span class="token comment">// number</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以通过类似 JavaScript 中的对象属性查找的语法来找出对应的类型。</p>\n<h3 id="条件类型"><a href="#%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>条件类型</h3>\n<p>假设我们有一个这样的类型：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="1135670413886336000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type IsNumber<T> = T extends number ? \'yes\' : \'no\';\n\ntype A = IsNumber<2> // yes\ntype B = isNumber<\'3\'> // no`, `1135670413886336000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type IsNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">number</span> <span class="token operator">?</span> <span class="token string">\'yes\'</span> <span class="token punctuation">:</span> <span class="token string">\'no\'</span><span class="token punctuation">;</span>\n\ntype <span class="token constant">A</span> <span class="token operator">=</span> IsNumber<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span> <span class="token comment">// yes</span>\ntype <span class="token constant">B</span> <span class="token operator">=</span> isNumber<span class="token operator">&lt;</span><span class="token string">\'3\'</span><span class="token operator">></span> <span class="token comment">// no</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这就是一个典型的条件类型，用 extends 关键字配合三元运算符来判断传入的泛型是否可分配给 extends 后面的类型。</p>\n<p>同时也支持多层的三元运算符（后面会用到）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="69034793511215440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type TypeName<T> = T extends string\n  ? &quot;string&quot;\n  : T extends boolean\n      ? &quot;boolean&quot;\n      : &quot;object&quot;;\n\ntype T0 = TypeName<string>; // &quot;string&quot;\ntype T1 = TypeName<&quot;a&quot;>; // &quot;string&quot;\ntype T2 = TypeName<true>; // &quot;boolean&quot;`, `69034793511215440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span>\n  <span class="token operator">?</span> <span class="token string">"string"</span>\n  <span class="token punctuation">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">boolean</span>\n      <span class="token operator">?</span> <span class="token string">"boolean"</span>\n      <span class="token punctuation">:</span> <span class="token string">"object"</span><span class="token punctuation">;</span>\n\ntype <span class="token constant">T0</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>\ntype <span class="token constant">T1</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token string">"a"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>\ntype <span class="token constant">T2</span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "boolean"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="keyof"><a href="#keyof" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>keyof</h3>\n<p>keyof 操作符是 TS 中用来获取对象的 key 值集合的，比如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56538915241355020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Obj = {\n  foo: number;\n  bar: string;\n}\n\ntype Keys = keyof Obj // &quot;foo&quot; | &quot;bar&quot;`, `56538915241355020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  bar<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype Keys <span class="token operator">=</span> keyof Obj <span class="token comment">// "foo" | "bar"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样就轻松获取到了对象 key 值的联合类型：“foo” | “bar”。</p>\n<p>它也可以用在遍历中：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72461806718604870000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Obj = {\n  foo: number;\n  bar: string;\n}\n\ntype Copy = {\n  [K in keyof Obj]: Obj[K]\n}\n\n// Copy 得到和 Obj 一模一样的类型`, `72461806718604870000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token punctuation">:</span> number<span class="token punctuation">;</span>\n  bar<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype Copy <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> keyof Obj<span class="token punctuation">]</span><span class="token punctuation">:</span> Obj<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Copy 得到和 Obj 一模一样的类型</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看出，遍历的过程中右侧也可以通过索引直接访问到原类型 Obj 中对应 key 的类型。</p>\n<h3 id="infer-1"><a href="#infer-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>infer</h3>\n<p>这是一个比较难的点，文档中对它的描述是 条件类型中的类型推断。</p>\n<p>它的出现使得 ReturnType、 Parameters 等一众工具类型的支持都成为可能，是 TypeScript 进阶必须掌握的一个知识点了。</p>\n<p>注意前置条件，它一定是出现在条件类型中的。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="6703511750446811000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Get<T> = T extends infer R ? R: never`, `6703511750446811000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span><span class="token punctuation">:</span> never</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>注意，infer R 的位置代表了一个未知的类型，可以理解为在条件类型中给了它一个占位符，然后就可以在后面的三元运算符中使用它。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="32878431958352780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type T = Get<number>\n\n// 经过计算\ntype Get<number> = number extends infer number ? number: never\n\n// 得到\nnumber`, `32878431958352780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type <span class="token constant">T</span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>number<span class="token operator">></span>\n\n<span class="token comment">// 经过计算</span>\ntype Get<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> number <span class="token keyword">extends</span> <span class="token class-name">infer</span> number <span class="token operator">?</span> number<span class="token punctuation">:</span> never\n\n<span class="token comment">// 得到</span>\nnumber</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>它的使用非常灵活，它也可以出现在泛型位置：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20708655821848596000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type Unpack<T> = T extends Array<infer R> ? R : T`, `20708655821848596000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type Unpack<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token constant">T</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="5586554633673880000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`type NumArr = Array<number>\ntype U = Unpack<NumArr>\n\n// 经过计算\ntype Unpack<Array<number>> = Array<number> extends Array<infer R> ? R : T\n\n// 得到\nnumber`, `5586554633673880000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">type NumArr <span class="token operator">=</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span>\ntype <span class="token constant">U</span> <span class="token operator">=</span> Unpack<span class="token operator">&lt;</span>NumArr<span class="token operator">></span>\n\n<span class="token comment">// 经过计算</span>\ntype Unpack<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>number<span class="token operator">>></span> <span class="token operator">=</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>infer <span class="token constant">R</span><span class="token operator">></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token punctuation">:</span> <span class="token constant">T</span>\n\n<span class="token comment">// 得到</span>\nnumber</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>仔细看看，是不是有那么点感觉了，它就是对于 extends 后面未知的某些类型进行一个占位 infer R，后续就可以使用推断出来的 R 这个类型。</p>',
id:"/github/workspace/blog/TypeScript入门学习/index.md absPath of file >>> MarkdownRemark",timeToRead:34,frontmatter:{date:"2020-08-21 18:25:02",path:"/type-script-introduce-learn/",tags:"前端, TypeScript",title:"TypeScript 入门学习",draft:null}}],length:1,tag:"TypeScript",pagesSum:1,page:1}}}});