webpackJsonp([99383999428036],{1362:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"请解释事件委托（event delegation） 事件委托是将事件监听器添加到父元素，而不是每个子元素单独设置事件监听器。当触发子元素时，事件会冒泡到父元素，监听器就会触发。这种技术的好处是： 内存占用减少，因为只需要一个父元素的事件处理程序，而不必为每个后代都添加事件处理程序。 无需从已删除的元素中解绑处理程序，也无需将处理程序绑定到新元素上。 参考 https://davidwalsh.name/event-delegate https://stackoverflow.com…",html:'<h2 id="请解释事件委托（event-delegation）"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%88event-delegation%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释事件委托（event delegation）</h2>\n<p>事件委托是将事件监听器添加到父元素，而不是每个子元素单独设置事件监听器。当触发子元素时，事件会冒泡到父元素，监听器就会触发。这种技术的好处是：</p>\n<ul>\n<li>内存占用减少，因为只需要一个父元素的事件处理程序，而不必为每个后代都添加事件处理程序。</li>\n<li>无需从已删除的元素中解绑处理程序，也无需将处理程序绑定到新元素上。</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://davidwalsh.name/event-delegate" target="_blank" rel="nofollow noreferrer noopener">https://davidwalsh.name/event-delegate</a></li>\n<li><a href="https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation</a></li>\n</ul>\n<h2 id="请简述-javascript-中的-this"><a href="#%E8%AF%B7%E7%AE%80%E8%BF%B0-javascript-%E4%B8%AD%E7%9A%84-this" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请简述 JavaScript 中的 this</h2>\n<p>JS 中的<code class="language-text">this</code>是一个相对复杂的概念，不是简单几句能解释清楚的。粗略地讲，函数的调用方式决定了<code class="language-text">this</code>的值。我阅读了网上很多关于<code class="language-text">this</code>的文章，<a href="https://medium.com/@arnav_aggarwal" target="_blank" rel="nofollow noreferrer noopener">Arnav Aggrawal</a> 写的比较清楚。<code class="language-text">this</code>取值符合以下规则：</p>\n<ol>\n<li>在调用函数时使用<code class="language-text">new</code>关键字，函数内的<code class="language-text">this</code>是一个全新的对象。</li>\n<li>如果<code class="language-text">apply</code>、<code class="language-text">call</code>或<code class="language-text">bind</code>方法用于调用、创建一个函数，函数内的 this 就是作为参数传入这些方法的对象。</li>\n<li>当函数作为对象里的方法被调用时，函数内的<code class="language-text">this</code>是调用该函数的对象。比如当<code class="language-text">obj.method()</code>被调用时，函数内的 this 将绑定到<code class="language-text">obj</code>对象。</li>\n<li>如果调用函数不符合上述规则，那么<code class="language-text">this</code>的值指向全局对象（global object）。浏览器环境下<code class="language-text">this</code>的值指向<code class="language-text">window</code>对象，但是在严格模式下(<code class="language-text">&#39;use strict&#39;</code>)，<code class="language-text">this</code>的值为<code class="language-text">undefined</code>。</li>\n<li>如果符合上述多个规则，则较高的规则（1 号最高，4 号最低）将决定<code class="language-text">this</code>的值。</li>\n<li>如果该函数是 ES2015 中的箭头函数，将忽略上面的所有规则，<code class="language-text">this</code>被设置为它被创建时的上下文。</li>\n</ol>\n<p>想获得更深入的解释，请查看<a href="https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3" target="_blank" rel="nofollow noreferrer noopener">他在 Medium 上的文章</a>。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3" target="_blank" rel="nofollow noreferrer noopener">https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3</a></li>\n<li><a href="https://stackoverflow.com/a/3127440/1751946" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/a/3127440/1751946</a></li>\n</ul>\n<h2 id="请解释原型继承（prototypal-inheritance）的工作原理"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%EF%BC%88prototypal-inheritance%EF%BC%89%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释原型继承（prototypal inheritance）的工作原理</h2>\n<p>这是一个非常常见的 JavaScript 问题。所有 JS 对象都有一个<code class="language-text">prototype</code>属性，指向它的原型对象。当试图访问一个对象的属性时，如果没有在该对象上找到，它还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。这种行为是在模拟经典的继承，<a href="https://davidwalsh.name/javascript-objects" target="_blank" rel="nofollow noreferrer noopener">但是与其说是继承，不如说是委托（delegation）</a>。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.quora.com/What-is-prototypal-inheritance/answer/Kyle-Simpson" target="_blank" rel="nofollow noreferrer noopener">https://www.quora.com/What-is-prototypal-inheritance/answer/Kyle-Simpson</a></li>\n<li><a href="https://davidwalsh.name/javascript-objects" target="_blank" rel="nofollow noreferrer noopener">https://davidwalsh.name/javascript-objects</a></li>\n</ul>\n<h2 id="说说你对-amd-和-commonjs-的了解"><a href="#%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9-amd-%E5%92%8C-commonjs-%E7%9A%84%E4%BA%86%E8%A7%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>说说你对 AMD 和 CommonJS 的了解</h2>\n<p>它们都是实现模块体系的方式，直到 ES2015 出现之前，JavaScript 一直没有模块体系。CommonJS 是同步的，而 AMD（Asynchronous Module Definition）从全称中可以明显看出是异步的。CommonJS 的设计是为服务器端开发考虑的，而 AMD 支持异步加载模块，更适合浏览器。</p>\n<p>我发现 AMD 的语法非常冗长，CommonJS 更接近其他语言 import 声明语句的用法习惯。大多数情况下，我认为 AMD 没有使用的必要，因为如果把所有 JavaScript 都捆绑进一个文件中，将无法得到异步加载的好处。此外，CommonJS 语法上更接近 Node 编写模块的风格，在前后端都使用 JavaScript 开发之间进行切换时，语境的切换开销较小。</p>\n<p>我很高兴看到 ES2015 的模块加载方案同时支持同步和异步，我们终于可以只使用一种方案了。虽然它尚未在浏览器和 Node 中完全推出，但是我们可以使用代码转换工具进行转换。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://auth0.com/blog/javascript-module-systems-showdown/" target="_blank" rel="nofollow noreferrer noopener">https://auth0.com/blog/javascript-module-systems-showdown/</a></li>\n<li><a href="https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs</a></li>\n</ul>\n<h2 id="请解释下面代码为什么不能用作-iife：function-foo-，需要作出哪些修改才能使其成为-iife？"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BD%9C-iife%EF%BC%9Afunction-foo-%EF%BC%8C%E9%9C%80%E8%A6%81%E4%BD%9C%E5%87%BA%E5%93%AA%E4%BA%9B%E4%BF%AE%E6%94%B9%E6%89%8D%E8%83%BD%E4%BD%BF%E5%85%B6%E6%88%90%E4%B8%BA-iife%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释下面代码为什么不能用作 IIFE：function foo(){ }();，需要作出哪些修改才能使其成为 IIFE？</h2>\n<p>IIFE（Immediately Invoked Function Expressions）代表立即执行函数。 JavaScript 解析器将 <code class="language-text">function foo(){ }();</code>解析成<code class="language-text">function foo(){ }</code>和<code class="language-text">();</code>。其中，前者是函数声明；后者（一对括号）是试图调用一个函数，却没有指定名称，因此它会抛出<code class="language-text">Uncaught SyntaxError: Unexpected token )</code>的错误。</p>\n<p>修改方法是：再添加一对括号，形式上有两种：<code class="language-text">(function foo(){ })()</code>和<code class="language-text">(function foo(){ }())</code>。以上函数不会暴露到全局作用域，如果不需要在函数内部引用自身，可以省略函数的名称。</p>\n<p>你可能会用到 <code class="language-text">void</code> 操作符：<code class="language-text">void function foo(){ }();</code>。但是，这种做法是有问题的。表达式的值是<code class="language-text">undefined</code>，所以如果你的 IIFE 有返回值，不要用这种做法。例如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65374407445628060000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Don\'t add JS syntax to this code block to prevent Prettier from formatting it.\nconst foo = void (function bar() {\n  return \'foo\';\n})();\n\nconsole.log(foo); // undefined`, `65374407445628060000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// Don\'t add JS syntax to this code block to prevent Prettier from formatting it.</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">\'foo\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="http://lucybain.com/blog/2014/immediately-invoked-function-expression/" target="_blank" rel="nofollow noreferrer noopener">http://lucybain.com/blog/2014/immediately-invoked-function-expression/</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void</a></li>\n</ul>\n<h2 id="null、undefined-和未声明变量之间有什么区别？如何检查判断这些状态值？"><a href="#null%E3%80%81undefined-%E5%92%8C%E6%9C%AA%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E5%88%A4%E6%96%AD%E8%BF%99%E4%BA%9B%E7%8A%B6%E6%80%81%E5%80%BC%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>null、undefined 和未声明变量之间有什么区别？如何检查判断这些状态值？</h2>\n<p>当你没有提前使用<code class="language-text">var</code>、<code class="language-text">let</code>或<code class="language-text">const</code>声明变量，就为一个变量赋值时，该变量是未声明变量（undeclared variables）。未声明变量会脱离当前作用域，成为全局作用域下定义的变量。在严格模式下，给未声明的变量赋值，会抛出<code class="language-text">ReferenceError</code>错误。和使用全局变量一样，使用未声明变量也是非常不好的做法，应当尽可能避免。要检查判断它们，需要将用到它们的代码放在<code class="language-text">try</code>/<code class="language-text">catch</code>语句中。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="58729043082251930000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function foo() {\n  x = 1; // 在严格模式下，抛出 ReferenceError 错误\n}\n\nfoo();\nconsole.log(x); // 1`, `58729043082251930000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 在严格模式下，抛出 ReferenceError 错误</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当一个变量已经声明，但没有赋值时，该变量的值是<code class="language-text">undefined</code>。如果一个函数的执行结果被赋值给一个变量，但是这个函数却没有返回任何值，那么该变量的值是<code class="language-text">undefined</code>。要检查它，需要使用严格相等（<code class="language-text">===</code>）；或者使用<code class="language-text">typeof</code>，它会返回<code class="language-text">&#39;undefined&#39;</code>字符串。请注意，不能使用非严格相等（<code class="language-text">==</code>）来检查，因为如果变量值为<code class="language-text">null</code>，使用非严格相等也会返回<code class="language-text">true</code>。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50239279083569840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === \'undefined\'); // true\n\nconsole.log(foo == null); // true. 错误，不要使用非严格相等！\n\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined`, `50239279083569840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> foo<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true. 错误，不要使用非严格相等！</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">null</code>只能被显式赋值给变量。它表示<code class="language-text">空值</code>，与被显式赋值 <code class="language-text">undefined</code> 的意义不同。要检查判断<code class="language-text">null</code>值，需要使用严格相等运算符。请注意，和前面一样，不能使用非严格相等（<code class="language-text">==</code>）来检查，因为如果变量值为<code class="language-text">undefined</code>，使用非严格相等也会返回<code class="language-text">true</code>。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98142933236887290000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var foo = null;\nconsole.log(foo === null); // true\n\nconsole.log(foo == undefined); // true. 错误，不要使用非严格相等！`, `98142933236887290000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true. 错误，不要使用非严格相等！</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>作为一种个人习惯，我从不使用未声明变量。如果定义了暂时没有用到的变量，我会在声明后明确地给它们赋值为<code class="language-text">null</code>。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables</a></li>\n<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined</a></li>\n</ul>\n<h2 id="什么是闭包（closure），为什么使用闭包？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85%EF%BC%88closure%EF%BC%89%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是闭包（closure），为什么使用闭包？</h2>\n<p>闭包是函数和声明该函数的词法环境的组合。词法作用域中使用的域，是变量在代码中声明的位置所决定的。闭包是即使被外部函数返回，依然可以访问到外部（封闭）函数作用域的函数。</p>\n<p><strong>为什么使用闭包？</strong></p>\n<ul>\n<li>利用闭包实现数据私有化或模拟私有方法。这个方式也称为<a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript" target="_blank" rel="nofollow noreferrer noopener">模块模式（module pattern）</a>。</li>\n<li><a href="https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x" target="_blank" rel="nofollow noreferrer noopener">部分参数函数（partial applications）柯里化（currying）</a>.</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></li>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36" target="_blank" rel="nofollow noreferrer noopener">https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36</a></li>\n</ul>\n<h2 id="请说明foreach-循环和map循环的主要区别，它们分别在什么情况下使用？"><a href="#%E8%AF%B7%E8%AF%B4%E6%98%8Eforeach-%E5%BE%AA%E7%8E%AF%E5%92%8Cmap%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%AE%83%E4%BB%AC%E5%88%86%E5%88%AB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BD%BF%E7%94%A8%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请说明.forEach 循环和.map()循环的主要区别，它们分别在什么情况下使用？</h2>\n<p>为了理解两者的区别，我们看看它们分别是做什么的。</p>\n<p><strong><code class="language-text">forEach</code></strong></p>\n<ul>\n<li>遍历数组中的元素。</li>\n<li>为每个元素执行回调。</li>\n<li>无返回值。</li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="50268340054377636000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const a = [1, 2, 3];\nconst doubled = a.forEach((num, index) => {\n  // 执行与 num、index 相关的代码\n});\n\n// doubled = undefined`, `50268340054377636000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> doubled <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 执行与 num、index 相关的代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// doubled = undefined</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong><code class="language-text">map</code></strong></p>\n<ul>\n<li>遍历数组中的元素</li>\n<li>通过对每个元素调用函数，将每个元素“映射（map）”到一个新元素，从而创建一个新数组。</li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71417090755576560000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const a = [1, 2, 3];\nconst doubled = a.map((num) => {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]`, `71417090755576560000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> doubled <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// doubled = [2, 4, 6]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">.forEach</code>和<code class="language-text">.map()</code>的主要区别在于<code class="language-text">.map()</code>返回一个新的数组。如果你想得到一个结果，但不想改变原始数组，用<code class="language-text">.map()</code>。如果你只需要在数组上做迭代修改，用<code class="language-text">forEach</code>。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://codeburst.io/javascript-map-vs-foreach-f38111822c0f" target="_blank" rel="nofollow noreferrer noopener">https://codeburst.io/javascript-map-vs-foreach-f38111822c0f</a></li>\n</ul>\n<h2 id="匿名函数的典型应用场景是什么？"><a href="#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>匿名函数的典型应用场景是什么？</h2>\n<p>匿名函数可以在 IIFE 中使用，来封装局部作用域内的代码，以便其声明的变量不会暴露到全局作用域。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="27267252818880426000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`(function() {\n  // 一些代码。\n})();`, `27267252818880426000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 一些代码。</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>匿名函数可以作为只用一次，不需要在其他地方使用的回调函数。当处理函数在调用它们的程序内部被定义时，代码具有更好地自闭性和可读性，可以省去寻找该处理函数的函数体位置的麻烦。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="42491643683573170"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`setTimeout(function() {\n  console.log(\'Hello world!\');\n}, 1000);`, `42491643683573170`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello world!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>匿名函数可以用于函数式编程或 Lodash（类似于回调函数）。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53893592485680685000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const arr = [1, 2, 3];\nconst double = arr.map(function(el) {\n  return el * 2;\n});\nconsole.log(double); // [2, 4, 6]`, `53893592485680685000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> double <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> el <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.quora.com/What-is-a-typical-usecase-for-anonymous-functions" target="_blank" rel="nofollow noreferrer noopener">https://www.quora.com/What-is-a-typical-usecase-for-anonymous-functions</a></li>\n<li><a href="https://stackoverflow.com/questions/10273185/what-are-the-benefits-to-using-anonymous-functions-instead-of-named-functions-fo" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/10273185/what-are-the-benefits-to-using-anonymous-functions-instead-of-named-functions-fo</a></li>\n</ul>\n<h2 id="你如何组织自己的代码？（使用模块模式（module-pattern）还是经典继承（classical-inheritance）？）"><a href="#%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%9F%EF%BC%88%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%BC%8F%EF%BC%88module-pattern%EF%BC%89%E8%BF%98%E6%98%AF%E7%BB%8F%E5%85%B8%E7%BB%A7%E6%89%BF%EF%BC%88classical-inheritance%EF%BC%89%EF%BC%9F%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你如何组织自己的代码？（使用模块模式（module pattern）还是经典继承（classical inheritance）？）</h2>\n<p>我以前使用 Backbone 组织我的模型（model），Backbone 鼓励采用面向对象的方法——创建 Backbone 模型，并为其添加方法。</p>\n<p>模块模式仍然是很好的方式，但是现在我使用基于 React/Redux 的 Flux 体系结构，它鼓励使用单向函数编程的方法。我用普通对象（plain object）表示我的 app 模型，编写实用纯函数去操作这些对象。使用动作（actions）和化简器（reducers）来处理状态，就像其他 Redux 应用一样。</p>\n<p>我尽可能避免使用经典继承。如果非要这么做，我会坚持<a href="https://medium.com/@dan_abramov/how-to-use-classes-and-sleep-at-night-9af8de78ccb4" target="_blank" rel="nofollow noreferrer noopener">这些原则</a>。</p>\n<h2 id="宿主对象（host-objects）和原生对象（native-objects）的区别是什么？"><a href="#%E5%AE%BF%E4%B8%BB%E5%AF%B9%E8%B1%A1%EF%BC%88host-objects%EF%BC%89%E5%92%8C%E5%8E%9F%E7%94%9F%E5%AF%B9%E8%B1%A1%EF%BC%88native-objects%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>宿主对象（host objects）和原生对象（native objects）的区别是什么？</h2>\n<p>原生对象是由 ECMAScript 规范定义的 JavaScript 内置对象，比如<code class="language-text">String</code>、<code class="language-text">Math</code>、<code class="language-text">RegExp</code>、<code class="language-text">Object</code>、<code class="language-text">Function</code>等等。</p>\n<p>宿主对象是由运行时环境（浏览器或 Node）提供，比如<code class="language-text">window</code>、<code class="language-text">XMLHTTPRequest</code>等等。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects</a></li>\n</ul>\n<h2 id="下列语句有什么区别：function-person、var-person--person和-var-person--new-person？"><a href="#%E4%B8%8B%E5%88%97%E8%AF%AD%E5%8F%A5%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9Afunction-person%E3%80%81var-person--person%E5%92%8C-var-person--new-person%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>下列语句有什么区别：function Person(){}、var person = Person()和 var person = new Person()？</h2>\n<p>这个问题问得很含糊。我猜这是在考察 JavaScript 中的构造函数（constructor）。从技术上讲，<code class="language-text">function Person(){}</code>只是一个普通的函数声明。使用 PascalCase 方式命名函数作为构造函数，是一个惯例。</p>\n<p><code class="language-text">var person = Person()</code>将<code class="language-text">Person</code>以普通函数调用，而不是构造函数。如果该函数是用作构造函数的，那么这种调用方式是一种常见错误。通常情况下，构造函数不会返回任何东西，因此，像普通函数一样调用构造函数，只会返回<code class="language-text">undefined</code>赋给用作实例的变量。</p>\n<p><code class="language-text">var person = new Person()</code>使用<code class="language-text">new</code>操作符，创建<code class="language-text">Person</code>对象的实例，该实例继承自<code class="language-text">Person.prototype</code>。另外一种方式是使用<code class="language-text">Object.create</code>，例如：Object.create(Person.prototype)`。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90046365353647460000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function Person(name) {\n  this.name = name;\n}\n\nvar person = Person(\'John\');\nconsole.log(person); // undefined\nconsole.log(person.name); // Uncaught TypeError: Cannot read property \'name\' of undefined\n\nvar person = new Person(\'John\');\nconsole.log(person); // Person { name: &quot;John&quot; }\nconsole.log(person.name); // &quot;john&quot;`, `90046365353647460000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">\'John\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Cannot read property \'name\' of undefined</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">\'John\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person { name: "John" }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "john"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new</a></li>\n</ul>\n<h2 id="call-和apply-有什么区别？"><a href="#call-%E5%92%8Capply-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>.call 和.apply 有什么区别？</h2>\n<p><code class="language-text">.call</code>和<code class="language-text">.apply</code>都用于调用函数，第一个参数将用作函数内 this 的值。然而，<code class="language-text">.call</code>接受逗号分隔的参数作为后面的参数，而<code class="language-text">.apply</code>接受一个参数数组作为后面的参数。一个简单的记忆方法是，从<code class="language-text">call</code>中的 C 联想到逗号分隔（comma-separated），从<code class="language-text">apply</code>中的 A 联想到数组（array）。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52466262477250100000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add.call(null, 1, 2)); // 3\nconsole.log(add.apply(null, [1, 2])); // 3`, `52466262477250100000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="请说明-functionprototypebind-的用法。"><a href="#%E8%AF%B7%E8%AF%B4%E6%98%8E-functionprototypebind-%E7%9A%84%E7%94%A8%E6%B3%95%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请说明 Function.prototype.bind 的用法。</h2>\n<p>摘自<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="nofollow noreferrer noopener">MDN</a>：</p>\n<blockquote>\n<p><code class="language-text">bind()</code>方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p>\n</blockquote>\n<p>根据我的经验，将<code class="language-text">this</code>的值绑定到想要传递给其他函数的类的方法中是非常有用的。在 React 组件中经常这样做。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind</a></li>\n</ul>\n<h2 id="什么时候会用到-documentwrite？"><a href="#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E7%94%A8%E5%88%B0-documentwrite%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么时候会用到 document.write()？</h2>\n<p><code class="language-text">document.write()</code>用来将一串文本写入由<code class="language-text">document.open()</code>打开的文档流中。当页面加载后执行<code class="language-text">document.write()</code>时，它将调用<code class="language-text">document.open</code>，会清除整个文档（<code class="language-text">&lt;head&gt;</code>和<code class="language-text">&lt;body&gt;</code>会被移除！），并将文档内容替换成给定的字符串参数。因此它通常被认为是危险的并且容易被误用。</p>\n<p>网上有一些答案，解释了<code class="language-text">document.write()</code>被用于分析代码中，或者<a href="https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html" target="_blank" rel="nofollow noreferrer noopener">当你想包含只有在启用了 JavaScript 的情况下才能工作的样式</a>。它甚至在 HTML5 样板代码中用于<a href="https://github.com/paulirish/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag" target="_blank" rel="nofollow noreferrer noopener">并行加载脚本并保持执行顺序</a>！但是，我怀疑这些使用原因是过时的，现在可以在不使用<code class="language-text">document.write()</code>的情况下实现。如果我的观点有错，请纠正我。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html" target="_blank" rel="nofollow noreferrer noopener">https://www.quirksmode.org/blog/archives/2005/06/three<em>javascrip</em>1.html</a></li>\n<li><a href="https://github.com/h5bp/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag" target="_blank" rel="nofollow noreferrer noopener">https://github.com/h5bp/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag</a></li>\n</ul>\n<h2 id="功能检测（feature-detection）、功能推断（feature-inference）和使用-ua-字符串之间有什么区别？"><a href="#%E5%8A%9F%E8%83%BD%E6%A3%80%E6%B5%8B%EF%BC%88feature-detection%EF%BC%89%E3%80%81%E5%8A%9F%E8%83%BD%E6%8E%A8%E6%96%AD%EF%BC%88feature-inference%EF%BC%89%E5%92%8C%E4%BD%BF%E7%94%A8-ua-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>功能检测（feature detection）、功能推断（feature inference）和使用 UA 字符串之间有什么区别？</h2>\n<p><strong>功能检测（feature detection）</strong></p>\n<p>功能检测包括确定浏览器是否支持某段代码，以及是否运行不同的代码（取决于它是否执行），以便浏览器始终能够正常运行代码功能，而不会在某些浏览器中出现崩溃和错误。例如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25955180647872790000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (\'geolocation\' in navigator) {\n  // 可以使用 navigator.geolocation\n} else {\n  // 处理 navigator.geolocation 功能缺失\n}`, `25955180647872790000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'geolocation\'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 可以使用 navigator.geolocation</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 处理 navigator.geolocation 功能缺失</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href="https://modernizr.com/" target="_blank" rel="nofollow noreferrer noopener">Modernizr</a>是处理功能检测的优秀工具。</p>\n<p><strong>功能推断（feature inference）</strong></p>\n<p>功能推断与功能检测一样，会对功能可用性进行检查，但是在判断通过后，还会使用其他功能，因为它假设其他功能也可用，例如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43858841867353630000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (document.getElementsByTagName) {\n  element = document.getElementById(id);\n}`, `43858841867353630000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>非常不推荐这种方式。功能检测更能保证万无一失。</p>\n<p><strong>UA 字符串</strong></p>\n<p>这是一个浏览器报告的字符串，它允许网络协议对等方（network protocol peers）识别请求用户代理的应用类型、操作系统、应用供应商和应用版本。它可以通过<code class="language-text">navigator.userAgent</code>访问。 然而，这个字符串很难解析并且很可能存在欺骗性。例如，Chrome 会同时作为 Chrome 和 Safari 进行报告。因此，要检测 Safari，除了检查 Safari 字符串，还要检查是否存在 Chrome 字符串。不要使用这种方式。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Learn/Tools<em>and</em>testing/Cross<em>browser</em>testing/Feature_detection</a></li>\n<li><a href="https://stackoverflow.com/questions/20104930/whats-the-difference-between-feature-detection-feature-inference-and-using-th" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/20104930/whats-the-difference-between-feature-detection-feature-inference-and-using-th</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser<em>detection</em>using<em>the</em>user_agent</a></li>\n</ul>\n<h2 id="请尽可能详细地解释-ajax。"><a href="#%E8%AF%B7%E5%B0%BD%E5%8F%AF%E8%83%BD%E8%AF%A6%E7%BB%86%E5%9C%B0%E8%A7%A3%E9%87%8A-ajax%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请尽可能详细地解释 Ajax。</h2>\n<p>Ajax（asynchronous JavaScript and XML）是使用客户端上的许多 Web 技术，创建异步 Web 应用的一种 Web 开发技术。借助 Ajax，Web 应用可以异步（在后台）向服务器发送数据和从服务器检索数据，而不会干扰现有页面的显示和行为。通过将数据交换层与表示层分离，Ajax 允许网页和扩展 Web 应用程序动态更改内容，而无需重新加载整个页面。实际上，现在通常将 JSON 替换为 XML，因为 JavaScript 对 JSON 有原生支持优势。</p>\n<p><code class="language-text">XMLHttpRequest</code> API 经常用于异步通信。此外还有最近流行的<code class="language-text">fetch</code> API。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://en.wikipedia.org/wiki/Ajax_(programming)" target="_blank" rel="nofollow noreferrer noopener">https://en.wikipedia.org/wiki/Ajax_(programming)</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/AJAX" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/AJAX</a></li>\n</ul>\n<h2 id="使用-ajax-的优缺点分别是什么？"><a href="#%E4%BD%BF%E7%94%A8-ajax-%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 Ajax 的优缺点分别是什么？</h2>\n<p><strong>优点</strong></p>\n<ul>\n<li>交互性更好。来自服务器的新内容可以动态更改，无需重新加载整个页面。</li>\n<li>减少与服务器的连接，因为脚本和样式只需要被请求一次。</li>\n<li>状态可以维护在一个页面上。JavaScript 变量和 DOM 状态将得到保持，因为主容器页面未被重新加载。</li>\n<li>基本上包括大部分 SPA 的优点。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>动态网页很难收藏。</li>\n<li>如果 JavaScript 已在浏览器中被禁用，则不起作用。</li>\n<li>有些网络爬虫不执行 JavaScript，也不会看到 JavaScript 加载的内容。</li>\n<li>基本上包括大部分 SPA 的缺点。</li>\n</ul>\n<h2 id="请说明-jsonp-的工作原理，它为什么不是真正的-ajax？"><a href="#%E8%AF%B7%E8%AF%B4%E6%98%8E-jsonp-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%8C%E5%AE%83%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84-ajax%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请说明 JSONP 的工作原理，它为什么不是真正的 Ajax？</h2>\n<p>JSONP（带填充的 JSON）是一种通常用于绕过 Web 浏览器中的跨域限制的方法，因为 Ajax 不允许跨域请求。</p>\n<p>JSONP 通过<code class="language-text">&lt;script&gt;</code>标签发送跨域请求，通常使用<code class="language-text">callback</code>查询参数，例如：<code class="language-text">https://example.com?callback=printData</code>。 然后服务器将数据包装在一个名为<code class="language-text">printData</code>的函数中并将其返回给客户端。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36942389062004556000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<!-- https://mydomain.com -->\n<script>\n  function printData(data) {\n    console.log(\\`My name is \\${data.name}!\\`);\n  }\n</script>\n\n<script src=&quot;https://example.com?callback=printData&quot;></script>`, `36942389062004556000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token comment">&lt;!-- https://mydomain.com --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">function</span> <span class="token function">printData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://example.com?callback=printData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="24803390528488014000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 文件加载自 https://example.com?callback=printData\nprintData({ name: \'Yang Shun\' });`, `24803390528488014000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 文件加载自 https://example.com?callback=printData</span>\n<span class="token function">printData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'Yang Shun\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>客户端必须在其全局范围内具有<code class="language-text">printData</code>函数，并且在收到来自跨域的响应时，该函数将由客户端执行。</p>\n<p>JSONP 可能具有一些安全隐患。由于 JSONP 是纯 JavaScript 实现，它可以完成 JavaScript 所能做的一切，因此需要信任 JSONP 数据的提供者。</p>\n<p>现如今，<a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="nofollow noreferrer noopener">跨来源资源共享（CORS）</a> 是推荐的主流方式，JSONP 已被视为一种比较 hack 的方式。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/a/2067584/1751946" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/a/2067584/1751946</a></li>\n</ul>\n<h2 id="你使用过-javascript-模板吗？用过什么相关的库？"><a href="#%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87-javascript-%E6%A8%A1%E6%9D%BF%E5%90%97%EF%BC%9F%E7%94%A8%E8%BF%87%E4%BB%80%E4%B9%88%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你使用过 JavaScript 模板吗？用过什么相关的库？</h2>\n<p>使用过。Handlebars、Underscore、Lodash、AngularJS 和 JSX。我不喜欢 AngularJS 中的模板，因为它在指令中大量使用了字符串，并且书写错误会被忽略。JSX 是我的新宠，因为它更接近 JavaScript，几乎没有什么学习成本。现在，可以使用 ES2015 模板字符串快速创建模板，而不需依赖第三方代码。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="23353077824936250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const template = \\`<div>My name is: \\${name}</div>\\`;`, `23353077824936250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>My name is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>但是，请注意上述方法中可能存在的 XSS，因为内容不会被转义，与模板库不同。</p>\n<h2 id="请解释变量提升（hosting）。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%EF%BC%88hosting%EF%BC%89%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释变量提升（hosting）。</h2>\n<p>变量提升（hoisting）是用于解释代码中变量声明行为的术语。使用<code class="language-text">var</code>关键字声明或初始化的变量，会将声明语句“提升”到当前作用域的顶部。 但是，只有声明才会触发提升，赋值语句（如果有的话）将保持原样。我们用几个例子来解释一下。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29551855284908536000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 用 var 声明得到提升\nconsole.log(foo); // undefined\nvar foo = 1;\nconsole.log(foo); // 1\n\n// 用 let/const 声明不会提升\nconsole.log(bar); // ReferenceError: bar is not defined\nlet bar = 2;\nconsole.log(bar); // 2`, `29551855284908536000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 用 var 声明得到提升</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// 用 let/const 声明不会提升</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: bar is not defined</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>函数声明会使函数体提升，但函数表达式（以声明变量的形式书写）只有变量声明会被提升。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="91763790949615480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 函数声明\nconsole.log(foo); // [Function: foo]\nfoo(); // \'FOOOOO\'\nfunction foo() {\n  console.log(\'FOOOOO\');\n}\nconsole.log(foo); // [Function: foo]\n\n// 函数表达式\nconsole.log(bar); // undefined\nbar(); // Uncaught TypeError: bar is not a function\nvar bar = function() {\n  console.log(\'BARRRR\');\n};\nconsole.log(bar); // [Function: bar]`, `91763790949615480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 函数声明</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: foo]</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'FOOOOO\'</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'FOOOOO\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: foo]</span>\n\n<span class="token comment">// 函数表达式</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: bar is not a function</span>\n<span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'BARRRR\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: bar]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="请描述事件冒泡。"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述事件冒泡。</h2>\n<p>当一个事件在 DOM 元素上触发时，如果有事件监听器，它将尝试处理该事件，然后事件冒泡到其父级元素，并发生同样的事情。最后直到事件到达祖先元素。事件冒泡是实现事件委托的原理（event delegation）。</p>\n<h2 id="attribute-和-property-之间有什么区别？"><a href="#attribute-%E5%92%8C-property-%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>attribute 和 property 之间有什么区别？</h2>\n<p>“Attribute” 是在 HTML 中定义的，而 “property” 是在 DOM 上定义的。为了说明区别，假设我们在 HTML 中有一个文本框：<code class="language-text">&lt;input type=&quot;text&quot; value=&quot;Hello&quot;&gt;</code>。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="26850493333273140000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const input = document.querySelector(\'input\');\nconsole.log(input.getAttribute(\'value\')); // Hello\nconsole.log(input.value); // Hello`, `26850493333273140000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>但是在文本框中键入“ World!”后:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97918812982476440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`console.log(input.getAttribute(\'value\')); // Hello\nconsole.log(input.value); // Hello World!`, `97918812982476440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'value\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World!</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html</a></li>\n</ul>\n<h2 id="为什么扩展-javascript-内置对象是不好的做法？"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%89%A9%E5%B1%95-javascript-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%B8%8D%E5%A5%BD%E7%9A%84%E5%81%9A%E6%B3%95%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么扩展 JavaScript 内置对象是不好的做法？</h2>\n<p>扩展 JavaScript 内置（原生）对象意味着将属性或方法添加到其<code class="language-text">prototype</code>中。虽然听起来很不错，但事实上这样做很危险。想象一下，你的代码使用了一些库，它们通过添加相同的 contains 方法来扩展<code class="language-text">Array.prototype</code>，如果这两个方法的行为不相同，那么这些实现将会相互覆盖，你的代码将不能正常运行。</p>\n<p>扩展内置对象的唯一使用场景是创建 polyfill，本质上为老版本浏览器缺失的方法提供自己的实现，该方法是由 JavaScript 规范定义的。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="http://lucybain.com/blog/2014/js-extending-built-in-objects/" target="_blank" rel="nofollow noreferrer noopener">http://lucybain.com/blog/2014/js-extending-built-in-objects/</a></li>\n</ul>\n<h2 id="document-中的-load-事件和-domcontentloaded-事件之间的区别是什么？"><a href="#document-%E4%B8%AD%E7%9A%84-load-%E4%BA%8B%E4%BB%B6%E5%92%8C-domcontentloaded-%E4%BA%8B%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>document 中的 load 事件和 DOMContentLoaded 事件之间的区别是什么？</h2>\n<p>当初始的 HTML 文档被完全加载和解析完成之后，<code class="language-text">DOMContentLoaded</code>事件被触发，而无需等待样式表、图像和子框架的完成加载。</p>\n<p><code class="language-text">window</code>的<code class="language-text">load</code>事件仅在 DOM 和所有相关资源全部完成加载后才会触发。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/Events/load" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/Events/load</a></li>\n</ul>\n<h2 id="-和--的区别是什么？"><a href="#-%E5%92%8C--%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>== 和 === 的区别是什么？</h2>\n<p><code class="language-text">==</code>是抽象相等运算符，而<code class="language-text">===</code>是严格相等运算符。<code class="language-text">==</code>运算符是在进行必要的类型转换后，再比较。<code class="language-text">===</code>运算符不会进行类型转换，所以如果两个值不是相同的类型，会直接返回<code class="language-text">false</code>。使用<code class="language-text">==</code>时，可能发生一些特别的事情，例如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71126639789497580000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`1 == \'1\'; // true\n1 == [1]; // true\n1 == true; // true\n0 == \'\'; // true\n0 == \'0\'; // true\n0 == false; // true`, `71126639789497580000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">\'1\'</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">\'\'</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">\'0\'</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我的建议是从不使用<code class="language-text">==</code>运算符，除了方便与<code class="language-text">null</code>或<code class="language-text">undefined</code>比较时，<code class="language-text">a == null</code>如果<code class="language-text">a</code>为<code class="language-text">null</code>或<code class="language-text">undefined</code>将返回<code class="language-text">true</code>。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77021412984910970000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true`, `77021412984910970000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons</a></li>\n</ul>\n<h2 id="请解释关于-javascript-的同源策略。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%85%B3%E4%BA%8E-javascript-%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释关于 JavaScript 的同源策略。</h2>\n<p>同源策略可防止 JavaScript 发起跨域请求。源被定义为 URI、主机名和端口号的组合。此策略可防止页面上的恶意脚本通过该页面的文档对象模型，访问另一个网页上的敏感数据。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="nofollow noreferrer noopener">https://en.wikipedia.org/wiki/Same-origin_policy</a></li>\n</ul>\n<h2 id="请使下面的语句生效："><a href="#%E8%AF%B7%E4%BD%BF%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%AF%AD%E5%8F%A5%E7%94%9F%E6%95%88%EF%BC%9A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请使下面的语句生效：</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60469038235060494000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`duplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]`, `60469038235060494000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5,1,2,3,4,5]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74116088308565670000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function duplicate(arr) {\n  return arr.concat(arr);\n}\n\nduplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]`, `74116088308565670000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5,1,2,3,4,5]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="请说明三元表达式中三元这个词代表什么？"><a href="#%E8%AF%B7%E8%AF%B4%E6%98%8E%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E4%B8%89%E5%85%83%E8%BF%99%E4%B8%AA%E8%AF%8D%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请说明三元表达式中“三元”这个词代表什么？</h2>\n<p>“三元”表示接受三个操作数：判断条件，<code class="language-text">then</code>表达式和<code class="language-text">else</code>表达式。三元表达式不是 JavaScript 特有的，我不知道这个问题为什么会出现在这里。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator</a></li>\n</ul>\n<h2 id="什么是use-strict？使用它有什么优缺点？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AFuse-strict%EF%BC%9F%E4%BD%BF%E7%94%A8%E5%AE%83%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是”use strict”;？使用它有什么优缺点？</h2>\n<p>‘use strict’ 是用于对整个脚本或单个函数启用严格模式的语句。严格模式是可选择的一个限制 JavaScript 的变体一种方式 。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>无法再意外创建全局变量。</li>\n<li>会使引起静默失败（silently fail，即：不报错也没有任何效果）的赋值操抛出异常。</li>\n<li>试图删除不可删除的属性时会抛出异常（之前这种操作不会产生任何效果）。</li>\n<li>要求函数的参数名唯一。</li>\n<li>全局作用域下，<code class="language-text">this</code>的值为<code class="language-text">undefined</code>。</li>\n<li>捕获了一些常见的编码错误，并抛出异常。</li>\n<li>禁用令人困惑或欠佳的功能。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>缺失许多开发人员已经习惯的功能。</li>\n<li>无法访问<code class="language-text">function.caller</code>和<code class="language-text">function.arguments</code>。</li>\n<li>以不同严格模式编写的脚本合并后可能导致问题。</li>\n</ul>\n<p>总的来说，我认为利大于弊，我从来不使用严格模式禁用的功能，因此我推荐使用严格模式。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="http://2ality.com/2011/10/strict-mode-hatred.html" target="_blank" rel="nofollow noreferrer noopener">http://2ality.com/2011/10/strict-mode-hatred.html</a></li>\n<li><a href="http://lucybain.com/blog/2014/js-use-strict/" target="_blank" rel="nofollow noreferrer noopener">http://lucybain.com/blog/2014/js-use-strict/</a></li>\n</ul>\n<h2 id="创建一个循环，从-1-迭代到-100，3-的倍数时输出-fizz，5-的倍数时输出-buzz，同时为-3-和-5-的倍数时输出-fizzbuzz。"><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BE%AA%E7%8E%AF%EF%BC%8C%E4%BB%8E-1-%E8%BF%AD%E4%BB%A3%E5%88%B0-100%EF%BC%8C3-%E7%9A%84%E5%80%8D%E6%95%B0%E6%97%B6%E8%BE%93%E5%87%BA-fizz%EF%BC%8C5-%E7%9A%84%E5%80%8D%E6%95%B0%E6%97%B6%E8%BE%93%E5%87%BA-buzz%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B8%BA-3-%E5%92%8C-5-%E7%9A%84%E5%80%8D%E6%95%B0%E6%97%B6%E8%BE%93%E5%87%BA-fizzbuzz%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建一个循环，从 1 迭代到 100，3 的倍数时输出 “fizz”，5 的倍数时输出 “buzz”，同时为 3 和 5 的倍数时输出 “fizzbuzz”。</h2>\n<p>来自 <a href="https://gist.github.com/jaysonrowe/1592432#gistcomment-790724" target="_blank" rel="nofollow noreferrer noopener">Paul Irish</a>的 FizzBuzz。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25170104297692066000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`for (let i = 1; i <= 100; i++) {\n  let f = i % 3 == 0,\n    b = i % 5 == 0;\n  console.log(f ? (b ? \'FizzBuzz\' : \'Fizz\') : b ? \'Buzz\' : i);\n}`, `25170104297692066000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> f <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    b <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f <span class="token operator">?</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token string">\'FizzBuzz\'</span> <span class="token punctuation">:</span> <span class="token string">\'Fizz\'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> b <span class="token operator">?</span> <span class="token string">\'Buzz\'</span> <span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我不建议你在面试时写上面的代码。只要写得清晰即可。关于更多千奇百怪的 FizzBuzz 实现，请查看下面的参考链接。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://gist.github.com/jaysonrowe/1592432" target="_blank" rel="nofollow noreferrer noopener">https://gist.github.com/jaysonrowe/1592432</a></li>\n</ul>\n<h2 id="为什么不要使用全局作用域？"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么不要使用全局作用域？</h2>\n<p>每个脚本都可以访问全局作用域，如果人人都使用全局命名空间来定义自己的变量，肯定会发生冲突。使用模块模式（IIFE）将变量封装在本地命名空间中。</p>\n<h2 id="为什么要使用-load-事件？这个事件有什么缺点吗？你知道一些代替方案吗，为什么使用它们？"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-load-%E4%BA%8B%E4%BB%B6%EF%BC%9F%E8%BF%99%E4%B8%AA%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BB%80%E4%B9%88%E7%BC%BA%E7%82%B9%E5%90%97%EF%BC%9F%E4%BD%A0%E7%9F%A5%E9%81%93%E4%B8%80%E4%BA%9B%E4%BB%A3%E6%9B%BF%E6%96%B9%E6%A1%88%E5%90%97%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%AE%83%E4%BB%AC%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么要使用 load 事件？这个事件有什么缺点吗？你知道一些代替方案吗，为什么使用它们？</h2>\n<p>在文档装载完成后会触发<code class="language-text">load</code>事件。此时，在文档中的所有对象都在 DOM 中，所有图像、脚本、链接和子框架都完成了加载。</p>\n<p>DOM 事件<code class="language-text">DOMContentLoaded</code>将在页面的 DOM 构建完成后触发，但不要等待其他资源完成加载。如果在初始化之前不需要装入整个页面，这个事件是使用首选。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload</a></li>\n</ul>\n<h2 id="请解释单页应用是什么，如何使其对-seo-友好。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E5%85%B6%E5%AF%B9-seo-%E5%8F%8B%E5%A5%BD%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释单页应用是什么，如何使其对 SEO 友好。</h2>\n<p>以下摘自 <a href="https://github.com/grab/front-end-guide" target="_blank" rel="nofollow noreferrer noopener">Grab Front End Guide</a>，碰巧的是，这正是我自己写的！</p>\n<p>现如今，Web 开发人员将他们构建的产品称为 Web 应用，而不是网站。虽然这两个术语之间没有严格的区别，但网络应用往往具有高度的交互性和动态性，允许用户执行操作并接收他们的操作响应。在过去，浏览器从服务器接收 HTML 并渲染。当用户导航到其它 URL 时，需要整页刷新，服务器会为新页面发送新的 HTML。这被称为服务器端渲染。</p>\n<p>然而，在现代的 SPA 中，客户端渲染取而代之。浏览器从服务器加载初始页面、整个应用程序所需的脚本（框架、库、应用代码）和样式表。当用户导航到其他页面时，不会触发页面刷新。该页面的 URL 通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="nofollow noreferrer noopener">HTML5 History API</a> 进行更新。浏览器通过 <a href="https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started" target="_blank" rel="nofollow noreferrer noopener">AJAX</a> 请求向服务器检索新页面所需的数据（通常采用 JSON 格式）。然后，SPA 通过 JavaScript 来动态更新页面，这些 JavaScript 在初始页面加载时已经下载。这种模式类似于原生移动应用的工作方式。</p>\n<p><strong>好处：</strong></p>\n<ul>\n<li>用户感知响应更快，用户切换页面时，不再看到因页面刷新而导致的白屏。</li>\n<li>对服务器进行的 HTTP 请求减少，因为对于每个页面加载，不必再次下载相同的资源。</li>\n<li>客户端和服务器之间的关注点分离。可以为不同平台（例如手机、聊天机器人、智能手表）建立新的客户端，而无需修改服务器代码。只要 API 没有修改，可以单独修改客户端和服务器上的代码。</li>\n</ul>\n<p><strong>坏处：</strong></p>\n<ul>\n<li>由于加载了多个页面所需的框架、应用代码和资源，导致初始页面加载时间较长。</li>\n<li>服务器还需要进行额外的工作，需要将所有请求路由配置到单个入口点，然后由客户端接管路由。</li>\n<li>SPA 依赖于 JavaScript 来呈现内容，但并非所有搜索引擎都在抓取过程中执行 JavaScript，他们可能会在你的页面上看到空的内容。这无意中损害了应用的搜索引擎优化（SEO）。然而，当你构建应用时，大多数情况下，搜索引擎优化并不是最重要的因素，因为并非所有内容都需要通过搜索引擎进行索引。为了解决这个问题，可以在服务器端渲染你的应用，或者使用诸如 <a href="https://prerender.io/" target="_blank" rel="nofollow noreferrer noopener">Prerender</a> 的服务来“在浏览器中呈现你的 javascript，保存静态 HTML，并将其返回给爬虫”。</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://github.com/grab/front-end-guide#single-page-apps-spas" target="_blank" rel="nofollow noreferrer noopener">https://github.com/grab/front-end-guide#single-page-apps-spas</a></li>\n<li><a href="http://stackoverflow.com/questions/21862054/single-page-app-advantages-and-disadvantages" target="_blank" rel="nofollow noreferrer noopener">http://stackoverflow.com/questions/21862054/single-page-app-advantages-and-disadvantages</a></li>\n<li><a href="http://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/" target="_blank" rel="nofollow noreferrer noopener">http://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/</a></li>\n<li><a href="https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52" target="_blank" rel="nofollow noreferrer noopener">https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52</a></li>\n</ul>\n<h2 id="你对-promises-及其-polyfill-的掌握程度如何？"><a href="#%E4%BD%A0%E5%AF%B9-promises-%E5%8F%8A%E5%85%B6-polyfill-%E7%9A%84%E6%8E%8C%E6%8F%A1%E7%A8%8B%E5%BA%A6%E5%A6%82%E4%BD%95%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你对 Promises 及其 polyfill 的掌握程度如何？</h2>\n<p>掌握它的工作原理。<code class="language-text">Promise</code>是一个可能在未来某个时间产生结果的对象：操作成功的结果或失败的原因（例如发生网络错误）。 <code class="language-text">Promise</code>可能处于以下三种状态之一：fulfilled、rejected 或 pending。 用户可以对<code class="language-text">Promise</code>添加回调函数来处理操作成功的结果或失败的原因。</p>\n<p>一些常见的 polyfill 是<code class="language-text">$.deferred</code>、Q 和 Bluebird，但不是所有的 polyfill 都符合规范。ES2015 支持 Promises，现在通常不需要使用 polyfills。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261" target="_blank" rel="nofollow noreferrer noopener">https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261</a></li>\n</ul>\n<h2 id="promise-代替回调函数有什么优缺点？"><a href="#promise-%E4%BB%A3%E6%9B%BF%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Promise 代替回调函数有什么优缺点？</h2>\n<p><strong>优点：</strong></p>\n<ul>\n<li>避免可读性极差的回调地狱。</li>\n<li>使用<code class="language-text">.then()</code>编写的顺序异步代码，既简单又易读。</li>\n<li>使用<code class="language-text">Promise.all()</code>编写并行异步代码变得很容易。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>轻微地增加了代码的复杂度（这点存在争议）。</li>\n<li>在不支持 ES2015 的旧版浏览器中，需要引入 polyfill 才能使用。</li>\n</ul>\n<h2 id="用转译成-javascript-的语言写-javascript-有什么优缺点？"><a href="#%E7%94%A8%E8%BD%AC%E8%AF%91%E6%88%90-javascript-%E7%9A%84%E8%AF%AD%E8%A8%80%E5%86%99-javascript-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用转译成 JavaScript 的语言写 JavaScript 有什么优缺点？</h2>\n<p>Some examples of languages that compile to JavaScript include CoffeeScript, Elm, ClojureScript, PureScript and TypeScript. 这些是转译成 JavaScript 的语言，包括 CoffeeScript、Elm、ClojureScript、PureScript 和 TypeScript。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>修复了 JavaScript 中的一些长期问题，并摒弃了 JavaScript 不好的做法。</li>\n<li>在 JavaScript 的基础上提供一些语法糖，使我们能够编写更短的代码，我认为 ES5 缺乏语法糖的支持，但 ES2015 非常好。</li>\n<li>对于需要长时间维护的大型项目，静态类型非常好用（针对 TypeScript）。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>由于浏览器只运行 JavaScript，所以需要构建、编译过程，在将代码提供给浏览器之前，需要将代码转译为 JavaScript。</li>\n<li>如果 source map 不能很好地映射到预编译的源代码，调试会很痛苦。</li>\n<li>大多数开发人员不熟悉这些语言，需要学习它。如果将其用于项目，会增加团队成本。</li>\n<li>社区比较小（取决于语言），这意味着资源、教程、图书和工具难以找到。</li>\n<li>可能缺乏 IDE（编辑器）的支持。</li>\n<li>这些语言将始终落后于最新的 JavaScript 标准。</li>\n<li>开发人员应该清楚代码正在被编译到什么地方——因为这是实际运行的内容，是最重要的。</li>\n</ul>\n<p>实际上，ES2015 已经大大改进了 JavaScript，编写体验很好。我现在还没有真正看到对 CoffeeScript 的需求。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://softwareengineering.stackexchange.com/questions/72569/what-are-the-pros-and-cons-of-coffeescript" target="_blank" rel="nofollow noreferrer noopener">https://softwareengineering.stackexchange.com/questions/72569/what-are-the-pros-and-cons-of-coffeescript</a></li>\n</ul>\n<h2 id="你使用什么工具和技巧调试-javascript-代码？"><a href="#%E4%BD%A0%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8A%80%E5%B7%A7%E8%B0%83%E8%AF%95-javascript-%E4%BB%A3%E7%A0%81%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你使用什么工具和技巧调试 JavaScript 代码？</h2>\n<ul>\n<li>\n<p>React 和 Redux</p>\n<ul>\n<li><a href="https://github.com/facebook/react-devtools" target="_blank" rel="nofollow noreferrer noopener">React Devtools</a></li>\n<li><a href="https://github.com/gaearon/redux-devtools" target="_blank" rel="nofollow noreferrer noopener">Redux Devtools</a></li>\n</ul>\n</li>\n<li>\n<p>Vue</p>\n<ul>\n<li><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="nofollow noreferrer noopener">Vue Devtools</a></li>\n</ul>\n</li>\n<li>\n<p>JavaScript</p>\n<ul>\n<li><a href="https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d" target="_blank" rel="nofollow noreferrer noopener">Chrome Devtools</a></li>\n<li><code class="language-text">debugger</code>声明</li>\n<li>使用万金油<code class="language-text">console.log</code>进行调试</li>\n</ul>\n</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d" target="_blank" rel="nofollow noreferrer noopener">https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d</a></li>\n<li><a href="https://raygun.com/blog/javascript-debugging/" target="_blank" rel="nofollow noreferrer noopener">https://raygun.com/blog/javascript-debugging/</a></li>\n</ul>\n<h2 id="你使用什么语句遍历对象的属性和数组的元素？"><a href="#%E4%BD%A0%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E8%AF%AD%E5%8F%A5%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你使用什么语句遍历对象的属性和数组的元素？</h2>\n<p><strong>对象：</strong></p>\n<ul>\n<li><code class="language-text">for</code>循环：<code class="language-text">for (var property in obj) { console.log(property); }</code>。但是，这还会遍历到它的继承属性，在使用之前，你需要加入<code class="language-text">obj.hasOwnProperty(property)</code>检查。</li>\n<li><code class="language-text">Object.keys()</code>：<code class="language-text">Object.keys(obj).forEach(function (property) { ... })</code>。<code class="language-text">Object.keys()</code>方法会返回一个由一个给定对象的自身可枚举属性组成的数组。</li>\n<li><code class="language-text">Object.getOwnPropertyNames()</code>：<code class="language-text">Object.getOwnPropertyNames(obj).forEach(function (property) { ... })</code>。<code class="language-text">Object.getOwnPropertyNames()</code>方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</li>\n</ul>\n<p><strong>数组：</strong></p>\n<ul>\n<li><code class="language-text">for</code> loops：<code class="language-text">for (var i = 0; i &lt; arr.length; i++)</code>。这里的常见错误是<code class="language-text">var</code>是函数作用域而不是块级作用域，大多数时候你想要迭代变量在块级作用域中。ES2015 引入了具有块级作用域的<code class="language-text">let</code>，建议使用它。所以就变成了：<code class="language-text">for (let i = 0; i &lt; arr.length; i++)</code>。</li>\n<li><code class="language-text">forEach</code>：<code class="language-text">arr.forEach(function (el, index) { ... })</code>。这个语句结构有时会更精简，因为如果你所需要的只是数组元素，你不必使用<code class="language-text">index</code>。还有<code class="language-text">every</code>和<code class="language-text">some</code>方法可以让你提前终止遍历。</li>\n</ul>\n<p>大多数情况下，我更喜欢<code class="language-text">.forEach</code>方法，但这取决于你想要做什么。<code class="language-text">for</code>循环有更强的灵活性，比如使用<code class="language-text">break</code>提前终止循环，或者递增步数大于一。</p>\n<h2 id="请解释可变对象和不可变对象之间的区别。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释可变对象和不可变对象之间的区别。</h2>\n<ul>\n<li>什么是 JavaScript 中的不可变对象的例子？</li>\n<li>不变性有什么优点和缺点？</li>\n<li>你如何在自己的代码中实现不变性？</li>\n</ul>\n<p><strong><em>可变对象</em></strong> 在创建之后是可以被改变的。</p>\n<p><strong><em>不可变对象</em></strong> 在创建之后是不可以被改变的。</p>\n<ol>\n<li>在 <code class="language-text">JavaScript</code> 中，<code class="language-text">string</code> 和 <code class="language-text">number</code> 从设计之初就是不可变(Immutable)。</li>\n<li><strong><em>不可变</em></strong> 其实是保持一个对象状态不变，这样做的好处是使得开发更加简单，可回溯，测试友好，减少了任何可能的副作用。但是，每当你想添加点东西到一个不可变(Immutable)对象里时，它一定是先拷贝已存在的值到新实例里，然后再给新实例添加内容，最后返回新实例。相比可变对象，这势必会有更多内存、计算量消耗。</li>\n<li>比如：构造一个纯函数</li>\n</ol>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65548614690024020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const student1 = {\n  school: \'Baidu\',\n  name: \'HOU Ce\',\n  birthdate: \'1995-12-15\'\n};\n\nconst changeStudent = (student, newName, newBday) => {\n  return {\n    ...student, // 使用解构\n    name: newName, // 覆盖name属性\n    birthdate: newBday // 覆盖birthdate属性\n  };\n};\n\nconst student2 = changeStudent(student1, \'YAN Haijing\', \'1990-11-10\');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: &quot;Baidu&quot;, name: &quot;HOU Ce&quot;, birthdate: &quot;1995-12-15&quot;}\n// Object {school: &quot;Baidu&quot;, name: &quot;YAN Haijing&quot;, birthdate: &quot;1990-11-10&quot;}`, `65548614690024020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> student1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  school<span class="token punctuation">:</span> <span class="token string">\'Baidu\'</span><span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'HOU Ce\'</span><span class="token punctuation">,</span>\n  birthdate<span class="token punctuation">:</span> <span class="token string">\'1995-12-15\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">changeStudent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">student<span class="token punctuation">,</span> newName<span class="token punctuation">,</span> newBday</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>student<span class="token punctuation">,</span> <span class="token comment">// 使用解构</span>\n    name<span class="token punctuation">:</span> newName<span class="token punctuation">,</span> <span class="token comment">// 覆盖name属性</span>\n    birthdate<span class="token punctuation">:</span> newBday <span class="token comment">// 覆盖birthdate属性</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> student2 <span class="token operator">=</span> <span class="token function">changeStudent</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span> <span class="token string">\'YAN Haijing\'</span><span class="token punctuation">,</span> <span class="token string">\'1990-11-10\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// both students will have the name properties</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span> student2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Object {school: "Baidu", name: "HOU Ce", birthdate: "1995-12-15"}</span>\n<span class="token comment">// Object {school: "Baidu", name: "YAN Haijing", birthdate: "1990-11-10"}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9" target="_blank" rel="nofollow noreferrer noopener">https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9</a></li>\n<li><a href="https://www.interviewcake.com/concept/java/mutable" target="_blank" rel="nofollow noreferrer noopener">https://www.interviewcake.com/concept/java/mutable</a></li>\n<li><a href="https://www.sitepoint.com/immutability-javascript/" target="_blank" rel="nofollow noreferrer noopener">https://www.sitepoint.com/immutability-javascript/</a></li>\n</ul>\n<h2 id="请解释同步和异步函数之间的区别。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释同步和异步函数之间的区别。</h2>\n<p>同步函数阻塞，而异步函数不阻塞。在同步函数中，语句完成后，下一句才执行。在这种情况下，程序可以按照语句的顺序进行精确评估，如果其中一个语句需要很长时间，程序的执行会停滞很长时间。</p>\n<p>异步函数通常接受回调作为参数，在调用异步函数后立即继续执行下一行。回调函数仅在异步操作完成且调用堆栈为空时调用。诸如从 Web 服务器加载数据或查询数据库等重负载操作应该异步完成，以便主线程可以继续执行其他操作，而不会出现一直阻塞，直到费时操作完成的情况（在浏览器中，界面会卡住）。</p>\n<h2 id="什么是事件循环？调用堆栈和任务队列之间有什么区别？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%9F%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E5%92%8C%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是事件循环？调用堆栈和任务队列之间有什么区别？</h2>\n<p>事件循环是一个单线程循环，用于监视调用堆栈并检查是否有工作即将在任务队列中完成。如果调用堆栈为空并且任务队列中有回调函数，则将回调函数出队并推送到调用堆栈中执行。</p>\n<p>如果你没有看过 Philip Robert <a href="https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html" target="_blank" rel="nofollow noreferrer noopener">关于事件循环的演讲</a>，你应该看一下。这是观看次数最多的 JavaScript 相关视频之一。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html" target="_blank" rel="nofollow noreferrer noopener">https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html</a></li>\n<li><a href="http://theproactiveprogrammer.com/javascript/the-javascript-event-loop-a-stack-and-a-queue/" target="_blank" rel="nofollow noreferrer noopener">http://theproactiveprogrammer.com/javascript/the-javascript-event-loop-a-stack-and-a-queue/</a></li>\n</ul>\n<h2 id="请解释-function-foo-和-var-foo--function-之间-foo-的用法上的区别。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A-function-foo-%E5%92%8C-var-foo--function-%E4%B9%8B%E9%97%B4-foo-%E7%9A%84%E7%94%A8%E6%B3%95%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释 function foo() {}和 var foo = function() {}之间 foo 的用法上的区别。</h2>\n<p>前者是函数声明，后者是函数表达式。关键的区别在于函数声明会使函数体提升（具有与变量相同的提升行为），但函数表达式的函数体不能。有关变量提升的更多解释，请参阅上面关于变量提升的问题。如果你试图在定义函数表达式之前调用它，你会得到一个<code class="language-text">Uncaught TypeError: XXX is not a function</code>的错误。</p>\n<p><strong>函数声明</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73820523492559440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`foo(); // \'FOOOOO\'\nfunction foo() {\n  console.log(\'FOOOOO\');\n}`, `73820523492559440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'FOOOOO\'</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'FOOOOO\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>函数表达式</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54348558511774850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`foo(); // Uncaught TypeError: foo is not a function\nvar foo = function() {\n  console.log(\'FOOOOO\');\n};`, `54348558511774850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: foo is not a function</span>\n<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'FOOOOO\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function</a></li>\n</ul>\n<h2 id="使用-let、var-和-const-创建变量有什么区别？"><a href="#%E4%BD%BF%E7%94%A8-let%E3%80%81var-%E5%92%8C-const-%E5%88%9B%E5%BB%BA%E5%8F%98%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 let、var 和 const 创建变量有什么区别？</h2>\n<p>用<code class="language-text">var</code>声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，也可以是声明在任何函数外的变量。<code class="language-text">let</code>和<code class="language-text">const</code>是块级作用域，意味着它们只能在最近的一组花括号（function、if-else 代码块或 for 循环中）中访问。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97106144692884600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function foo() {\n  // 所有变量在函数中都可访问\n  var bar = \'bar\';\n  let baz = \'baz\';\n  const qux = \'qux\';\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined`, `97106144692884600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 所有变量在函数中都可访问</span>\n  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token string">\'baz\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> qux <span class="token operator">=</span> <span class="token string">\'qux\'</span><span class="token punctuation">;</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// baz</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// qux</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: bar is not defined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: baz is not defined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: qux is not defined</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84167610641977440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (true) {\n  var bar = \'bar\';\n  let baz = \'baz\';\n  const qux = \'qux\';\n}\n\n// 用 var 声明的变量在函数作用域上都可访问\nconsole.log(bar); // bar\n// let 和 const 定义的变量在它们被定义的语句块之外不可访问\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined`, `84167610641977440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token string">\'baz\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> qux <span class="token operator">=</span> <span class="token string">\'qux\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 用 var 声明的变量在函数作用域上都可访问</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span>\n<span class="token comment">// let 和 const 定义的变量在它们被定义的语句块之外不可访问</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: baz is not defined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: qux is not defined</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">var</code>会使变量提升，这意味着变量可以在声明之前使用。<code class="language-text">let</code>和<code class="language-text">const</code>不会使变量提升，提前使用会报错。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="82799162940586740000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`console.log(foo); // undefined\n\nvar foo = \'foo\';\n\nconsole.log(baz); // ReferenceError: can\'t access lexical declaration \'baz\' before initialization\n\nlet baz = \'baz\';\n\nconsole.log(bar); // ReferenceError: can\'t access lexical declaration \'bar\' before initialization\n\nconst bar = \'bar\';`, `82799162940586740000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">\'foo\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: can\'t access lexical declaration \'baz\' before initialization</span>\n\n<span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token string">\'baz\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: can\'t access lexical declaration \'bar\' before initialization</span>\n\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>用<code class="language-text">var</code>重复声明不会报错，但<code class="language-text">let</code>和<code class="language-text">const</code>会。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="43139811602420105000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var foo = \'foo\';\nvar foo = \'bar\';\nconsole.log(foo); // &quot;bar&quot;\n\nlet baz = \'baz\';\nlet baz = \'qux\'; // Uncaught SyntaxError: Identifier \'baz\' has already been declared`, `43139811602420105000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">\'foo\'</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "bar"</span>\n\n<span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token string">\'baz\'</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token string">\'qux\'</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught SyntaxError: Identifier \'baz\' has already been declared</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class="language-text">let</code>和<code class="language-text">const</code>的区别在于：<code class="language-text">let</code>允许多次赋值，而<code class="language-text">const</code>只允许一次。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48204748560878084000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 这样不会报错。\nlet foo = \'foo\';\nfoo = \'bar\';\n\n// 这样会报错。\nconst baz = \'baz\';\nbaz = \'qux\';`, `48204748560878084000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 这样不会报错。</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">\'foo\'</span><span class="token punctuation">;</span>\nfoo <span class="token operator">=</span> <span class="token string">\'bar\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 这样会报错。</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token string">\'baz\'</span><span class="token punctuation">;</span>\nbaz <span class="token operator">=</span> <span class="token string">\'qux\'</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a></li>\n</ul>\n<h2 id="es6-的类和-es5-的构造函数有什么区别？"><a href="#es6-%E7%9A%84%E7%B1%BB%E5%92%8C-es5-%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ES6 的类和 ES5 的构造函数有什么区别？</h2>\n<ul>\n<li>ES5 的构造函数的原型上的属性和方法可以遍历，ES6 不能够遍历</li>\n<li>ES6 的类必须通过 new 调用，构造函数则可以不用</li>\n<li>类不存在变量提升</li>\n<li>ES6 的类没有私有方法和私有属性（正在提议中）</li>\n<li>class 多了一个静态方法（static），里面的 this 指向的是类本身，静态方法可以被子类继承</li>\n<li>ES6 的静态属性和静态方法</li>\n<li>ES6 类多了一个 new Target 可以判定 new 的构造函数</li>\n</ul>\n<h2 id="你能给出一个使用箭头函数的例子吗，箭头函数与其他函数有什么不同？"><a href="#%E4%BD%A0%E8%83%BD%E7%BB%99%E5%87%BA%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BE%8B%E5%AD%90%E5%90%97%EF%BC%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你能给出一个使用箭头函数的例子吗，箭头函数与其他函数有什么不同？</h2>\n<ol>\n<li>\n<p>定义对象方法</p>\n<ul>\n<li>定义字面量方法 <strong>错误情况：</strong></li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="85790302645455630000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const calculator = {\n  array: [1, 2, 3],\n  sum: () => {\n    console.log(this === window); // => true\n    return this.array.reduce((result, item) => result + item);\n  }\n};\n\nconsole.log(this === window); // => true\n\n// Throws &quot;TypeError: Cannot read property \'reduce\' of undefined&quot;\ncalculator.sum();`, `85790302645455630000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> calculator <span class="token operator">=</span> <span class="token punctuation">{</span>\n  array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">sum</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> result <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n\n<span class="token comment">// Throws "TypeError: Cannot read property \'reduce\' of undefined"</span>\ncalculator<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> <strong>修正情况</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="32881423871776326000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const calculator = {\n  array: [1, 2, 3],\n  sum() {\n    console.log(this === calculator); // => true\n    return this.array.reduce((result, item) => result + item);\n  }\n};\ncalculator.sum(); // => 6`, `32881423871776326000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> calculator <span class="token operator">=</span> <span class="token punctuation">{</span>\n  array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> calculator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> result <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\ncalculator<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 6</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>定义原型方法 <strong>错误情况：</strong></li>\n</ul>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="18196503295165512000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype.sayCatName = () => {\n  console.log(this === window); // => true\n  return this.name;\n};\n\nconst cat = new Cat(\'Mew\');\ncat.sayCatName(); // => undefined`, `18196503295165512000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayCatName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">\'Mew\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span><span class="token function">sayCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => undefined</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> <strong>修正情况</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47376828099687730000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype.sayCatName = function() {\n  console.log(this === cat); // => true\n  return this.name;\n};\n\nconst cat = new Cat(\'Mew\');\ncat.sayCatName(); // => \'Mew\'`, `47376828099687730000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayCatName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> cat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">\'Mew\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span><span class="token function">sayCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => \'Mew\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>定义事件回调函数 <strong>错误情况：</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47940395386935640000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const button = document.getElementById(\'myButton\');\nbutton.addEventListener(\'click\', () => {\n console.log(this === window); // => true\n this.innerHTML = \'Clicked button\';\n});`, `47940395386935640000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'myButton\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">\'Clicked button\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>修正情况</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65686372758608820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const button = document.getElementById(\'myButton\');\nbutton.addEventListener(\'click\', function() {\n console.log(this === button); // => true\n this.innerHTML = \'Clicked button\';\n});`, `65686372758608820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'myButton\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>\n <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">\'Clicked button\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>定义构造函数 <strong>错误情况：</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="13545513417022902000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const Message = (text) => {\n this.text = text;\n};\n// Throws &quot;TypeError: Message is not a constructor&quot;\nconst helloMessage = new Message(\'Hello World!\');`, `13545513417022902000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Throws "TypeError: Message is not a constructor"</span>\n<span class="token keyword">const</span> helloMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">\'Hello World!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>修正情况</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15792723574197676000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const Message = function(text) {\n this.text = text;\n};\nconst helloMessage = new Message(\'Hello World!\');\nconsole.log(helloMessage.text); // => \'Hello World!\'`, `15792723574197676000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> helloMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">\'Hello World!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>helloMessage<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => \'Hello World!\'</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>追求过短的代码 <strong>不建议情况：</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="80485851171710750000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const multiply = (a, b) => (b === undefined ? (b) => a * b : a * b);\nconst double = multiply(2);\ndouble(3); // => 6\nmultiply(2, 3); // => 6`, `80485851171710750000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">*</span> b <span class="token punctuation">:</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 6</span>\n<span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 6</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>建议情况</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="91997305683577540000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function multiply(a, b) {\n if (b === undefined) {\n   return function(b) {\n     return a * b;\n   };\n }\n return a * b;\n}\n\nconst double = multiply(2);\ndouble(3); // => 6\nmultiply(2, 3); // => 6`, `91997305683577540000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 6</span>\n<span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 6</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>总结：在箭头函数中，this 被设置为它被创建时的上下文，不会改变。</p>\n</li>\n</ol>\n<h2 id="在构造函数中使用箭头函数有什么好处？"><a href="#%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在构造函数中使用箭头函数有什么好处？</h2>\n<p>箭头函数固然好用，但是不能用于构造函数，即不能被 new 一下</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55552869111287450000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`///使用function方法定义构造函数\nfunction per(){\n    this.name=\'aaa\';\n    this.sex=\'man\'\n};\nvar ming=new per();\nconsole.log(ming); /// {name: &quot;aaa&quot;, sex: &quot;man&quot;}\n\n\n///使用箭头函数定义构造函数\nvar per=>{\n    this.name=\'bbb\';\n    this.sex=\'women\';\n};\nvar gang=new per();\n///运行便会报错：Uncaught TypeError: per is not a constructor`, `55552869111287450000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">///使用function方法定义构造函数</span>\n<span class="token keyword">function</span> <span class="token function">per</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">\'aaa\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">\'man\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> ming<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">per</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ming<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/// {name: "aaa", sex: "man"}</span>\n\n\n<span class="token comment">///使用箭头函数定义构造函数</span>\n<span class="token keyword">var</span> <span class="token parameter">per</span><span class="token operator">=></span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">\'bbb\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">\'women\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> gang<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">per</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">///运行便会报错：Uncaught TypeError: per is not a constructor</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="高阶函数（higher-order）的定义是什么？"><a href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%EF%BC%88higher-order%EF%BC%89%E7%9A%84%E5%AE%9A%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>高阶函数（higher-order）的定义是什么？</h2>\n<p>高阶函数是将一个或多个函数作为参数的函数，它用于数据处理，也可能将函数作为返回结果。高阶函数是为了抽象一些重复执行的操作。一个典型的例子是<code class="language-text">map</code>，它将一个数组和一个函数作为参数。<code class="language-text">map</code>使用这个函数来转换数组中的每个元素，并返回一个包含转换后元素的新数组。JavaScript 中的其他常见示例是<code class="language-text">forEach</code>、<code class="language-text">filter</code>和<code class="language-text">reduce</code>。高阶函数不仅需要操作数组的时候会用到，还有许多函数返回新函数的用例，<code class="language-text">Function.prototype.bind</code>就是一个例子。</p>\n<p><strong>Map 示例：</strong></p>\n<p>假设我们有一个由名字组成的数组，我们需要将每个字符转换为大写字母。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="39130529252624190000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const names = [\'irish\', \'daisy\', \'anna\'];`, `39130529252624190000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'irish\'</span><span class="token punctuation">,</span> <span class="token string">\'daisy\'</span><span class="token punctuation">,</span> <span class="token string">\'anna\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>不使用高阶函数的方法是这样：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="42563976150041800000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const transformNamesToUppercase = function(names) {\n  const results = [];\n  for (let i = 0; i < names.length; i++) {\n    results.push(names[i].toUpperCase());\n  }\n  return results;\n};\ntransformNamesToUppercase(names); // [\'IRISH\', \'DAISY\', \'ANNA\']`, `42563976150041800000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">transformNamesToUppercase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">names</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">transformNamesToUppercase</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'IRISH\', \'DAISY\', \'ANNA\']</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用<code class="language-text">.map(transformerFn)</code>使代码更简明</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51109986501825946000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`const transformNamesToUppercase = function(names) {\n  return names.map((name) => name.toUpperCase());\n};\ntransformNamesToUppercase(names); // [\'IRISH\', \'DAISY\', \'ANNA\']`, `51109986501825946000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">transformNamesToUppercase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">names</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">transformNamesToUppercase</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'IRISH\', \'DAISY\', \'ANNA\']</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99" target="_blank" rel="nofollow noreferrer noopener">https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99</a></li>\n<li><a href="https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a" target="_blank" rel="nofollow noreferrer noopener">https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a</a></li>\n<li><a href="https://eloquentjavascript.net/05_higher_order.html" target="_blank" rel="nofollow noreferrer noopener">https://eloquentjavascript.net/05<em>higher</em>order.html</a></li>\n</ul>\n<h2 id="请给出一个解构（destructuring）对象或数组的例子。"><a href="#%E8%AF%B7%E7%BB%99%E5%87%BA%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%9E%84%EF%BC%88destructuring%EF%BC%89%E5%AF%B9%E8%B1%A1%E6%88%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%BE%8B%E5%AD%90%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请给出一个解构（destructuring）对象或数组的例子。</h2>\n<p>解构是 ES6 中新功能，它提供了一种简洁方便的方法来提取对象或数组的值，并将它们放入不同的变量中。</p>\n<p><strong>数组解构</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="76987902118199440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 变量赋值\nconst foo = [\'one\', \'two\', \'three\'];\n\nconst [one, two, three] = foo;\nconsole.log(one); // &quot;one&quot;\nconsole.log(two); // &quot;two&quot;\nconsole.log(three); // &quot;three&quot;`, `76987902118199440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 变量赋值</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'one\'</span><span class="token punctuation">,</span> <span class="token string">\'two\'</span><span class="token punctuation">,</span> <span class="token string">\'three\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "one"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "two"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "three"</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="21671796309479840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 变量交换\nlet a = 1;\nlet b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1`, `21671796309479840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 变量交换</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>对象解构</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68915132877101470000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 变量赋值\nconst o = { p: 42, q: true };\nconst { p, q } = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true`, `68915132877101470000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">// 变量赋值</span>\n<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> p<span class="token punctuation">,</span> q <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li>\n<li><a href="https://ponyfoo.com/articles/es6-destructuring-in-depth" target="_blank" rel="nofollow noreferrer noopener">https://ponyfoo.com/articles/es6-destructuring-in-depth</a></li>\n</ul>\n<h2 id="es6-的模板字符串为生成字符串提供了很大的灵活性，你可以举个例子吗？"><a href="#es6-%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BA%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E4%BE%9B%E4%BA%86%E5%BE%88%E5%A4%A7%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ES6 的模板字符串为生成字符串提供了很大的灵活性，你可以举个例子吗？</h2>\n<p><strong><em>模板字面量</em></strong>（Template literals） 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。</p>\n<p><strong>语法</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25187419162992230000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\\`string text\\`\\`string text line 1\n string text line 2\\`\\`string text \\${expression} string text\\`;\n\ntag\\`string text \\${expression} string text\\`;`, `25187419162992230000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string text</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string text line 1\n string text line 2</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string text </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> string text</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\ntag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string text </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> string text</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>示例</strong></p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56279039408727360000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`console.log(\\`string text line 1\nstring text line 2\\`);\n// &quot;string text line 1\n// string text line 2&quot;\n\nvar a = 5;\nvar b = 10;\nconsole.log(\\`Fifteen is \\${a + b} and\\nnot \\${2 * a + b}.\\`);\n// &quot;Fifteen is 15 and\n// not 20.&quot;`, `56279039408727360000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string text line 1\nstring text line 2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// "string text line 1</span>\n<span class="token comment">// string text line 2"</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Fifteen is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and\\nnot </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// "Fifteen is 15 and</span>\n<span class="token comment">// not 20."</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="4964567827817046000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`//show函数采用rest参数的写法如下：\nlet name = \'张三\',\n  age = 20,\n  message = show\\`我来给大家介绍:\\${name}的年龄是\\${age}.\\`;\n\nfunction show(stringArr, ...values) {\n  let output = \'\';\n\n  let index = 0;\n\n  for (; index < values.length; index++) {\n    output += stringArr[index] + values[index];\n  }\n\n  output += stringArr[index];\n\n  return output;\n}\n\nmessage; //&quot;我来给大家介绍:张三的年龄是20.&quot;`, `4964567827817046000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token comment">//show函数采用rest参数的写法如下：</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'张三\'</span><span class="token punctuation">,</span>\n  age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>\n  message <span class="token operator">=</span> show<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我来给大家介绍:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的年龄是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">stringArr<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    output <span class="token operator">+=</span> stringArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  output <span class="token operator">+=</span> stringArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> output<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmessage<span class="token punctuation">;</span> <span class="token comment">//"我来给大家介绍:张三的年龄是20."</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings</a></li>\n</ul>\n<h2 id="你能举出一个柯里化函数（curry-function）的例子吗？它有哪些好处？"><a href="#%E4%BD%A0%E8%83%BD%E4%B8%BE%E5%87%BA%E4%B8%80%E4%B8%AA%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%EF%BC%88curry-function%EF%BC%89%E7%9A%84%E4%BE%8B%E5%AD%90%E5%90%97%EF%BC%9F%E5%AE%83%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E5%A4%84%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你能举出一个柯里化函数（curry function）的例子吗？它有哪些好处？</h2>\n<p>柯里化（currying）是一种模式，其中具有多个参数的函数被分解为多个函数，当被串联调用时，将一次一个地累积所有需要的参数。这种技术帮助编写函数式风格的代码，使代码更易读、紧凑。值得注意的是，对于需要被 curry 的函数，它需要从一个函数开始，然后分解成一系列函数，每个函数都需要一个参数。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="67737302931201460000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function(newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]`, `67737302931201460000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> fn<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">_curried</span><span class="token punctuation">(</span><span class="token parameter">depth<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newArgument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> newArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token function">_curried</span><span class="token punctuation">(</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> newArgument<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">_curried</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> curriedAdd <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> addFive <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>addFive<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 6, 7, 8, 9, 10]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://hackernoon.com/currying-in-js-d9ddc64f162e" target="_blank" rel="nofollow noreferrer noopener">https://hackernoon.com/currying-in-js-d9ddc64f162e</a></li>\n</ul>\n<h2 id="使用扩展运算符（spread）的好处是什么，它与使用剩余参数语句（rest）有什么区别？"><a href="#%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88spread%EF%BC%89%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%AE%83%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E8%AF%AD%E5%8F%A5%EF%BC%88rest%EF%BC%89%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用扩展运算符（spread）的好处是什么，它与使用剩余参数语句（rest）有什么区别？</h2>\n<p>在函数泛型编码时，ES6 的扩展运算符非常有用，因为我们可以轻松创建数组和对象的拷贝，而无需使用<code class="language-text">Object.create</code>、<code class="language-text">slice</code>或其他函数库。这个语言特性在 Redux 和 rx.js 的项目中经常用到。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47802570204361980000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function putDookieInAnyArray(arr) {\n  return [...arr, \'dookie\'];\n}\n\nconst result = putDookieInAnyArray([\'I\', \'really\', &quot;don\'t&quot;, \'like\']); // [&quot;I&quot;, &quot;really&quot;, &quot;don\'t&quot;, &quot;like&quot;, &quot;dookie&quot;]\n\nconst person = {\n  name: \'Todd\',\n  age: 29\n};\n\nconst copyOfTodd = { ...person };`, `47802570204361980000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">putDookieInAnyArray</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token string">\'dookie\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">putDookieInAnyArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'I\'</span><span class="token punctuation">,</span> <span class="token string">\'really\'</span><span class="token punctuation">,</span> <span class="token string">"don\'t"</span><span class="token punctuation">,</span> <span class="token string">\'like\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["I", "really", "don\'t", "like", "dookie"]</span>\n\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'Todd\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">29</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> copyOfTodd <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person <span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ES6 的剩余参数语句提供了一个简写，允许我们将不定数量的参数表示为一个数组。它就像是扩展运算符语法的反面，将数据收集到数组中，而不是解构数组。剩余参数语句在函数参数、数组和对象的解构赋值中有很大作用。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33179837705697636000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function addFiveToABunchOfNumbers(...numbers) {\n  return numbers.map((x) => x + 5);\n}\n\nconst result = addFiveToABunchOfNumbers(4, 5, 6, 7, 8, 9, 10); // [9, 10, 11, 12, 13, 14, 15]\n\nconst [a, b, ...rest] = [1, 2, 3, 4]; // a: 1, b: 2, rest: [3, 4]\n\nconst { e, f, ...others } = {\n  e: 1,\n  f: 2,\n  g: 3,\n  h: 4\n}; // e: 1, f: 2, others: { g: 3, h: 4 }`, `33179837705697636000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addFiveToABunchOfNumbers</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">addFiveToABunchOfNumbers</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [9, 10, 11, 12, 13, 14, 15]</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a: 1, b: 2, rest: [3, 4]</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token operator">...</span>others <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  e<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  f<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  g<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  h<span class="token punctuation">:</span> <span class="token number">4</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// e: 1, f: 2, others: { g: 3, h: 4 }</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li>\n</ul>\n<h2 id="如何在文件之间共用代码？"><a href="#%E5%A6%82%E4%BD%95%E5%9C%A8%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E5%85%B1%E7%94%A8%E4%BB%A3%E7%A0%81%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何在文件之间共用代码？</h2>\n<p>这取决于执行 JavaScript 的环境。</p>\n<p>在客户端（浏览器环境）上，只要变量或函数在全局作用域（<code class="language-text">window</code>）中声明，所有脚本都可以引用它们。或者，通过 RequireJS 采用异步模块定义（AMD）以获得更多模块化方法。</p>\n<p>在服务器（Node.js）上，常用的方法是使用 CommonJS。每个文件都被视为一个模块，可以通过将它们附加到<code class="language-text">module.exports</code>对象来导出变量和函数。</p>\n<p>ES2015 定义了一个模块语法，旨在替换 AMD 和 CommonJS。 这最终将在浏览器和 Node 环境中得到支持。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="http://requirejs.org/docs/whyamd.html" target="_blank" rel="nofollow noreferrer noopener">http://requirejs.org/docs/whyamd.html</a></li>\n<li><a href="https://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="nofollow noreferrer noopener">https://nodejs.org/docs/latest/api/modules.html</a></li>\n<li><a href="http://2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="nofollow noreferrer noopener">http://2ality.com/2014/09/es6-modules-final.html</a></li>\n</ul>\n<h2 id="什么情况下会用到静态类成员？"><a href="#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E7%94%A8%E5%88%B0%E9%9D%99%E6%80%81%E7%B1%BB%E6%88%90%E5%91%98%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么情况下会用到静态类成员？</h2>\n<p>静态类成员（属性或方法）不绑定到某个类的特定实例，不管哪个实例引用它，都具有相同的值。静态属性通常是配置变量，而静态方法通常是纯粹的实用函数，不依赖于实例的状态。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/21155438/when-to-use-static-variables-methods-and-when-to-use-instance-variables-methods" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/21155438/when-to-use-static-variables-methods-and-when-to-use-instance-variables-methods</a></li>\n</ul>\n<h2 id="其他答案"><a href="#%E5%85%B6%E4%BB%96%E7%AD%94%E6%A1%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他答案</h2>\n<ul>\n<li><a href="http://flowerszhong.github.io/2013/11/20/javascript-questions.html" target="_blank" rel="nofollow noreferrer noopener">http://flowerszhong.github.io/2013/11/20/javascript-questions.html</a></li>\n</ul>',
id:"/github/workspace/blog/前端面试题JS部分/index.md absPath of file >>> MarkdownRemark",timeToRead:45,frontmatter:{date:"2018-04-14 17:25:42",path:"/front-end-interview-js/",tags:"面试, JS, 前端",title:"前端面试题JS部分",draft:null}},{excerpt:"CSS 选择器的优先级是如何计算的？ 浏览器通过优先级规则，判断元素展示哪些样式。优先级通过 4 个维度指标确定，我们假定以 命名，分别代表以下含义： 表示是否使用内联样式（inline style）。如果使用， 为 1，否则为 0。 表示 ID…",html:'<h1 id="css-选择器的优先级是如何计算的？"><a href="#css-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%9A%84%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSS 选择器的优先级是如何计算的？</h1>\n<p>浏览器通过优先级规则，判断元素展示哪些样式。优先级通过 4 个维度指标确定，我们假定以<code class="language-text">a、b、c、d</code>命名，分别代表以下含义：</p>\n<ol>\n<li><code class="language-text">a</code>表示是否使用内联样式（inline style）。如果使用，<code class="language-text">a</code>为 1，否则为 0。</li>\n<li><code class="language-text">b</code>表示 ID 选择器的数量。</li>\n<li><code class="language-text">c</code>表示类选择器、属性选择器和伪类选择器数量之和。</li>\n<li><code class="language-text">d</code>表示标签（类型）选择器和伪元素选择器之和。</li>\n</ol>\n<p>优先级的结果并非通过以上四个值生成一个得分，而是每个值分开比较。<code class="language-text">a、b、c、d</code>权重从左到右，依次减小。判断优先级时，从左到右，一一比较，直到比较出最大值，即可停止。所以，如果<code class="language-text">b</code>的值不同，那么<code class="language-text">c</code>和<code class="language-text">d</code>不管多大，都不会对结果产生影响。比如<code class="language-text">0，1，0，0</code>的优先级高于<code class="language-text">0，0，10，10</code>。</p>\n<p>当出现优先级相等的情况时，最晚出现的样式规则会被采纳。如果你在样式表里写了相同的规则（无论是在该文件内部还是其它样式文件中），那么最后出现的（在文件底部的）样式优先级更高，因此会被采纳。</p>\n<p>在写样式时，我会使用较低的优先级，这样这些样式可以轻易地覆盖掉。尤其对写 UI 组件的时候更为重要，这样使用者就不需要通过非常复杂的优先级规则或使用<code class="language-text">!important</code>的方式，去覆盖组件的样式了。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/" target="_blank" rel="nofollow noreferrer noopener">https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/</a></li>\n<li><a href="https://www.sitepoint.com/web-foundations/specificity/" target="_blank" rel="nofollow noreferrer noopener">https://www.sitepoint.com/web-foundations/specificity/</a></li>\n</ul>\n<h1 id="重置（resetting）css-和-标准化（normalizing）css-的区别是什么？你会选择哪种方式，为什么？"><a href="#%E9%87%8D%E7%BD%AE%EF%BC%88resetting%EF%BC%89css-%E5%92%8C-%E6%A0%87%E5%87%86%E5%8C%96%EF%BC%88normalizing%EF%BC%89css-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%BD%A0%E4%BC%9A%E9%80%89%E6%8B%A9%E5%93%AA%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>重置（resetting）CSS 和 标准化（normalizing）CSS 的区别是什么？你会选择哪种方式，为什么？</h1>\n<ul>\n<li><strong>重置（Resetting）</strong>： 重置意味着除去所有的浏览器默认样式。对于页面所有的元素，像<code class="language-text">margin</code>、<code class="language-text">padding</code>、<code class="language-text">font-size</code>这些样式全部置成一样。你将必须重新定义各种元素的样式。</li>\n<li><strong>标准化（Normalizing）</strong>： 标准化没有去掉所有的默认样式，而是保留了有用的一部分，同时还纠正了一些常见错误。</li>\n</ul>\n<p>当需要实现非常个性化的网页设计时，我会选择重置的方式，因为我要写很多自定义的样式以满足设计需求，这时候就不再需要标准化的默认样式了。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css</a></li>\n</ul>\n<h1 id="请阐述-float-定位的工作原理。"><a href="#%E8%AF%B7%E9%98%90%E8%BF%B0-float-%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请阐述 Float 定位的工作原理。</h1>\n<p>浮动（float）是 CSS 定位属性。浮动元素从网页的正常流动中移出，但是保持了部分的流动性，会影响其他元素的定位（比如文字会围绕着浮动元素）。这一点与绝对定位不同，绝对定位的元素完全从文档流中脱离。</p>\n<p>CSS 的<code class="language-text">clear</code>属性通过使用<code class="language-text">left</code>、<code class="language-text">right</code>、<code class="language-text">both</code>，让该元素向下移动（清除浮动）到浮动元素下面。</p>\n<p>如果父元素只包含浮动元素，那么该父元素的高度将塌缩为 0。我们可以通过清除（clear）从浮动元素后到父元素关闭前之间的浮动来修复这个问题。</p>\n<p>有一种 hack 的方法，是自定义一个<code class="language-text">.clearfix</code>类，利用伪元素选择器<code class="language-text">::after</code>清除浮动。<a href="https://css-tricks.com/all-about-floats/#article-header-id-4" target="_blank" rel="nofollow noreferrer noopener">另外还有一些方法</a>，比如添加空的<code class="language-text">&lt;div&gt;&lt;/div&gt;</code>和设置浮动元素父元素的<code class="language-text">overflow</code>属性。与这些方法不同的是，<code class="language-text">clearfix</code>方法，只需要给父元素添加一个类，定义如下：</p>\n<h2 id="原始版"><a href="#%E5%8E%9F%E5%A7%8B%E7%89%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>原始版</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="48298709179709270000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`.clearfix:after {\n  content: \'.\'; //设置内容为空\n  visibility: hidden; //将元素隐藏\n  display: block; //将文本转为块级元素\n  height: 0; //高度为0\n  clear: both; //清除浮动\n}\n\n.clearfix {\n  zoom: 1; //为了兼容IE\n}`, `48298709179709270000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                css 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="css"><pre style="counter-reset: linenumber NaN" class="language-css line-numbers"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'.\'</span><span class="token punctuation">;</span> //设置内容为空\n  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> //将元素隐藏\n  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> //将文本转为块级元素\n  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> //高度为0\n  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> //清除浮动\n<span class="token punctuation">}</span>\n\n<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>\n  <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> //为了兼容IE\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>display:block 使生成的元素以块级元素显示,占满剩余空间；</li>\n<li>height:0 避免生成内容破坏原有布局的高度；</li>\n<li>visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互；</li>\n<li>通过 content:”.”生成内容作为最后一个元素，至于 content 里面是点还是其他都是可以的，例如 oocss 里面就有经典的 content:“XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX”,有些版本可能 content 里面内容为空,一丝冰凉是不推荐这样做的,firefox 直到 7.0 content:"" 仍然会产生额外的空隙；</li>\n<li>zoom：1 触发 IE hasLayout。</li>\n</ol>\n<p>通过分析发现，除了 clear：both 用来清除浮动的，其他代码无非都是为了隐藏掉 content 生成的内容，这也就是其他版本的闭合浮动为什么会有 font-size：0，line-height：0。</p>\n<h2 id="终极版一"><a href="#%E7%BB%88%E6%9E%81%E7%89%88%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>终极版一</h2>\n<p>相对于空标签闭合浮动的方法代码似乎还是有些冗余，通过查询发现 Unicode 字符里有一个“零宽度空格”，也就是 U+200B ，这个字符本身是不可见的，所以我们完全可以省略掉 visibility:hidden 了</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96350219400182350000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`.clearfix:after {\n  content: \'\\200B\';\n  display: block;\n  height: 0;\n  clear: both;\n}\n.clearfix {\n  *zoom: 1;\n} /*IE/7/6*/`, `96350219400182350000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                css 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="css"><pre style="counter-reset: linenumber NaN" class="language-css line-numbers"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'\\200B\'</span><span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>\n  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">/*IE/7/6*/</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="终极版二"><a href="#%E7%BB%88%E6%9E%81%E7%89%88%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>终极版二</h2>\n<p>由 Nicolas Gallagher 大湿提出来的,原文:A new micro clearfix hack，该方法也不存在 firefox 中空隙的问题。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="89368254802579500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`.clearfix:before,\n.clearfix:after {\n  content: \'\';\n  display: table; // BFC清除浮动\n}\n.clearfix:after {\n  clear: both;\n}\n.clearfix {\n  *zoom: 1; /*IE/7/6*/\n}`, `89368254802579500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                css 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="css"><pre style="counter-reset: linenumber NaN" class="language-css line-numbers"><code class="language-css"><span class="token selector">.clearfix:before,\n.clearfix:after</span> <span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> // BFC清除浮动\n<span class="token punctuation">}</span>\n<span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>\n  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>\n  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/*IE/7/6*/</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h2>\n<p>上面的方法用到了:before 伪元素，很多人对这个有些迷惑，到底我什么时候需要用 before 呢？为什么方案一没有呢？其实它是用来处理 margin 边距重叠的，由于内部元素 float 创建了 BFC，导致内部元素的 margin-top 和上一个盒子的 margin-bottom 发生叠加。如果这不是你所希望的，那么就可以加上 before，如果只是单纯的闭合浮动，after 就够了！并不是如同大漠《Clear Float》一文所说的：但只使用 clearfix:after 时在跨浏览器兼容问题会存在一个垂直边距叠加的 bug，这不是 bug，是 BFC 应该有的特性。</p>\n<p>在实际开发中，终极版一由于存在 Unicode 字符不适合内嵌 CSS 的 GB2312 编码的页面，使用原始版完全可以解决我们的需求了，终极版二等待大家的进一步实践。其他方案通过 overflow 闭合浮动，实际上已经创建了新的块级格式化上下文，这将导致其布局和相对于浮动的行为等发生一系列的变化，清除浮动只不过是一系列变化中的一个作用而已。所以为了闭合浮动去改变全局特性，这是不明智的，带来的风险就是一系列的 bug，比如 firefox 早期版本产生 focus，截断绝对定位的层等等。始终要明白，如果单单只是需要闭合浮动，overflow 就不要使用，而不是某些文章所说的“慎用”。</p>\n<p>值得一提的是，把父元素属性设置为<code class="language-text">overflow: auto</code>或<code class="language-text">overflow: hidden</code>，会使其内部的子元素形成块格式化上下文（Block Formatting Context），并且父元素会扩张自己，使其能够包围它的子元素。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://css-tricks.com/all-about-floats/" target="_blank" rel="nofollow noreferrer noopener">https://css-tricks.com/all-about-floats/</a></li>\n</ul>\n<h1 id="请阐述-z-index-属性，并说明如何形成层叠上下文（stacking-context）。"><a href="#%E8%AF%B7%E9%98%90%E8%BF%B0-z-index-%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%B9%B6%E8%AF%B4%E6%98%8E%E5%A6%82%E4%BD%95%E5%BD%A2%E6%88%90%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88stacking-context%EF%BC%89%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请阐述 z-index 属性，并说明如何形成层叠上下文（stacking context）。</h1>\n<p>CSS 中的<code class="language-text">z-index</code>属性控制重叠元素的垂直叠加顺序。<code class="language-text">z-index</code>只能影响<code class="language-text">position</code>值不是<code class="language-text">static</code>的元素。</p>\n<p>没有定义<code class="language-text">z-index</code>的值时，元素按照它们出现在 DOM 中的顺序堆叠（层级越低，出现位置越靠上）。非静态定位的元素（及其子元素）将始终覆盖静态定位（static）的元素，而不管 HTML 层次结构如何。</p>\n<p>层叠上下文是包含一组图层的元素。 在一组层叠上下文中，其子元素的<code class="language-text">z-index</code>值是相对于该父元素而不是 document root 设置的。每个层叠上下文完全独立于它的兄弟元素。如果元素 B 位于元素 A 之上，则即使元素 A 的子元素 C 具有比元素 B 更高的<code class="language-text">z-index</code>值，元素 C 也永远不会在元素 B 之上。</p>\n<p>每个层叠上下文是自包含的：当元素的内容发生层叠后，整个该元素将会在父层叠上下文中按顺序进行层叠。少数 CSS 属性会触发一个新的层叠上下文，例如<code class="language-text">opacity</code>小于 1，<code class="language-text">filter</code>不是<code class="language-text">none</code>，<code class="language-text">transform</code>不是<code class="language-text">none</code>。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://css-tricks.com/almanac/properties/z/z-index/" target="_blank" rel="nofollow noreferrer noopener">https://css-tricks.com/almanac/properties/z/z-index/</a></li>\n<li><a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/" target="_blank" rel="nofollow noreferrer noopener">https://philipwalton.com/articles/what-no-one-told-you-about-z-index/</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS<em>Positioning/Understanding</em>z<em>index/The</em>stacking_context</a></li>\n</ul>\n<h1 id="请阐述块格式化上下文（block-formatting-context）及其工作原理。"><a href="#%E8%AF%B7%E9%98%90%E8%BF%B0%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88block-formatting-context%EF%BC%89%E5%8F%8A%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请阐述块格式化上下文（Block Formatting Context）及其工作原理。</h1>\n<p>块格式上下文（BFC）是 Web 页面的可视化 CSS 渲染的部分，是块级盒布局发生的区域，也是浮动元素与其他元素交互的区域。</p>\n<h2 id="bfc-布局规则"><a href="#bfc-%E5%B8%83%E5%B1%80%E8%A7%84%E5%88%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BFC 布局规则</h2>\n<ol>\n<li>内部的 Box 会在垂直方向，一个接一个地放置。</li>\n<li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li>\n<li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC 的区域不会与 float box 重叠。</li>\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算 BFC 的高度时，浮动元素也参与计算</li>\n</ol>\n<p>一个 HTML 盒（Box）满足以下任意一条，会创建块格式化上下文：</p>\n<ul>\n<li><code class="language-text">float</code>的值不是<code class="language-text">none</code>。</li>\n<li><code class="language-text">position</code>的值不是<code class="language-text">static</code>或<code class="language-text">relative</code>。</li>\n<li><code class="language-text">display</code>的值是<code class="language-text">table-cell</code>、<code class="language-text">table-caption</code>、<code class="language-text">inline-block</code>、<code class="language-text">flex</code>、或<code class="language-text">inline-flex</code>。</li>\n<li><code class="language-text">overflow</code>的值不是<code class="language-text">visible</code>。</li>\n</ul>\n<p>在同一个 BFC 中两个相邻的块级盒在垂直方向上的边距会发生合并（collapse）。更多内容请参考<a href="https://www.sitepoint.com/web-foundations/collapsing-margins/" target="_blank" rel="nofollow noreferrer noopener">边距合并（margin collapsing）</a>。</p>\n<h2 id="用途"><a href="#%E7%94%A8%E9%80%94" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>用途</h2>\n<ol>\n<li>同一个 BFC 下外边距会发生折叠，需包含在不同的 BFC 中</li>\n<li>BFC 可以包含浮动的元素（清除浮动）</li>\n<li>BFC 可以阻止元素被浮动元素覆盖</li>\n</ol>\n<h2 id="总结-1"><a href="#%E6%80%BB%E7%BB%93-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h2>\n<p>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block<em>formatting</em>context</a></li>\n<li><a href="https://www.sitepoint.com/understanding-block-formatting-contexts-in-css/" target="_blank" rel="nofollow noreferrer noopener">https://www.sitepoint.com/understanding-block-formatting-contexts-in-css/</a></li>\n</ul>\n<h1 id="有哪些清除浮动的技术，都适用哪些情况？"><a href="#%E6%9C%89%E5%93%AA%E4%BA%9B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%8A%80%E6%9C%AF%EF%BC%8C%E9%83%BD%E9%80%82%E7%94%A8%E5%93%AA%E4%BA%9B%E6%83%85%E5%86%B5%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>有哪些清除浮动的技术，都适用哪些情况？</h1>\n<ul>\n<li>空<code class="language-text">div</code>方法：<code class="language-text">&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code>。</li>\n<li>Clearfix 方法：上文使用<code class="language-text">.clearfix</code>类已经提到。</li>\n<li><code class="language-text">overflow: auto</code>或<code class="language-text">overflow: hidden</code>方法：上文已经提到。</li>\n</ul>\n<p>在大型项目中，我会使用 Clearfix 方法，在需要的地方使用<code class="language-text">.clearfix</code>。设置<code class="language-text">overflow: hidden</code>的方法可能使其子元素显示不完整，当子元素的高度大于父元素时。</p>\n<h1 id="请解释什么是雪碧图（css-sprites），以及如何实现？"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%AA%E7%A2%A7%E5%9B%BE%EF%BC%88css-sprites%EF%BC%89%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释什么是雪碧图（css sprites），以及如何实现？</h1>\n<p>雪碧图是把多张图片整合到一张上的图片。它被运用在众多使用了很多小图标的网站上（Gmail 在使用）。实现方法：</p>\n<ol>\n<li>使用生成器将多张图片打包成一张雪碧图，并为其生成合适的 CSS。</li>\n<li>每张图片都有相应的 CSS 类，该类定义了<code class="language-text">background-image</code>、<code class="language-text">background-position</code>和<code class="language-text">background-size</code>属性。</li>\n<li>使用图片时，将相应的类添加到你的元素中。</li>\n</ol>\n<p>好处：</p>\n<ul>\n<li>减少加载多张图片的 HTTP 请求数（一张雪碧图只需要一个请求）。但是对于 HTTP2 而言，加载多张图片不再是问题。</li>\n<li>提前加载资源，防止在需要时才在开始下载引发的问题，比如只出现在<code class="language-text">:hover</code>伪类中的图片，不会出现闪烁。</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://css-tricks.com/css-sprites/" target="_blank" rel="nofollow noreferrer noopener">https://css-tricks.com/css-sprites/</a></li>\n</ul>\n<h1 id="如何解决不同浏览器的样式兼容性问题？"><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%A0%B7%E5%BC%8F%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何解决不同浏览器的样式兼容性问题？</h1>\n<ul>\n<li>在确定问题原因和有问题的浏览器后，使用单独的样式表，仅供出现问题的浏览器加载。这种方法需要使用服务器端渲染。</li>\n<li>使用已经处理好此类问题的库，比如 Bootstrap。</li>\n<li>使用 <code class="language-text">autoprefixer</code> 自动生成 CSS 属性前缀。</li>\n<li>使用 Reset CSS 或 Normalize.css。</li>\n</ul>\n<h1 id="如何为功能受限的浏览器提供页面？-使用什么样的技术和流程？"><a href="#%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8A%9F%E8%83%BD%E5%8F%97%E9%99%90%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%90%E4%BE%9B%E9%A1%B5%E9%9D%A2%EF%BC%9F-%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E6%B5%81%E7%A8%8B%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何为功能受限的浏览器提供页面？ 使用什么样的技术和流程？</h1>\n<ul>\n<li>优雅的降级：为现代浏览器构建应用，同时确保它在旧版浏览器中正常运行。</li>\n<li>渐进式增强：构建基于用户体验的应用，但在浏览器支持时添加新增功能。</li>\n<li>利用 <a href="https://caniuse.com/" target="_blank" rel="nofollow noreferrer noopener">caniuse.com</a> 检查特性支持。</li>\n<li>使用 <code class="language-text">autoprefixer</code> 自动生成 CSS 属性前缀。</li>\n<li>使用 <a href="https://modernizr.com/" target="_blank" rel="nofollow noreferrer noopener">Modernizr</a>进行特性检测。</li>\n</ul>\n<h1 id="有什么不同的方式可以隐藏内容（使其仅适用于屏幕阅读器）？"><a href="#%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8F%AF%E4%BB%A5%E9%9A%90%E8%97%8F%E5%86%85%E5%AE%B9%EF%BC%88%E4%BD%BF%E5%85%B6%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E%E5%B1%8F%E5%B9%95%E9%98%85%E8%AF%BB%E5%99%A8%EF%BC%89%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>有什么不同的方式可以隐藏内容（使其仅适用于屏幕阅读器）？</h1>\n<p>这些方法与可访问性（a11y）有关。</p>\n<ul>\n<li><code class="language-text">visibility: hidden</code>：元素仍然在页面流中，并占用空间。</li>\n<li><code class="language-text">width: 0; height: 0</code>：使元素不占用屏幕上的任何空间，导致不显示它。</li>\n<li><code class="language-text">position: absolute; left: -99999px</code>： 将它置于屏幕之外。</li>\n<li><code class="language-text">text-indent: -9999px</code>：这只适用于<code class="language-text">block</code>元素中的文本。</li>\n<li>Metadata： 例如通过使用 Schema.org，RDF 和 JSON-LD。</li>\n<li>WAI-ARIA：如何增加网页可访问性的 W3C 技术规范。</li>\n</ul>\n<p>即使 WAI-ARIA 是理想的解决方案，我也会采用绝对定位方法，因为它具有最少的注意事项，适用于大多数元素，而且使用起来非常简单。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.w3.org/TR/wai-aria-1.1/" target="_blank" rel="nofollow noreferrer noopener">https://www.w3.org/TR/wai-aria-1.1/</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA</a></li>\n<li><a href="http://a11yproject.com/" target="_blank" rel="nofollow noreferrer noopener">http://a11yproject.com/</a></li>\n</ul>\n<h1 id="你使用过栅格系统吗？偏爱哪一个？"><a href="#%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F%E5%90%97%EF%BC%9F%E5%81%8F%E7%88%B1%E5%93%AA%E4%B8%80%E4%B8%AA%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你使用过栅格系统吗？偏爱哪一个？</h1>\n<p>我使用 <code class="language-text">float</code>-based 栅格系统，因为它相比 flex、grid 系统，拥有更多浏览器的支持。它已经在 Bootstrap 中使用多年，并且已经被证明是可行的。</p>\n<h1 id="你是否使用过媒体查询或移动优先的布局？"><a href="#%E4%BD%A0%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E8%BF%87%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E6%88%96%E7%A7%BB%E5%8A%A8%E4%BC%98%E5%85%88%E7%9A%84%E5%B8%83%E5%B1%80%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你是否使用过媒体查询或移动优先的布局？</h1>\n<p>是的，一个例子就是根据窗口的尺寸改变导航的样式。</p>\n<h1 id="你熟悉制作-svg-吗？"><a href="#%E4%BD%A0%E7%86%9F%E6%82%89%E5%88%B6%E4%BD%9C-svg-%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你熟悉制作 SVG 吗？</h1>\n<p>不好意思，不熟悉。</p>\n<h1 id="除了-screen，你还能说出一个-media-属性的例子吗？"><a href="#%E9%99%A4%E4%BA%86-screen%EF%BC%8C%E4%BD%A0%E8%BF%98%E8%83%BD%E8%AF%B4%E5%87%BA%E4%B8%80%E4%B8%AA-media-%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BE%8B%E5%AD%90%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>除了 screen，你还能说出一个 @media 属性的例子吗？</h1>\n<h1 id="编写高效的-css-应该注意什么？"><a href="#%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88%E7%9A%84-css-%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>编写高效的 CSS 应该注意什么？</h1>\n<p>首先，浏览器从最右边的选择器，即关键选择器（key selector），向左依次匹配。根据关键选择器，浏览器从 DOM 中筛选出元素，然后向上遍历被选元素的父元素，判断是否匹配。选择器匹配语句链越短，浏览器的匹配速度越快。避免使用标签和通用选择器作为关键选择器，因为它们会匹配大量的元素，浏览器必须要进行大量的工作，去判断这些元素的父元素们是否匹配。</p>\n<p><a href="https://bem.info/" target="_blank" rel="nofollow noreferrer noopener">BEM (Block Element Modifier)</a>原则上建议为独立的 CSS 类命名，并且在需要层级关系时，将关系也体现在命名中，这自然会使选择器高效且易于覆盖。</p>\n<p>搞清楚哪些 CSS 属性会触发重新布局（reflow）、重绘（repaint）和合成（compositing）。在写样式时，避免触发重新布局的可能。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="nofollow noreferrer noopener">https://developers.google.com/web/fundamentals/performance/rendering/</a></li>\n<li><a href="https://csstriggers.com/" target="_blank" rel="nofollow noreferrer noopener">https://csstriggers.com/</a></li>\n</ul>\n<h1 id="使用-css-预处理的优缺点分别是什么？"><a href="#%E4%BD%BF%E7%94%A8-css-%E9%A2%84%E5%A4%84%E7%90%86%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 CSS 预处理的优缺点分别是什么？</h1>\n<p>优点：</p>\n<ul>\n<li>提高 CSS 可维护性。</li>\n<li>易于编写嵌套选择器。</li>\n<li>引入变量，增添主题功能。可以在不同的项目中共享主题文件。</li>\n<li>通过混合（Mixins）生成重复的 CSS。</li>\n<li>将代码分割成多个文件。不进行预处理的 CSS，虽然也可以分割成多个文件，但需要建立多个 HTTP 请求加载这些文件。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要预处理工具。</li>\n<li>重新编译的时间可能会很慢。</li>\n</ul>\n<h1 id="对于你使用过的-css-预处理，说说喜欢和不喜欢的地方？"><a href="#%E5%AF%B9%E4%BA%8E%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84-css-%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%8C%E8%AF%B4%E8%AF%B4%E5%96%9C%E6%AC%A2%E5%92%8C%E4%B8%8D%E5%96%9C%E6%AC%A2%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>对于你使用过的 CSS 预处理，说说喜欢和不喜欢的地方？</h1>\n<p>喜欢：</p>\n<ul>\n<li>绝大部分优点上题以及提过。</li>\n<li>Less 用 JavaScript 实现，与 NodeJS 高度结合。</li>\n</ul>\n<p><strong>Dislikes:</strong></p>\n<ul>\n<li>我通过<code class="language-text">node-sass</code>使用 Sass，它用 C ++ 编写的 LibSass 绑定。在 Node 版本切换时，我必须经常重新编译。</li>\n<li>Less 中，变量名称以<code class="language-text">@</code>作为前缀，容易与 CSS 关键字混淆，如<code class="language-text">@media</code>、<code class="language-text">@import</code>和<code class="language-text">@font-face</code>。</li>\n</ul>\n<h1 id="如何实现一个使用非标准字体的网页设计？"><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8%E9%9D%9E%E6%A0%87%E5%87%86%E5%AD%97%E4%BD%93%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何实现一个使用非标准字体的网页设计？</h1>\n<p>使用<code class="language-text">@font-face</code>并为不同的<code class="language-text">font-weight</code>定义<code class="language-text">font-family</code>。</p>\n<h1 id="解释浏览器如何确定哪些元素与-css-选择器匹配。"><a href="#%E8%A7%A3%E9%87%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E5%93%AA%E4%BA%9B%E5%85%83%E7%B4%A0%E4%B8%8E-css-%E9%80%89%E6%8B%A9%E5%99%A8%E5%8C%B9%E9%85%8D%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解释浏览器如何确定哪些元素与 CSS 选择器匹配。</h1>\n<p>这部分与上面关于编写高效的 CSS 有关。浏览器从最右边的选择器（关键选择器）根据关键选择器，浏览器从 DOM 中筛选出元素，然后向上遍历被选元素的父元素，判断是否匹配。选择器匹配语句链越短，浏览器的匹配速度越快。</p>\n<p>例如，对于形如<code class="language-text">p span</code>的选择器，浏览器首先找到所有<code class="language-text">&lt;span&gt;</code>元素，并遍历它的父元素直到根元素以找到<code class="language-text">&lt;p&gt;</code>元素。对于特定的<code class="language-text">&lt;span&gt;</code>，只要找到一个<code class="language-text">&lt;p&gt;</code>，就知道’<span>`已经匹配并停止继续匹配。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left" target="_blank" rel="nofollow noreferrer noopener">https://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left</a></li>\n</ul>\n<h1 id="描述伪元素及其用途。"><a href="#%E6%8F%8F%E8%BF%B0%E4%BC%AA%E5%85%83%E7%B4%A0%E5%8F%8A%E5%85%B6%E7%94%A8%E9%80%94%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>描述伪元素及其用途。</h1>\n<p>CSS 伪元素是添加到选择器的关键字，去选择元素的特定部分。它们可以用于装饰（<code class="language-text">:first-line</code>，<code class="language-text">:first-letter</code>）或将元素添加到标记中（与 content:…组合），而不必修改标记（<code class="language-text">:before</code>，<code class="language-text">:after</code>）。</p>\n<ul>\n<li><code class="language-text">:first-line</code>和<code class="language-text">:first-letter</code>可以用来修饰文字。</li>\n<li>上面提到的<code class="language-text">.clearfix</code>方法中，使用<code class="language-text">clear: both</code>来添加不占空间的元素。</li>\n<li>使用<code class="language-text">:before</code>和<code class="language-text">after</code>展示提示中的三角箭头。鼓励关注点分离，因为三角被视为样式的一部分，而不是真正的 DOM。如果不使用额外的 HTML 元素，只用 CSS 样式绘制三角形是不太可能的。</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://css-tricks.com/almanac/selectors/a/after-and-before/" target="_blank" rel="nofollow noreferrer noopener">https://css-tricks.com/almanac/selectors/a/after-and-before/</a></li>\n</ul>\n<h1 id="说说你对盒模型的理解，以及如何告知浏览器使用不同的盒模型渲染布局。"><a href="#%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%91%8A%E7%9F%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%B8%B2%E6%9F%93%E5%B8%83%E5%B1%80%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>说说你对盒模型的理解，以及如何告知浏览器使用不同的盒模型渲染布局。</h1>\n<p>CSS 盒模型描述了以文档树中的元素而生成的矩形框，并根据排版模式进行布局。每个盒子都有一个内容区域（例如文本，图像等）以及周围可选的<code class="language-text">padding</code>、<code class="language-text">border</code>和<code class="language-text">margin</code>区域。</p>\n<p>CSS 盒模型负责计算：</p>\n<ul>\n<li>块级元素占用多少空间。</li>\n<li>边框是否重叠，边距是否合并。</li>\n<li>盒子的尺寸。</li>\n</ul>\n<p>盒模型有以下规则：</p>\n<ul>\n<li>块级元素的大小由<code class="language-text">width</code>、<code class="language-text">height</code>、<code class="language-text">padding</code>、<code class="language-text">border</code>和<code class="language-text">margin</code>决定。</li>\n<li>如果没有指定<code class="language-text">height</code>，则块级元素的高度等于其包含子元素的内容高度加上<code class="language-text">padding</code>（除非有浮动元素，请参阅下文）。</li>\n<li>如果没有指定<code class="language-text">width</code>，则非浮动块级元素的宽度等于其父元素的宽度减去父元素的<code class="language-text">padding</code>。</li>\n<li>元素的<code class="language-text">height</code>是由内容的<code class="language-text">height</code>来计算的。</li>\n<li>元素的<code class="language-text">width</code>是由内容的<code class="language-text">width</code>来计算的。</li>\n<li>默认情况下，<code class="language-text">padding</code>和<code class="language-text">border</code>不是元素<code class="language-text">width</code>和<code class="language-text">height</code>的组成部分。</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.smashingmagazine.com/2010/06/the-principles-of-cross-browser-css-coding/#understand-the-css-box-model" target="_blank" rel="nofollow noreferrer noopener">https://www.smashingmagazine.com/2010/06/the-principles-of-cross-browser-css-coding/#understand-the-css-box-model</a></li>\n</ul>\n<h1 id="--box-sizing-border-box-会产生怎样的效果？"><a href="#--box-sizing-border-box-%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%80%8E%E6%A0%B7%E7%9A%84%E6%95%88%E6%9E%9C%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>* { box-sizing: border-box; }会产生怎样的效果？</h1>\n<ul>\n<li>元素默认应用了<code class="language-text">box-sizing: content-box</code>，元素的宽高只会决定内容（content）的大小。</li>\n<li><code class="language-text">box-sizing: border-box</code>改变计算元素<code class="language-text">width</code>和<code class="language-text">height</code>的方式，<code class="language-text">border</code>和<code class="language-text">padding</code>的大小也将计算在内。</li>\n<li>元素的<code class="language-text">height</code> = 内容（content）的高度 + 垂直方向的<code class="language-text">padding</code> + 垂直方向<code class="language-text">border</code>的宽度</li>\n<li>元素的<code class="language-text">width</code> = 内容（content）的宽度 + 水平方向的<code class="language-text">padding</code> + 水平方向<code class="language-text">border</code>的宽度</li>\n</ul>\n<h1 id="display-的属性值都有哪些？"><a href="#display-%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>display 的属性值都有哪些？</h1>\n<ul>\n<li><code class="language-text">none</code>, <code class="language-text">block</code>, <code class="language-text">inline</code>, <code class="language-text">inline-block</code>, <code class="language-text">table</code>, <code class="language-text">table-row</code>, <code class="language-text">table-cell</code>, <code class="language-text">list-item</code>.</li>\n</ul>\n<h1 id="inline-和-inline-block-有什么区别？"><a href="#inline-%E5%92%8C-inline-block-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>inline 和 inline-block 有什么区别？</h1>\n<p>我把<code class="language-text">block</code>也加入其中，为了获得更好的比较。</p>\n<table>\n<thead>\n<tr>\n<th align="center"></th>\n<th align="center"><code class="language-text">block</code></th>\n<th align="center"><code class="language-text">inline-block</code></th>\n<th align="center"><code class="language-text">inline</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">大小</td>\n<td align="center">填充其父容器的宽度。</td>\n<td align="center">取决于内容。</td>\n<td align="center">取决于内容。</td>\n</tr>\n<tr>\n<td align="center">定位</td>\n<td align="center">从新的一行开始，并且不允许旁边有 HTML 元素（除非是\n<code class="language-text">float</code>\n）</td>\n<td align="center">与其他内容一起流动，并允许旁边有其他元素。</td>\n<td align="center">与其他内容一起流动，并允许旁边有其他元素。</td>\n</tr>\n<tr>\n<td align="center">能否设置\n<code class="language-text">width</code>\n和\n<code class="language-text">height</code></td>\n<td align="center">能</td>\n<td align="center">能</td>\n<td align="center">不能。 设置会被忽略。</td>\n</tr>\n<tr>\n<td align="center">可以使用\n<code class="language-text">vertical-align</code>\n对齐</td>\n<td align="center">不可以</td>\n<td align="center">可以</td>\n<td align="center">可以</td>\n</tr>\n<tr>\n<td align="center">边距（margin）和填充（padding）</td>\n<td align="center">各个方向都存在</td>\n<td align="center">各个方向都存在</td>\n<td align="center">只有水平方向存在。垂直方向会被忽略。 尽管\n<code class="language-text">border</code>\n和\n<code class="language-text">padding</code>\n在\n<code class="language-text">content</code>\n周围，但垂直方向上的空间取决于’line-height’</td>\n</tr>\n<tr>\n<td align="center">浮动（float）</td>\n<td align="center">-</td>\n<td align="center">-</td>\n<td align="center">就像一个\n<code class="language-text">block</code>\n元素，可以设置垂直边距和填充。</td>\n</tr>\n</tbody>\n</table>\n<h1 id="relative、fixed、absolute-和-static-四种定位有什么区别？"><a href="#relative%E3%80%81fixed%E3%80%81absolute-%E5%92%8C-static-%E5%9B%9B%E7%A7%8D%E5%AE%9A%E4%BD%8D%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>relative、fixed、absolute 和 static 四种定位有什么区别？</h1>\n<p>经过定位的元素，其<code class="language-text">position</code>属性值必然是<code class="language-text">relative</code>、<code class="language-text">absolute</code>、<code class="language-text">fixed</code>或<code class="language-text">sticky</code>。</p>\n<ul>\n<li><code class="language-text">static</code>：默认定位属性值。该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</li>\n<li><code class="language-text">relative</code>：该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。</li>\n<li><code class="language-text">absolute</code>：不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</li>\n<li><code class="language-text">fixed</code>：不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。</li>\n<li><code class="language-text">sticky</code>：盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 <code class="language-text">table</code> 时），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。<code class="language-text">position: sticky</code> 对 <code class="language-text">table</code> 元素的效果与 <code class="language-text">position: relative</code> 相同。</li>\n<li>粘性定位是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en/docs/Web/CSS/position" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en/docs/Web/CSS/position</a></li>\n</ul>\n<h1 id="你使用过哪些现有的-css-框架？你是如何改进它们的？"><a href="#%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%E7%8E%B0%E6%9C%89%E7%9A%84-css-%E6%A1%86%E6%9E%B6%EF%BC%9F%E4%BD%A0%E6%98%AF%E5%A6%82%E4%BD%95%E6%94%B9%E8%BF%9B%E5%AE%83%E4%BB%AC%E7%9A%84%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你使用过哪些现有的 CSS 框架？你是如何改进它们的？</h1>\n<ul>\n<li><strong>Bootstrap</strong>： 更新周期缓慢。Bootstrap 4 已经处于 alpha 版本将近两年了。添加了在页面中广泛使用的微调按钮组件。</li>\n<li><strong>Semantic UI</strong>：源代码结构使得自定义主题很难理解。非常规主题系统的使用体验很差。外部库的路径需要硬编码（hard code）配置。变量重新赋值没有 Bootstrap 设计得好。</li>\n<li><strong>Bulma</strong>： 需要很多非语义的类和标记，显得很多余。不向后兼容，以至于升级版本后，会破坏应用的正常运行。</li>\n</ul>\n<h1 id="你了解-css-flexbox-和-grid-吗？"><a href="#%E4%BD%A0%E4%BA%86%E8%A7%A3-css-flexbox-%E5%92%8C-grid-%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你了解 CSS Flexbox 和 Grid 吗？</h1>\n<p>了解。Flexbox 主要用于一维布局，而 Grid 则用于二维布局。</p>\n<p>Flexbox 解决了 CSS 中的许多常见问题，例如容器中元素的垂直居中，粘性定位（sticky）的页脚等。Bootstrap 和 Bulma 基于 Flexbox，这是创建布局的推荐方式。我之前曾使用过 Flexbox，但在使用<code class="language-text">flex-grow</code>时遇到了一些浏览器不兼容问题（Safari），我必须使用<code class="language-text">inline-blocks</code>和手动计算百分比宽度，来重写我的代码，这种体验不是很好。</p>\n<p>Grid 创建基于栅格的布局，是迄今为止最直观的方法（最好是！），但目前浏览器支持并不广泛。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://philipwalton.github.io/solved-by-flexbox/" target="_blank" rel="nofollow noreferrer noopener">https://philipwalton.github.io/solved-by-flexbox/</a></li>\n</ul>\n<h1 id="请解释在编写网站时，响应式与移动优先的区别。"><a href="#%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%9C%A8%E7%BC%96%E5%86%99%E7%BD%91%E7%AB%99%E6%97%B6%EF%BC%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E4%B8%8E%E7%A7%BB%E5%8A%A8%E4%BC%98%E5%85%88%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请解释在编写网站时，响应式与移动优先的区别。</h1>\n<h1 id="响应式设计与自适应设计有何不同？"><a href="#%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E8%87%AA%E9%80%82%E5%BA%94%E8%AE%BE%E8%AE%A1%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>响应式设计与自适应设计有何不同？</h1>\n<p>响应式设计和自适应设计都以提高不同设备间的用户体验为目标，根据视窗大小、分辨率、使用环境和控制方式等参数进行优化调整。</p>\n<p>响应式设计的适应性原则：网站应该凭借一份代码，在各种设备上都有良好的显示和使用效果。响应式网站通过使用媒体查询，自适应栅格和响应式图片，基于多种因素进行变化，创造出优良的用户体验。就像一个球通过膨胀和收缩，来适应不同大小的篮圈。</p>\n<p>自适应设计更像是渐进式增强的现代解释。与响应式设计单一地去适配不同，自适应设计通过检测设备和其他特征，从早已定义好的一系列视窗大小和其他特性中，选出最恰当的功能和布局。与使用一个球去穿过各种的篮筐不同，自适应设计允许使用多个球，然后根据不同的篮筐大小，去选择最合适的一个。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Archive/Apps/Design/UI_layout_basics/Responsive_design_versus_adaptive_design" target="_blank" rel="nofollow noreferrer noopener">https://developer.mozilla.org/en-US/docs/Archive/Apps/Design/UI<em>layout</em>basics/Responsive<em>design</em>versus<em>adaptive</em>design</a></li>\n<li><a href="http://mediumwell.com/responsive-adaptive-mobile/" target="_blank" rel="nofollow noreferrer noopener">http://mediumwell.com/responsive-adaptive-mobile/</a></li>\n<li><a href="https://css-tricks.com/the-difference-between-responsive-and-adaptive-design/" target="_blank" rel="nofollow noreferrer noopener">https://css-tricks.com/the-difference-between-responsive-and-adaptive-design/</a></li>\n</ul>\n<h1 id="你有没有使用过视网膜分辨率的图形？当中使用什么技术？"><a href="#%E4%BD%A0%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E8%BF%87%E8%A7%86%E7%BD%91%E8%86%9C%E5%88%86%E8%BE%A8%E7%8E%87%E7%9A%84%E5%9B%BE%E5%BD%A2%EF%BC%9F%E5%BD%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%8A%80%E6%9C%AF%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你有没有使用过视网膜分辨率的图形？当中使用什么技术？</h1>\n<p>我倾向于使用更高分辨率的图形（显示尺寸的两倍）来处理视网膜显示。更好的方法是使用媒体查询，像<code class="language-text">@media only screen and (min-device-pixel-ratio: 2) { ... }</code>，然后改变<code class="language-text">background-image</code>。</p>\n<p>对于图标类的图形，我会尽可能使用 svg 和图标字体，因为它们在任何分辨率下，都能被渲染得十分清晰。</p>\n<p>还有一种方法是，在检查了<code class="language-text">window.devicePixelRatio</code>的值后，利用 JavaScript 将<code class="language-text">&lt;img&gt;</code>的<code class="language-text">src</code>属性修改，用更高分辨率的版本进行替换。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.sitepoint.com/css-techniques-for-retina-displays/" target="_blank" rel="nofollow noreferrer noopener">https://www.sitepoint.com/css-techniques-for-retina-displays/</a></li>\n</ul>\n<h1 id="什么情况下，用-translate-而不用绝对定位？什么时候，情况相反。"><a href="#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E7%94%A8-translate-%E8%80%8C%E4%B8%8D%E7%94%A8%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%EF%BC%9F%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%EF%BC%8C%E6%83%85%E5%86%B5%E7%9B%B8%E5%8F%8D%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么情况下，用 translate() 而不用绝对定位？什么时候，情况相反。</h1>\n<p><code class="language-text">translate()</code>是<code class="language-text">transform</code>的一个值。改变<code class="language-text">transform</code>或<code class="language-text">opacity</code>不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。而改变绝对定位会触发重新布局，进而触发重绘和复合。<code class="language-text">transform</code>使浏览器为元素创建一个 GPU 图层，但改变绝对定位会使用到 CPU。 因此<code class="language-text">translate()</code>更高效，可以缩短平滑动画的绘制时间。</p>\n<p>当使用<code class="language-text">translate()</code>时，元素仍然占据其原始空间（有点像<code class="language-text">position：relative</code>），这与改变绝对定位不同。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href="https://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="nofollow noreferrer noopener">https://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/</a></li>\n</ul>\n<h1 id="其他答案"><a href="#%E5%85%B6%E4%BB%96%E7%AD%94%E6%A1%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>其他答案</h1>\n<ul>\n<li><a href="https://neal.codes/blog/front-end-interview-css-questions" target="_blank" rel="nofollow noreferrer noopener">https://neal.codes/blog/front-end-interview-css-questions</a></li>\n<li><a href="https://quizlet.com/28293152/front-end-interview-questions-css-flash-cards/" target="_blank" rel="nofollow noreferrer noopener">https://quizlet.com/28293152/front-end-interview-questions-css-flash-cards/</a></li>\n<li><a href="http://peterdoes.it/2015/12/03/a-personal-exercise-front-end-job-interview-questions-and-my-answers-all/" target="_blank" rel="nofollow noreferrer noopener">http://peterdoes.it/2015/12/03/a-personal-exercise-front-end-job-interview-questions-and-my-answers-all/</a></li>\n</ul>',
id:"/github/workspace/blog/前端面试题CSS部分/index.md absPath of file >>> MarkdownRemark",timeToRead:22,frontmatter:{date:"2018-04-12 17:44:07",path:"/front-end-interview-css/",tags:"面试, CSS, 前端",title:"前端面试题CSS部分",draft:null}},{excerpt:"DOCTYPE 有什么用？ 版本一 在 HTML 中 doctype 有两个主要目的。 对文档进行有效性验证: 它告诉用户代理和校验器这个文档是按照什么 DTD 写的。这个动作是被动的，每次页面加载时，浏览器并不会下载 DTD 并检查合法性，只有当手动校验页面时才启用。 决定浏览器的呈现模式: 对于实际操作，通知浏览器读取文档时用哪种解析算法。如果没有写，则浏览器则根据自身的规则对代码进行解析，可能会严重影响 HTML 排版布局。浏览器有三种方式解析 HTML…",html:'<h2 id="doctype-有什么用？"><a href="#doctype-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DOCTYPE 有什么用？</h2>\n<h3 id="版本一"><a href="#%E7%89%88%E6%9C%AC%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本一</h3>\n<p>在 HTML 中 doctype 有两个主要目的。</p>\n<ul>\n<li>对文档进行有效性验证: 它告诉用户代理和校验器这个文档是按照什么 DTD 写的。这个动作是被动的，每次页面加载时，浏览器并不会下载 DTD 并检查合法性，只有当手动校验页面时才启用。</li>\n<li>\n<p>决定浏览器的呈现模式:<br>\n对于实际操作，通知浏览器读取文档时用哪种解析算法。如果没有写，则浏览器则根据自身的规则对代码进行解析，可能会严重影响 HTML 排版布局。浏览器有三种方式解析 HTML 文档。</p>\n<ul>\n<li>非怪异（标准）模式</li>\n<li>怪异模式</li>\n<li>部分怪异（近乎标准）模式</li>\n</ul>\n</li>\n</ul>\n<h3 id="版本二"><a href="#%E7%89%88%E6%9C%AC%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本二</h3>\n<ol>\n<li>\n<!doctype>声明必须处于HTML文档的头部，在`<html>`标签之前，HTML5中不区分大小写\n</li>\n<li>\n<!doctype>声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令\n</li>\n<li>现代浏览器的 html 布局引擎通过检查 doctype 决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型</li>\n<li>在 HTML4.01 中&#x3C;!doctype>声明指向一个 DTD，由于 HTML4.01 基于 SGML，所以 DTD 指定了标记规则以保证浏览器正确渲染内容</li>\n<li>HTML5 不基于 SGML，所以不用指定 DTD</li>\n</ol>\n<p><strong>常见 doctype：</strong></p>\n<ol>\n<li><code class="language-text">HTML4.01 strict</code>：不允许使用表现性、废弃元素（如 font）以及 frameset。声明：<!DOCTYPE HTML PUBLIC "`-//W3C//DTD HTML 4.01//EN`" "`http://www.w3.org/TR/html4/strict.dtd`"></li>\n<li><code class="language-text">HTML4.01 Transitional</code>：允许使用表现性、废弃元素（如 font），不允许使用 frameset。声明：<!DOCTYPE HTML PUBLIC "`-//W3C//DTD HTML 4.01 Transitional//EN`" "`http://www.w3.org/TR/html4/loose.dtd`"></li>\n<li><code class="language-text">HTML4.01 Frameset</code>：允许表现性元素，废弃元素以及 frameset。声明：<!DOCTYPE HTML PUBLIC "`-//W3C//DTD HTML 4.01 Frameset//EN`" "`http://www.w3.org/TR/html4/frameset.dtd`"></li>\n<li><code class="language-text">XHTML1.0 Strict</code>：不使用允许表现性、废弃元素以及 frameset。文档必须是结构良好的 XML 文档。声明：<!DOCTYPE html PUBLIC "`-//W3C//DTD XHTML 1.0 Strict//EN`" "`http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd`"></li>\n<li><code class="language-text">XHTML1.0 Transitional</code>：允许使用表现性、废弃元素，不允许 frameset，文档必须是结构良好的 XMl 文档。声明： <!DOCTYPE html PUBLIC "`-//W3C//DTD XHTML 1.0 Transitional//EN`" "`http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd`"></li>\n<li><code class="language-text">XHTML 1.0 Frameset</code>：允许使用表现性、废弃元素以及 frameset，文档必须是结构良好的 XML 文档。声明：<!DOCTYPE html PUBLIC "`-//W3C//DTD XHTML 1.0 Frameset//EN`" "`http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd`"></li>\n<li><code class="language-text">HTML 5</code>: <!doctype html></li>\n</ol>\n<h2 id="如何提供包含多种语言内容的页面？"><a href="#%E5%A6%82%E4%BD%95%E6%8F%90%E4%BE%9B%E5%8C%85%E5%90%AB%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80%E5%86%85%E5%AE%B9%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何提供包含多种语言内容的页面？</h2>\n<p>这个问题有点问得含糊其辞，我认为这是在询问最常见的情况：如何提供包含多种语言内容的页面，并保证页面内容语言的一致性。</p>\n<p>当客户端向服务器发送 HTTP 请求时，通常会发送有关语言首选项的信息，比如使用 Accept-Language 请求头。如果替换语言存在，服务器可以利用该信息返回与之相匹配的 HTML 文档。返回的 HTML 文档还应在<code class="language-text">&lt;html&gt;</code>标签中声明 lang 属性，比如<code class="language-text">&lt;html lang=&quot;en&quot;&gt;...&lt;/html&gt;</code></p>\n<p>在后台中，HTML 将包含 i18n 占位符和待以替换的内容，这些按照不同语言，以 YML 或 JSON 格式存储。然后，服务器将动态生成指定语言内容的 HTML 页面。整个过程通常需要借助后台框架实现。</p>\n<h2 id="在设计开发多语言网站时，需要留心哪些事情？"><a href="#%E5%9C%A8%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BD%91%E7%AB%99%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E7%95%99%E5%BF%83%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在设计开发多语言网站时，需要留心哪些事情？</h2>\n<ul>\n<li>在 HTML 中使用 lang 属性。</li>\n<li>引导用户切换到自己的母语——让用户能够轻松地切换到自己的国家或语言，而不用麻烦。</li>\n<li>在图片中展示文本会阻碍网站规模增长——把文本放在图片中展示，仍然是一种非常流行的方式。这样做可以在所有终端上，都能显示出美观的非系统字体。然而，为了翻译图片中的文本，需要为每种语言单独创建对应的图片，这种做法很容易在图片数量不断增长的过程中失控。</li>\n<li>限制词语或句子的长度——网页内容在使用其他语言表述时，文字长度会发生变化。设计时，需要警惕文字长度溢出布局的问题，最好不要使用受文字长度影响较大的设计。比如标题、标签、按钮的设计，往往很受文字长度影响，这些设计中的文字与正文或评论部分不同，一般不可以自由换行。</li>\n<li>注意颜色的使用——颜色在不同的语言和文化中，意义和感受是不同的。设计时应该使用恰当的颜色。</li>\n<li>日期和货币的格式化——日期在不同的国家和地区，会以不同的方式显示。比如美国的日期格式是<code class="language-text">May 31, 2012</code>，而在欧洲部分地区，日期格式是<code class="language-text">31 May 2012</code>。</li>\n<li>不要使用连接的翻译字符串——不要做类似这样的事情，比如“今天的日期是”+具体日期。这样做可能会打乱其他语言的语序。替代方案是，为每种语言编写带变量替换的模版字符串。</li>\n<li>注意语言阅读的方向——在英语中，文字是从左向右阅读的；而在传统日语中，文字是从右向左阅读的。</li>\n</ul>\n<h2 id="什么是-data-属性？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-data-%E5%B1%9E%E6%80%A7%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是 data-属性？</h2>\n<h3 id="版本一-1"><a href="#%E7%89%88%E6%9C%AC%E4%B8%80-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本一</h3>\n<p>在 JavaScript 框架变得流行之前，前端开发者经常使用 data-属性，把额外数据存储在 DOM 自身中。当时没有其他 Hack 手段（比如使用非标准属性或 DOM 上额外属性）。这样做是为了将自定义数据存储到页面或应用中，对此没有其他更适当的属性或元素。</p>\n<p>而现在，不鼓励使用 data-属性。原因之一是，用户可以通过在浏览器中利用检查元素，轻松地修改属性值，借此修改数据。数据模型最好存储在 JavaScript 本身中，并利用框架提供的数据绑定，使之与 DOM 保持更新。</p>\n<h3 id="版本二-1"><a href="#%E7%89%88%E6%9C%AC%E4%BA%8C-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本二</h3>\n<p>data- 为前端开发者提供自定义的属性，这些属性集可以通过对象的 dataset 属性获取，不支持该属性的浏览器可以通过 getAttribute 方法获取:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15763720678339533000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<div data-author=&quot;david&quot; data-time=&quot;2011-06-20&quot; data-comment-num=&quot;10&quot;>...</div>\n\ndiv.dataset.commentNum; // 10`, `15763720678339533000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-author</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>david<span class="token punctuation">"</span></span> <span class="token attr-name">data-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2011-06-20<span class="token punctuation">"</span></span> <span class="token attr-name">data-comment-num</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\ndiv.dataset.commentNum; // 10</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>需要注意的是，data- 之后的以连字符分割的多个单词组成的属性，获取的时候使用驼峰风格。并不是所有的浏览器都支持 .dataset 属性，测试的浏览器中只有 Chrome 和 Opera 支持。</p>\n<p>即：当没有合适的属性和元素时，自定义的 data 属性是能够存储页面或 App 的私有的自定义数据。</p>\n<h2 id="将-html5-看作成开放的网络平台，什么是-html5-的基本构件（building-block）？"><a href="#%E5%B0%86-html5-%E7%9C%8B%E4%BD%9C%E6%88%90%E5%BC%80%E6%94%BE%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF-html5-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%84%E4%BB%B6%EF%BC%88building-block%EF%BC%89%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>将 HTML5 看作成开放的网络平台，什么是 HTML5 的基本构件（building block）？</h2>\n<h3 id="版本一-2"><a href="#%E7%89%88%E6%9C%AC%E4%B8%80-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本一</h3>\n<ul>\n<li>连接 - 提供新的方式与服务器通信。</li>\n<li>离线和存储 - 允许网页在本地存储数据并有效地离线运行。</li>\n<li>多媒体 - 在 Open Web 中，视频和音频被视为一等公民（first-class citizens）。</li>\n<li>2D/3D 图形和特效 - 提供更多种演示选项。</li>\n<li>性能和集成 - 提供更快的访问速度和性能更好的计算机硬件。</li>\n<li>设备访问 - 允许使用各种输入、输出设备。</li>\n<li>外观 - 可以开发丰富的主题。</li>\n</ul>\n<h3 id="版本二-2"><a href="#%E7%89%88%E6%9C%AC%E4%BA%8C-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本二</h3>\n<p>开放网络平台（Open Web Platform）是一些开放的（免版权）技术的集合，这些技术激活了互联网。使用开放网络平台时，每个人都有权实现 Web 上的一个组件，而不用向任何人索取许可和证书。</p>\n<p>将 HTML5 看做开放网络平台，那它的构建模块有哪些？我想，所谓构建模块，指的应该是开放网络平台这个技术集合中的技术。</p>\n<ul>\n<li>HTML</li>\n<li>DOM</li>\n<li>CSS</li>\n<li>SVG</li>\n<li>MathML</li>\n<li>\n<p>Web APIs</p>\n<ul>\n<li>Canvas WebGL</li>\n<li>Audio</li>\n<li>Web Storage</li>\n<li>File, File System</li>\n<li>History, contentEditable, Drag &#x26; Drop, HTML Editing Commands</li>\n<li>Web Sockets</li>\n<li>Web Workers</li>\n<li>Server-Send Events</li>\n<li>XMLHttpRequest</li>\n<li>Geolocation, Device Orientation</li>\n<li>DOM Events, Touch Events, Progress Events</li>\n<li>Custom application development</li>\n<li>Clipboard and events</li>\n<li>Web Notifications, Web Messaging</li>\n<li>Offine Web Applications</li>\n<li>Media Capture API</li>\n<li>Timing control for script-based animations, Page Visibility, Navigation + Timing, Resource Timing</li>\n<li>Selectors</li>\n<li>DOM Traversal, DOM XPath, Element Traversal</li>\n<li>EcmaScript / JavaScript</li>\n<li>HTTP</li>\n<li>URI</li>\n<li>Media Accessibility Checklist</li>\n</ul>\n</li>\n</ul>\n<h2 id="请描述-cookie、sessionstorage-和-localstorage-的区别。"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0-cookie%E3%80%81sessionstorage-%E5%92%8C-localstorage-%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述 cookie、sessionStorage 和 localStorage 的区别。</h2>\n<p>上面提到的技术名词，都是在客户端以键值对存储的存储机制，并且只能将值存储为字符串。</p>\n<ul>\n<li>\n<p>Cookie</p>\n<ul>\n<li>每个域名存储量比较小（各浏览器不同，大致 4K）</li>\n<li>所有域名的存储量有限制（各浏览器不同，大致 4K）</li>\n<li>有个数限制（各浏览器不同）</li>\n<li>会随请求发送到服务器</li>\n</ul>\n</li>\n<li>\n<p>LocalStorage</p>\n<ul>\n<li>永久存储</li>\n<li>单个域名存储量比较大（推荐 5MB，各浏览器不同）</li>\n<li>总体数量无限制</li>\n</ul>\n</li>\n<li>\n<p>SessionStorage</p>\n<ul>\n<li>只在 Session 内有效</li>\n<li>存储量更大（推荐没有限制，但是实际上各浏览器也不同）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code class="language-text">cookie</code></th>\n<th><code class="language-text">localStorage</code></th>\n<th><code class="language-text">sessionStorage</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>由谁初始化</td>\n<td>客户端或服务器，服务器可以使用\n<code class="language-text">Set-Cookie</code>\n请求头。</td>\n<td>客户端</td>\n<td>客户端</td>\n</tr>\n<tr>\n<td>过期时间</td>\n<td>手动设置</td>\n<td>永不过期</td>\n<td>当前页面关闭时</td>\n</tr>\n<tr>\n<td>在当前浏览器会话（browser sessions）中是否保持不变</td>\n<td>取决于是否设置了过期时间</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>是否随着每个 HTTP 请求发送给服务器</td>\n<td>是，Cookies 会通过\n<code class="language-text">Cookie</code>\n请求头，自动发送给服务器</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>容量（每个域名）</td>\n<td>4kb</td>\n<td>5MB</td>\n<td>5MB</td>\n</tr>\n<tr>\n<td>访问权限</td>\n<td>任意窗口</td>\n<td>任意窗口</td>\n<td>当前页面窗口</td>\n</tr>\n</tbody>\n</table>\n<h2 id="请描述-script、script-async-和-script-defer-的区别"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0-script%E3%80%81script-async-%E5%92%8C-script-defer-%E7%9A%84%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述 script、script async 和 script defer 的区别</h2>\n<ul>\n<li><code class="language-text">&lt;script&gt;</code> - HTML 解析中断，脚本被提取并立即执行。执行结束后，HTML 解析继续。</li>\n<li><code class="language-text">&lt;script async&gt;</code> - 脚本的提取、执行的过程与 HTML 解析过程并行，脚本执行完毕可能在 HTML 解析完毕之前。当脚本与页面上其他脚本独立时，可以使用 <code class="language-text">async</code>，比如用作页面统计分析。</li>\n<li><code class="language-text">&lt;script defer&gt;</code> - 脚本仅提取过程与 HTML 解析过程并行，脚本的执行将在 HTML 解析完毕后进行。如果有多个含 defer 的脚本，脚本的执行顺序将按照在 <code class="language-text">document</code> 中出现的位置，从上到下顺序执行。</li>\n</ul>\n<p>注意：没有 src 属性的脚本，async 和 defer 属性会被忽略。</p>\n<h2 id="为什么最好把-css-的-link-标签放在-head-之间？为什么最好把-js-的-script-标签恰好放在-body-之前，有例外情况吗？"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%A5%BD%E6%8A%8A-css-%E7%9A%84-link-%E6%A0%87%E7%AD%BE%E6%94%BE%E5%9C%A8-head-%E4%B9%8B%E9%97%B4%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%A5%BD%E6%8A%8A-js-%E7%9A%84-script-%E6%A0%87%E7%AD%BE%E6%81%B0%E5%A5%BD%E6%94%BE%E5%9C%A8-body-%E4%B9%8B%E5%89%8D%EF%BC%8C%E6%9C%89%E4%BE%8B%E5%A4%96%E6%83%85%E5%86%B5%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么最好把 CSS 的 link 标签放在 head 之间？为什么最好把 JS 的 script 标签恰好放在 body 之前，有例外情况吗？</h2>\n<h3 id="把-link-放在-head-中"><a href="#%E6%8A%8A-link-%E6%94%BE%E5%9C%A8-head-%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>把 link 放在 head 中</h3>\n<p>把 <code class="language-text">&lt;link&gt;</code> 标签放在 <code class="language-text">&lt;head&gt;&lt;/head&gt;</code> 之间是规范要求的内容。此外，这种做法可以让页面逐步呈现，提高了用户体验。将样式表放在文档底部附近，会使许多浏览器（包括 <code class="language-text">Internet Explorer</code>）不能逐步呈现页面。一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。</p>\n<h3 id="把-script-标签恰好放在-body-之前"><a href="#%E6%8A%8A-script-%E6%A0%87%E7%AD%BE%E6%81%B0%E5%A5%BD%E6%94%BE%E5%9C%A8-body-%E4%B9%8B%E5%89%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>把 script 标签恰好放在 body 之前</h3>\n<p>脚本在下载和执行期间会阻止 HTML 解析。把 <code class="language-text">&lt;script&gt;</code> 标签放在底部，保证 <code class="language-text">HTML</code> 首先完成解析，将页面尽早呈现给用户。</p>\n<p>例外情况是当你的脚本里包含 <code class="language-text">document.write()</code> 时。但是现在，<code class="language-text">document.write()</code> 不推荐使用。同时，将 <code class="language-text">&lt;script&gt;</code> 标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档 <code class="language-text">（document）</code> 被解析。也许，对此比较好的做法是， <code class="language-text">&lt;script&gt;</code> 使用 <code class="language-text">defer</code> 属性，放在 <code class="language-text">&lt;head&gt;</code> 中。</p>\n<h2 id="什么是渐进式渲染（progressive-rendering）？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%B8%B2%E6%9F%93%EF%BC%88progressive-rendering%EF%BC%89%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是渐进式渲染（progressive rendering）？</h2>\n<p>渐进式渲染是用于提高网页性能（尤其是提高用户感知的加载速度），以尽快呈现页面的技术。</p>\n<p>在以前互联网带宽较小的时期，这种技术更为普遍。如今，移动终端的盛行，而移动网络往往不稳定，渐进式渲染在现代前端开发中仍然有用武之地。</p>\n<p>一些举例：</p>\n<p>图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript 将加载并显示图像。确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的 CSS、脚本和内容，然后可以使用延迟加载脚本或监听 DOMContentLoaded/load 事件加载其他资源和内容。异步加载 HTML 片段——当页面通过后台渲染时，把 HTML 拆分，通过异步请求，分块发送给浏览器。更多相关细节可以在<a href="http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/" target="_blank" rel="nofollow noreferrer noopener">这里</a>找到。</p>\n<h2 id="为什么在-img-标签中使用-srcset-属性？请描述浏览器遇到该属性后的处理过程。"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-img-%E6%A0%87%E7%AD%BE%E4%B8%AD%E4%BD%BF%E7%94%A8-srcset-%E5%B1%9E%E6%80%A7%EF%BC%9F%E8%AF%B7%E6%8F%8F%E8%BF%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E9%81%87%E5%88%B0%E8%AF%A5%E5%B1%9E%E6%80%A7%E5%90%8E%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么在 img 标签中使用 srcset 属性？请描述浏览器遇到该属性后的处理过程。</h2>\n<p>因为需要设计响应式图片。我们可以使用两个新的属性 <code class="language-text">srcset</code> 和 <code class="language-text">sizes</code> 来提供更多额外的资源图像和提示，帮助浏览器选择正确的一个资源。</p>\n<p>srcset 定义了我们允许浏览器选择的图像集，以及每个图像的大小。</p>\n<p>sizes 定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择。</p>\n<p>所以，有了这些属性，浏览器会：</p>\n<ol>\n<li>查看设备宽度</li>\n<li>检查 sizes 列表中哪个媒体条件是第一个为真</li>\n<li>查看给予该媒体查询的槽大小</li>\n<li>加载 srcset 列表中引用的最接近所选的槽大小的图像</li>\n</ol>\n<h2 id="你有过使用不同模版语言的经历吗？"><a href="#%E4%BD%A0%E6%9C%89%E8%BF%87%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E6%A8%A1%E7%89%88%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%8F%E5%8E%86%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你有过使用不同模版语言的经历吗？</h2>\n<p>有过，比如 Pug （以前叫 Jade）、 ERB、 Slim、 Handlebars、 Jinja、 Liquid 等等。在我看来，这些模版语言大多是相似的，都提供了用于展示数据的内容替换和过滤器的功能。大部分模版引擎都支持自定义过滤器，以展示自定义格式的内容。</p>\n<h2 id="浏览器标准模式和怪异模式之间的区别是什么？"><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>浏览器标准模式和怪异模式之间的区别是什么？</h2>\n<p>在 <code class="language-text">标准模式(Standards Mode)</code> 页面按照 <code class="language-text">HTML</code> 与 <code class="language-text">CSS</code> 的定义渲染，而在 <code class="language-text">怪异模式(Quirks Mode)</code> 就是浏览器为了兼容很早之前针对旧版本浏览器设计、并未严格遵循 <code class="language-text">W3C</code> 标准的网页而产生的一种页面渲染模式。浏览器基于页面中文件类型描述的存在以决定采用哪种渲染模式；如果存在一个完整的 <code class="language-text">DOCTYPE</code> 则浏览器将会采用标准模式，而如果它缺失则浏览器将会采用怪异模式。</p>\n<p>强烈建议阅读加深理解：<a href="http://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/" target="_blank" rel="nofollow noreferrer noopener">怪异模式（Quirks Mode）对 HTML 页面的影响</a>，这里列下浏览器标准模式和怪异模式的区别：</p>\n<ol>\n<li>盒模型：在怪异模式下，盒模型为 IE 盒模型而非标准模式下的 W3C 盒模型：在 IE 盒模型中， box width = content width + padding left + padding right + border left + border right， box height = content height + padding top + padding bottom + border top + border bottom。 而在 W3C 标准的盒模型中，box 的大小就是 content 的大小。</li>\n<li>图片元素的垂直对齐方式: 对于 inline 元素和 table-cell 元素，在 IE Standards Mode 下 vertical-align 属性默认取值为 baseline 。而当 inline 元素的内容只有图片时，如 table 的单元格 table-cell 。在 IE Quirks Mode 下，table 单元格中的图片的 vertical-align 属性默认为 bottom，因此在图片底部会有几像素的空间。</li>\n<li><code class="language-text">&lt;table&gt;</code>元素中的字体: CSS 中，描述 font 的属性有 font-family，font-size，font-style，font-weigh, 上述属性都是可以继承的。而在 IE Quirks Mode 下，对于 table 元素，字体的某些属性将不会从 body 或其他封闭元素继承到 table 中，特别是 font-size 属性。</li>\n<li>内联元素的尺寸: 在 IE Standards Mode 下，non-replaced inline 元素无法自定义大小，而在 IE Quirks Mode 下，定义这些元素的 width 和 height 属性，能够影响该元素显示的大小尺寸。</li>\n<li>\n<p>元素的百分比高度:</p>\n<ul>\n<li>CSS 中对于元素的百分比高度规定如下，百分比为元素包含块的高度，不可为负值。如果包含块的高度没有显式给出，该值等同于<code class="language-text">auto</code>（即取决于内容的高度）。所以百分比的高度必须在父元素有声明高度时使用。</li>\n<li>当一个元素使用百分比高度时，在 IE Standards Mode 下，高度取决于内容的变化，而在 Quirks Mode 下，百分比高度则被正确应用。</li>\n</ul>\n</li>\n<li>元素溢出的处理：在 IE Standard Mode 下，overflow 取默认值 visible，即溢出可见，这种情况下，溢出内容不会被裁剪，呈现在元素框外。而在 Quirks Mode 下，该溢出被当做扩展 box 来对待，即元素的大小由其内容决定，溢出不会被裁剪，元素框自动调整，包含溢出内容。</li>\n</ol>\n<h2 id="使用-xhtml-的局限有哪些？如果页面使用-applicationxhtmlxml-会有什么问题吗？"><a href="#%E4%BD%BF%E7%94%A8-xhtml-%E7%9A%84%E5%B1%80%E9%99%90%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%A6%82%E6%9E%9C%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8-applicationxhtmlxml-%E4%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 XHTML 的局限有哪些？如果页面使用 application/xhtml+xml 会有什么问题吗？</h2>\n<p>xhtml 语法要求严格，必须有 head、body 每个 dom 必须要闭合。空标签也必须闭合。例如 <code class="language-text">&lt;img /&gt;</code>, <code class="language-text">&lt;br/&gt;</code>, <code class="language-text">&lt;input/&gt;</code> 等。另外要在属性值上使用双引号。一旦遇到错误，立刻停止解析，并显示错误信息。 如果页面使用 <code class="language-text">application/xhtml+xml</code>，一些老的浏览器会不兼容。</p>\n<h2 id="请描述一下-get-和-post-的区别"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B-get-%E5%92%8C-post-%E7%9A%84%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述一下 GET 和 POST 的区别?</h2>\n<p>区别如下：</p>\n<ul>\n<li>get 向指定的资源请求数据,请求的数据会附在 URL 之后,就是把数据放置在请求行（request line）中），以 ? 分割 URL 和传输数据，多个参数用 &#x26; 连接；</li>\n<li>post 向指定的资源提交要被处理的数据。get 方法，查询请求是在 url 中显示的，有长度限制，get 方法是安全幂等的。而 post 方法请求是封装在 http 消息包体中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align="center">类型</th>\n<th align="center">get</th>\n<th align="center">post</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">后退/刷新</td>\n<td align="center">无害</td>\n<td align="center">请求重新提交</td>\n</tr>\n<tr>\n<td align="center">书签</td>\n<td align="center">可做书签</td>\n<td align="center">不可做</td>\n</tr>\n<tr>\n<td align="center">缓存</td>\n<td align="center">可被缓存</td>\n<td align="center">不能被缓存</td>\n</tr>\n<tr>\n<td align="center">历史</td>\n<td align="center">保留在浏览器记录里</td>\n<td align="center">不保留</td>\n</tr>\n<tr>\n<td align="center">对数据长度限制</td>\n<td align="center">限制（2048 字符）</td>\n<td align="center">不限制</td>\n</tr>\n<tr>\n<td align="center">安全性</td>\n<td align="center">url 中暴露数据</td>\n<td align="center">相对安全</td>\n</tr>\n<tr>\n<td align="center">可见性</td>\n<td align="center">url 中可见</td>\n<td align="center">不可见</td>\n</tr>\n</tbody>\n</table>\n<p>总结：</p>\n<ul>\n<li>对于 get 来说，是向服务器端请求数据，其请求在 url 中可见，其长度有限制（2048 字符），个体方法是安全幂等，这里的安全是指用于获取信息而非修改信息，幂等是指每次请求得到的结果都一样。</li>\n<li>对于 post 来说，是向服务器端提交数据，每次刷新或者后退都会重新提交，post 请求的数据封装在 http 请求的首部里。</li>\n</ul>\n<h2 id="前端需要注意哪些-seo"><a href="#%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B-seo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前端需要注意哪些 SEO</h2>\n<ol>\n<li>合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可</li>\n<li>语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>\n<li>重要内容不要用 js 输出：爬虫不会执行 js 获取内容</li>\n<li>少用 iframe：搜索引擎不会抓取 iframe 中的内容</li>\n<li>非装饰性图片必须加 alt</li>\n<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>\n</ol>\n<h2 id="web-开发中会话跟踪的方法有哪些"><a href="#web-%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>web 开发中会话跟踪的方法有哪些</h2>\n<ol>\n<li>cookie 使用账号密码无密码登录网站，提交购物支付</li>\n<li>session</li>\n<li>\n<p>url 重写</p>\n<ol>\n<li>客户端禁止使用 Cookie 使用，encodeURL 防止账号密码泄露</li>\n<li>比如把 <code class="language-text">http://blog.csdn.net/ default.aspx ?name=simonlv&amp;password=11111</code> 变成为 <code class="language-text">http://blog.csdn.net/simonlv/</code> 或者 <code class="language-text">http://blog.csdn.net/default.aspx;name=%$#%@$&amp;password=$#@$#@</code></li>\n</ol>\n</li>\n<li>隐藏表单域当第一张页面提交后，服务器端作出响应返回第二张页面，此页面中用隐藏域记录了来自登陆时的用户名</li>\n<li>ip 地址</li>\n</ol>\n<h2 id="img-的-title-和-alt-有什么区别"><a href="#img-%E7%9A%84-title-%E5%92%8C-alt-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>img 的 title 和 alt 有什么区别</h2>\n<ol>\n<li>title 是 <a href="http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core" target="_blank" rel="nofollow noreferrer noopener">global attributes</a> 之一，用于为元素提供附加的 advisory information。通常当鼠标滑动到元素上的时候显示。</li>\n<li>alt 是 <code class="language-text">&lt;img&gt;</code> 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li>\n</ol>\n<h2 id="html-全局属性global-attribute有哪些"><a href="#html-%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7global-attribute%E6%9C%89%E5%93%AA%E4%BA%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTML 全局属性(global attribute)有哪些</h2>\n<p>参考资料：<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="nofollow noreferrer noopener">MDN: html global attribute</a> 或者 <a href="http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core" target="_blank" rel="nofollow noreferrer noopener">W3C HTML global-attributes</a></p>\n<ul>\n<li><code class="language-text">accesskey</code>:设置快捷键，提供快速访问元素如 aaa 在 windows 下的 firefox 中按 alt + shift + a 可激活元素</li>\n<li><code class="language-text">class</code>:为元素设置类标识，多个类名用空格分开， CSS 和 javascript 可通过 class 属性获取元素</li>\n<li><code class="language-text">contenteditable</code>: 指定元素内容是否可编辑</li>\n<li><code class="language-text">contextmenu</code>: 自定义鼠标右键弹出菜单内容</li>\n<li><code class="language-text">data-*</code>: 为元素增加自定义属性</li>\n<li><code class="language-text">dir</code>: 设置元素文本方向</li>\n<li><code class="language-text">draggable</code>: 设置元素是否可拖拽</li>\n<li><code class="language-text">dropzone</code>: 设置元素拖放类型： copy, move, link</li>\n<li><code class="language-text">hidden</code>: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果</li>\n<li><code class="language-text">id</code>: 元素 id，文档内唯一</li>\n<li><code class="language-text">lang</code>: 元素内容的的语言</li>\n<li><code class="language-text">spellcheck</code>: 是否启动拼写和语法检查</li>\n<li><code class="language-text">style</code>: 行内 css 样式</li>\n<li><code class="language-text">tabindex</code>: 设置元素可以获得焦点，通过 tab 可以导航</li>\n<li><code class="language-text">title</code>: 元素相关的建议信息</li>\n<li><code class="language-text">translate</code>: 元素和子孙节点内容是否需要本地化</li>\n</ul>\n<h2 id="什么是-web-语义化有什么好处"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-web-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是 web 语义化,有什么好处</h2>\n<p>web 语义化是指通过 HTML 标记表示页面包含的信息，包含了 HTML 标签的语义化和 css 命名的语义化。HTML 标签的语义化是指：通过使用包含语义的标签（如 h1-h6）恰当地表示文档结构 css 命名的语义化是指：为 html 标签添加有意义的 class，id 补充未表达的语义，如 Microformat 通过添加符合规则的 class 描述信息。</p>\n<p>为什么需要语义化：</p>\n<ul>\n<li>去掉样式后页面呈现清晰的结构</li>\n<li>盲人使用读屏器更好地阅读</li>\n<li>搜索引擎更好地理解页面，有利于收录</li>\n<li>便于团队项目的可持续运作及维护</li>\n</ul>\n<h2 id="http-method"><a href="#http-method" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTP method</h2>\n<ol>\n<li>一台服务器要与 HTTP1.1 兼容，只要为资源实现 GET 和 HEAD 方法即可</li>\n<li>GET 是最常用的方法，通常用于请求服务器发送某个资源。</li>\n<li>HEAD 与 GET 类似，但服务器在响应中值返回首部，不返回实体的主体部分</li>\n<li>PUT 让服务器用请求的主体部分来创建一个由所请求的 URL 命名的新文档，或者，如果那个 URL 已经存在的话，就用这个主体替代它</li>\n<li>POST 起初是用来向服务器输入数据的。实际上，通常会用它来支持 HTML 的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。</li>\n<li>TRACE 会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个 TRACE 响应并在响应主体中携带它收到的原始请求报文。TRACE 方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。</li>\n<li>OPTIONS 方法请求 web 服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。</li>\n<li>DELETE 请求服务器删除 URL 指定的资源</li>\n</ol>\n<h2 id="从浏览器地址栏输入-url-到显示页面的步骤以-http-为例"><a href="#%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-url-%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4%E4%BB%A5-http-%E4%B8%BA%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>从浏览器地址栏输入 url 到显示页面的步骤(以 HTTP 为例)</h2>\n<ol>\n<li>在浏览器地址栏输入 URL</li>\n<li>\n<p>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p>\n<ol>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证</li>\n<li>检验新鲜通常有两个 HTTP 头进行控制 Expires 和 Cache-Control</li>\n<li>HTTP1.0 提供 Expires，值为一个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1 增加了 Cache-Control: max-age=，值为以秒为单位的最大新鲜时间</li>\n</ol>\n</li>\n<li>浏览器解析 URL 获取协议，主机，端口，path</li>\n<li>浏览器组装一个 HTTP（ GET ） 请求报文</li>\n<li>\n<p>浏览器获取主机 IP 地址，过程如下：</p>\n<ol>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts 文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS 缓存</li>\n<li>DNS 递归查询（可能存在负载均衡导致每次 IP 不一样）</li>\n</ol>\n</li>\n<li>\n<p>打开一个 socket 与目标 IP 地址，端口建立 TCP 链接，三次握手如下：</p>\n<ol>\n<li>客户端发送一个 TCP 的 SYN=1，Seq=X 的包到服务器端口</li>\n<li>服务器发回 SYN=1，ACK=X+1，Seq=Y 的响应包</li>\n<li>客户端发送 ACK=Y+1，Seq=Z</li>\n</ol>\n</li>\n<li>TCP 链接建立后发送 HTTP 请求</li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用 HTTP Host 头部判断请求的服务程序</li>\n<li>服务器检查 HTTP 请求头是否包含缓存验证信息。如果验证缓存新鲜，返回 304 等对应状态码</li>\n<li>处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作</li>\n<li>服务器将响应报文通过 TCP 连接发送回浏览器</li>\n<li>\n<p>浏览器接收 HTTP 响应，然后根据情况选择关闭 TCP 连接或者保留重用，关闭 TCP 连接的四次握手如下：</p>\n<ol>\n<li>主动方发送 Fin=1，ACK=Z，Seq= X 报文</li>\n<li>被动方发送 ACK=X+1，Seq=Z 报文</li>\n<li>被动方发送 Fin=1，ACK=X，Seq=Y 报文</li>\n<li>主动方发送 ACK=Y，Seq=X 报文</li>\n</ol>\n</li>\n<li>浏览器检查响应状态码：是否为 1XX，3XX，4XX，5XX，这些情况处理与 2XX 不同</li>\n<li>如果资源可缓存，进行缓存</li>\n<li>对响应进行解码（例如 gzip 压缩）</li>\n<li>根据资源类型决定如何处理（假设资源为 HTML 文档）</li>\n<li>解析 HTML 文档，构造 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本，这些操作没有严格的先后顺序，以下分别解释</li>\n<li>\n<p>构建 DOM 树：</p>\n<ol>\n<li>Tokenizing：根据 HTML 规范将字符流解析为标记</li>\n<li>Lexing：词法分析将标记转换为对象并定义属性和规则</li>\n<li>DOM construction：根据 HTML 标记关系将对象组成 DOM 树</li>\n</ol>\n</li>\n<li>解析过程中遇到图片、样式表、js 文件，启动下载</li>\n<li>\n<p>构建 CSSOM 树：</p>\n<ol>\n<li>Tokenizing：字符流转换为标记流</li>\n<li>Node：根据标记创建节点</li>\n<li>CSSOM：节点创建 CSSOM 树</li>\n</ol>\n</li>\n<li>\n<p>根据 DOM 树和 CSSOM 树构建渲染树:</p>\n<ol>\n<li>\n<p>从 DOM 树的根节点遍历所有可见节点，不可见节点包括：</p>\n<ol>\n<li>script,meta 这样本身不可见的标签。</li>\n<li>被 css 隐藏的节点，如 display:none</li>\n</ol>\n</li>\n<li>对每一个可见节点，找到恰当的 CSSOM 规则并应用</li>\n<li>发布可视节点的内容和计算样式</li>\n</ol>\n</li>\n<li>\n<p>js 解析如下：</p>\n<ol>\n<li>浏览器创建 Document 对象并解析 HTML，将解析到的元素和文本节点添加到文档中，此时 document.readyState 为 loading</li>\n<li>HTML 解析器遇到没有 async 和 defer 的 script 时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停，这样就可以用 document.write() 把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容</li>\n<li>当解析器遇到设置了 async 属性的 script 时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用 document.write()，它们可以访问自己 script 和之前的文档元素</li>\n<li>当文档完成解析，document.readyState 变成 interactive</li>\n<li>所有 defer 脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用 document.write()</li>\n<li>浏览器在 Document 对象上触发 DOMContentLoaded 事件</li>\n<li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readyState 变为 complete ,window 触发 load 事件</li>\n</ol>\n</li>\n<li>显示页面（ HTML 解析过程中会逐步显示页面）</li>\n</ol>\n<h2 id="http-request-报文结构是怎样的"><a href="#http-request-%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTP request 报文结构是怎样的</h2>\n<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html" target="_blank" rel="nofollow noreferrer noopener">rfc2616</a>中进行了定义：</p>\n<ol>\n<li>首行是 Request-Line 包括：请求方法，请求 URI，协议版本，CRLF</li>\n<li>首行之后是若干行请求头，包括 general-header，request-header 或者 entity-header，每个一行以 CRLF 结束</li>\n<li>请求头和消息实体之间有一个 CRLF 分隔</li>\n<li>根据实际请求需要可能包含一个消息实体</li>\n</ol>\n<p>一个请求报文例子如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33257413487528776000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1 Host: www.w3.org Connection: keep-alive Cache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 User-Agent: Mozilla/5.0 (Windows NT\n6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 Referer:\nhttps://www.google.com.hk/ Accept-Encoding: gzip,deflate,sdch Accept-Language: zh-CN,zh;q=0.8,en;q=0.6 Cookie:\nauthorstyle=yes If-None-Match: &quot;2cc8-3e3073913b100&quot; If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT name=qiu&age=25`, `33257413487528776000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html">GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1 Host: www.w3.org Connection: keep-alive Cache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 User-Agent: Mozilla/5.0 (Windows NT\n6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 Referer:\nhttps://www.google.com.hk/ Accept-Encoding: gzip,deflate,sdch Accept-Language: zh-CN,zh;q=0.8,en;q=0.6 Cookie:\nauthorstyle=yes If-None-Match: "2cc8-3e3073913b100" If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT name=qiu&amp;age=25</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="如何进行网站性能优化"><a href="#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何进行网站性能优化</h2>\n<p><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="nofollow noreferrer noopener">雅虎 Best Practices for Speeding Up Your Web Site:</a> <a href="/2018/01/05/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">前端性能优化最佳实践</a></p>\n<ul>\n<li>\n<p>content 方面</p>\n<ol>\n<li>减少 HTTP 请求：合并文件、CSS 精灵、Inline Image</li>\n<li>减少 DNS 查询：DNS 查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS 缓存、将资源分布到恰当数量的主机名，平衡并行下载和 DNS 查询</li>\n<li>避免重定向：多余的中间访问</li>\n<li>使 Ajax 可缓存</li>\n<li>非必须组件延迟加载</li>\n<li>未来所需组件预加载</li>\n<li>减少 DOM 元素数量</li>\n<li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li>\n<li>减少 iframe 数量</li>\n<li>不要 404</li>\n</ol>\n</li>\n<li>\n<p>Server 方面</p>\n<ol>\n<li>使用 CDN</li>\n<li>添加 Expires 或者 Cache-Control 响应头</li>\n<li>对组件使用 Gzip 压缩</li>\n<li>配置 ETag</li>\n<li>Flush Buffer Early</li>\n<li>Ajax 使用 GET 进行请求</li>\n<li>避免空 src 的 img 标签</li>\n</ol>\n</li>\n<li>\n<p>Cookie 方面</p>\n<ol>\n<li>减小 cookie 大小</li>\n<li>引入资源的域名不要包含 cookie</li>\n</ol>\n</li>\n<li>\n<p>css 方面</p>\n<ol>\n<li>将样式表放到页面顶部</li>\n<li>不使用 CSS 表达式</li>\n<li>不使用@import</li>\n<li>不使用 IE 的 Filter</li>\n</ol>\n</li>\n<li>\n<p>Javascript 方面</p>\n<ol>\n<li>将脚本放到页面底部</li>\n<li>将 javascript 和 css 从外部引入</li>\n<li>压缩 javascript 和 css</li>\n<li>删除不需要的脚本</li>\n<li>减少 DOM 访问</li>\n<li>合理设计事件监听器</li>\n</ol>\n</li>\n<li>\n<p>图片方面</p>\n<ol>\n<li>优化图片：根据实际颜色需要选择色深、压缩</li>\n<li>优化 css 精灵</li>\n<li>不要在 HTML 中拉伸图片</li>\n<li>保证 favicon.ico 小并且可缓存</li>\n</ol>\n</li>\n<li>\n<p>移动方面</p>\n<ol>\n<li>保证组件小于 25k</li>\n<li>Pack Components into a Multipart Document</li>\n</ol>\n</li>\n</ul>\n<h2 id="什么是渐进增强"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是渐进增强</h2>\n<p>渐进增强是指在 web 设计时强调可访问性、语义化 HTML 标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能同时为高级浏览器和高带宽用户提供更好的用户体验。核心原则如下:</p>\n<ul>\n<li>所有浏览器都必须能访问基本内容</li>\n<li>所有浏览器都必须能使用基本功能</li>\n<li>所有内容都包含在语义化标签中</li>\n<li>通过外部 CSS 提供增强的布局</li>\n<li>通过非侵入式、外部 javascript 提供增强功能</li>\n<li>end-user web browser preferences are respected</li>\n</ul>\n<h2 id="http-状态码及其含义"><a href="#http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTP 状态码及其含义</h2>\n<p>参考<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="nofollow noreferrer noopener">RFC 2616</a></p>\n<ul>\n<li>\n<p>1XX：信息状态码</p>\n<ul>\n<li><strong>100 Continue</strong>：客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</li>\n<li><strong>101 Switching Protocols</strong>：服务器已经理解客户端的请求，并将通过 Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到 Upgrade 消息头中定义的那些协议。</li>\n</ul>\n</li>\n<li>\n<p>2XX：成功状态码</p>\n<ul>\n<li><strong>200 OK</strong>：请求成功，请求所希望的响应头或数据体将随此响应返回</li>\n<li><strong>201 Created</strong></li>\n<li><strong>202 Accepted</strong></li>\n<li><strong>203 Non-Authoritative Information</strong></li>\n<li><strong>204 No Content</strong></li>\n<li><strong>205 Reset Content</strong></li>\n<li><strong>206 Partial Content</strong></li>\n</ul>\n</li>\n<li>\n<p>3XX：重定向</p>\n<ul>\n<li><strong>300 Multiple Choices</strong></li>\n<li><strong>301 Moved Permanently</strong></li>\n<li><strong>302 Found</strong></li>\n<li><strong>303 See Other</strong></li>\n<li><strong>304 Not Modified</strong></li>\n<li><strong>305 Use Proxy</strong></li>\n<li><strong>306 （unused）</strong></li>\n<li><strong>307 Temporary Redirect</strong></li>\n</ul>\n</li>\n<li>\n<p>4XX：客户端错误</p>\n<ul>\n<li><strong>400 Bad Request</strong></li>\n<li><strong>401 Unauthorized</strong></li>\n<li><strong>402 Payment Required</strong></li>\n<li><strong>403 Forbidden</strong></li>\n<li><strong>404 Not Found</strong></li>\n<li><strong>405 Method Not Allowed</strong></li>\n<li><strong>406 Not Acceptable</strong></li>\n<li><strong>407 Proxy Authentication Required</strong></li>\n<li><strong>408 Request Timeout</strong></li>\n<li><strong>409 Conflict</strong></li>\n<li><strong>410 Gone</strong></li>\n<li><strong>411 Length Required</strong></li>\n<li><strong>412 Precondition Failed</strong></li>\n<li><strong>413 Request Entity Too Large</strong></li>\n<li><strong>414 Request-URI Too Long</strong></li>\n<li><strong>415 Unsupported Media Type</strong></li>\n<li><strong>416 Requested Range Not Satisfiable</strong></li>\n<li><strong>417 Expectation Failed</strong></li>\n</ul>\n</li>\n<li>\n<p>5XX: 服务器错误</p>\n<ul>\n<li><strong>500 Internal Server Error</strong></li>\n<li><strong>501 Not Implemented</strong></li>\n<li><strong>502 Bad Gateway</strong></li>\n<li><strong>503 Service Unavailable</strong></li>\n<li><strong>504 Gateway Timeout</strong></li>\n<li><strong>505 HTTP Version Not Supported</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id="keygen-是正确的-html5-标签吗？"><a href="#keygen-%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84-html5-%E6%A0%87%E7%AD%BE%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>keygen 是正确的 HTML5 标签吗？</h2>\n<p><code class="language-text">&lt;keygen&gt;</code> 标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。是 HTML5 标签。</p>\n<h2 id="bdo-标签是否可以改变文本方向？"><a href="#bdo-%E6%A0%87%E7%AD%BE%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%8F%98%E6%96%87%E6%9C%AC%E6%96%B9%E5%90%91%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>bdo 标签是否可以改变文本方向？</h2>\n<p><code class="language-text">&lt;bdo&gt;</code>标签覆盖默认的文本方向。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96618149367629890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<bdo dir=&quot;rtl&quot;>Here is some text</bdo>`, `96618149367629890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bdo</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rtl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Here is some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bdo</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>实现效果：<bdo dir="rtl">Here is some text</bdo></p>\n<h2 id="下列-html-代码是否正确？"><a href="#%E4%B8%8B%E5%88%97-html-%E4%BB%A3%E7%A0%81%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>下列 HTML 代码是否正确？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="40932783781045500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<figure>\n  <img src=&quot;myimage.jpg&quot; alt=&quot;My image&quot; />\n  <figcaption>\n    <p>This is my self portrait.</p>\n  </figcaption>\n</figure>`, `40932783781045500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myimage.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my self portrait.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>正确<code class="language-text">&lt;figure&gt;</code>标签规定独立的流内容（图像、图表、照片、代码等等）。figure 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。使用<code class="language-text">&lt;figcaption&gt;</code>元素为 figure 添加标题（caption）。</p>\n<h2 id="哪种情况下应该使用-small-标签？当你想在-h1-标题后创建副标题？还是当在-footer-里面增加版权信息？"><a href="#%E5%93%AA%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8B%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-small-%E6%A0%87%E7%AD%BE%EF%BC%9F%E5%BD%93%E4%BD%A0%E6%83%B3%E5%9C%A8-h1-%E6%A0%87%E9%A2%98%E5%90%8E%E5%88%9B%E5%BB%BA%E5%89%AF%E6%A0%87%E9%A2%98%EF%BC%9F%E8%BF%98%E6%98%AF%E5%BD%93%E5%9C%A8-footer-%E9%87%8C%E9%9D%A2%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>哪种情况下应该使用 small 标签？当你想在 h1 标题后创建副标题？还是当在 footer 里面增加版权信息？</h2>\n<p>small 标签一般使用场景是在版权信息和法律文本里使用，也可以在标题里使用标注附加信息（bootstrap 中可见），但不可以用来创建副标题。</p>\n<blockquote>\n<p>The HTML Small Element (<code class="language-text">&lt;small&gt;</code>) makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser’s minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.</p>\n</blockquote>\n<h2 id="在一个结构良好的-web-网页里，多个-h1-标签会不利于-seo-吗？"><a href="#%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%84%E8%89%AF%E5%A5%BD%E7%9A%84-web-%E7%BD%91%E9%A1%B5%E9%87%8C%EF%BC%8C%E5%A4%9A%E4%B8%AA-h1-%E6%A0%87%E7%AD%BE%E4%BC%9A%E4%B8%8D%E5%88%A9%E4%BA%8E-seo-%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在一个结构良好的 web 网页里，多个 h1 标签会不利于 SEO 吗？</h2>\n<p>不影响。</p>\n<blockquote>\n<p>According to Matt Cutts (lead of Google’s webspam team and the de facto expert on these things), using multiple <code class="language-text">&lt;h1&gt;</code> tags is fine, as long as you’re not abusing it (like sticking your whole page in an <code class="language-text">&lt;h1&gt;</code> and using CSS to style it back to normal size). That would likely have no effect, and might trigger a penalty, as it looks spammy.</p>\n</blockquote>\n<blockquote>\n<p>If you have multiple headings and it would be natural to use multiple <code class="language-text">&lt;h1&gt;</code>’s, then go for it.</p>\n</blockquote>\n<p>摘自：<a href="http://www.quora.com/Does-using-multiple-h1-tags-on-a-page-affect-search-engine-rankings" target="_blank" rel="nofollow noreferrer noopener">http://www.quora.com/Does-using-multiple-h1-tags-on-a-page-affect-search-engine-rankings</a></p>\n<h2 id="如果你有一个搜索结果页面，你想高亮搜索的关键词。什么-html-标签可以使用"><a href="#%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%9C%89%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%BD%A0%E6%83%B3%E9%AB%98%E4%BA%AE%E6%90%9C%E7%B4%A2%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D%E3%80%82%E4%BB%80%E4%B9%88-html-%E6%A0%87%E7%AD%BE%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如果你有一个搜索结果页面，你想高亮搜索的关键词。什么 HTML 标签可以使用?</h2>\n<p><code class="language-text">&lt;mark&gt;</code>标签表现高亮文本。</p>\n<blockquote>\n<p>The HTML <code class="language-text">&lt;mark&gt;</code> Element represents highlighted text, i.e., a run of text marked for reference purpose, due to its relevance in a particular context. For example it can be used in a page showing search results to highlight every instance of the searched for word.</p>\n</blockquote>\n<h2 id="下列代码中-scope-属性是做什么的？"><a href="#%E4%B8%8B%E5%88%97%E4%BB%A3%E7%A0%81%E4%B8%AD-scope-%E5%B1%9E%E6%80%A7%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>下列代码中 scope 属性是做什么的？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="21244094266119820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<article>\n  <h1>Hello World</h1>\n  <style scoped>\n    p {\n      color: #ff0;\n    }\n  </style>\n  <p>This is my text</p>\n</article>\n\n<article>\n  <h1>This is awesome</h1>\n  <p>I am some other text</p>\n</article>`, `21244094266119820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n    <span class="token selector">p</span> <span class="token punctuation">{</span>\n      <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is awesome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am some other text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>scoped 属性是一个布尔属性。如果使用该属性，则样式仅仅应用到 style 元素的父元素及其子元素。</p>\n<h2 id="html5-支持块级超链接吗？例如："><a href="#html5-%E6%94%AF%E6%8C%81%E5%9D%97%E7%BA%A7%E8%B6%85%E9%93%BE%E6%8E%A5%E5%90%97%EF%BC%9F%E4%BE%8B%E5%A6%82%EF%BC%9A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTML5 支持块级超链接吗？例如：</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20118858377814598000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<article>\n  <a href=&quot;#&quot;>\n    <h1>Hello</h1>\n    <p>I am some text</p>\n  </a>\n</article>`, `20118858377814598000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>支持，HTML5 中<code class="language-text">&lt;a&gt;</code>元素表现为一个超链接，支持任何行内元素和块级元素。</p>\n<h2 id="当下列的-html-代码加载时会触发新的-http-请求吗？"><a href="#%E5%BD%93%E4%B8%8B%E5%88%97%E7%9A%84-html-%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BD%E6%97%B6%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%96%B0%E7%9A%84-http-%E8%AF%B7%E6%B1%82%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>当下列的 HTML 代码加载时会触发新的 HTTP 请求吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90876301011192600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<img src=&quot;mypic.jpg&quot; style=&quot;visibility: hidden&quot; alt=&quot;My picture&quot; />`, `90876301011192600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic.jpg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">visibility</span><span class="token punctuation">:</span> hidden</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My picture<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>会。</p>\n<h2 id="当下列的-html-代码加载时会触发新的-http-请求吗？-1"><a href="#%E5%BD%93%E4%B8%8B%E5%88%97%E7%9A%84-html-%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BD%E6%97%B6%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%96%B0%E7%9A%84-http-%E8%AF%B7%E6%B1%82%E5%90%97%EF%BC%9F-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>当下列的 HTML 代码加载时会触发新的 HTTP 请求吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56074129192617890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<div style=&quot;display: none;&quot;>\n  <img src=&quot;mypic.jpg&quot; alt=&quot;My photo&quot; />\n</div>`, `56074129192617890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My photo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>会。</p>\n<h2 id="main1css-一定会在-alerthello-world被加载和编译吗"><a href="#main1css-%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%9C%A8-alerthello-world%E8%A2%AB%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91%E5%90%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>main1.css 一定会在 alert(‘Hello world’)被加载和编译吗?</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64664960075984036000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<head>\n  <link href=&quot;main1.css&quot; rel=&quot;stylesheet&quot; />\n  <script>\n    alert(\'Hello World\');\n  </script>\n</head>`, `64664960075984036000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'Hello World\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>会。</p>\n<h2 id="在-main2css-获取前-main1-一定必须被下载解析吗？"><a href="#%E5%9C%A8-main2css-%E8%8E%B7%E5%8F%96%E5%89%8D-main1-%E4%B8%80%E5%AE%9A%E5%BF%85%E9%A1%BB%E8%A2%AB%E4%B8%8B%E8%BD%BD%E8%A7%A3%E6%9E%90%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在 main2.css 获取前 main1 一定必须被下载解析吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79311963353821510000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<head>\n  <link href=&quot;main1.css&quot; rel=&quot;stylesheet&quot; />\n  <link href=&quot;main2.css&quot; rel=&quot;stylesheet&quot; />\n</head>`, `79311963353821510000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main2.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>不一定。</p>\n<h2 id="在-paragraph-1-加载后-main2css-才会被加载编译吗？"><a href="#%E5%9C%A8-paragraph-1-%E5%8A%A0%E8%BD%BD%E5%90%8E-main2css-%E6%89%8D%E4%BC%9A%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%BC%96%E8%AF%91%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在 Paragraph 1 加载后 main2.css 才会被加载编译吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53535242946011840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<head>\n  <link href=&quot;main1.css&quot; rel=&quot;stylesheet&quot; />\n</head>\n<body>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n  <link href=&quot;main2.css&quot; rel=&quot;stylesheet&quot; />\n</body>`, `53535242946011840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main2.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>是。</p>',
id:"/github/workspace/blog/前端面试题HTML部分/index.md absPath of file >>> MarkdownRemark",timeToRead:27,frontmatter:{date:"2018-04-05 18:24:54",path:"/front-end-interview-html/",tags:"面试, HTML, 前端",title:"前端面试题HTML部分",draft:null}},{excerpt:"",html:'<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 50%; position: relative; height: 0; overflow: hidden;margin-bottom: 2em"\n          >\n            <iframe src="/examples/snow.html" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p><div class="gatsby-highlight">\n        <pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JavaScript下雪特效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>black</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n        <span class="token comment">// Cross-browser-compliant</span>\n        requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>\n            window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>\n            window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>\n            window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>\n            window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span>\n            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/**\n         * Snow Class\n         * @param {int}   x      \n         * @param {int}   y      \n         * @param {int}   radius \n         * @param {Function} fn     Formular to calculate x pos and y pos\n         */</span>\n        <span class="token keyword">function</span> <span class="token function">Snow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> radius<span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Snow</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">\'x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Snow</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cxt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> grd <span class="token operator">=</span> cxt<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            grd<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0.9)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            grd<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0.5)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            grd<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"rgba(255, 255, 255, 0)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            cxt<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> grd<span class="token punctuation">;</span>\n            cxt<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/**\n         * Snowlist class\n         * Container to hold snow objects\n         */</span>\n        <span class="token function-variable function">SnowList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">SnowList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">snow</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>snow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">SnowList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">SnowList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cxt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">SnowList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">SnowList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/**\n         * Generate random x-pos, y-pos or fn functions\n         * @param  {string} option x|y|fnx|fny\n         * @return {int|Function} \n         */</span>\n        <span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> ret<span class="token punctuation">,</span> random<span class="token punctuation">;</span>\n            <span class="token keyword">switch</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">case</span> <span class="token string">\'x\'</span><span class="token punctuation">:</span>\n                    ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">\'y\'</span><span class="token punctuation">:</span>\n                    ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">\'r\'</span><span class="token punctuation">:</span>\n                    ret <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">\'fnx\'</span><span class="token punctuation">:</span>\n                    random <span class="token operator">=</span> <span class="token number">27</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>\n                    <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>y <span class="token operator">/</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">\'fny\'</span><span class="token punctuation">:</span>\n                    random <span class="token operator">=</span> <span class="token number">0.4</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.4</span>\n                    <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> y <span class="token operator">+</span> random<span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Start snow</span>\n        <span class="token keyword">function</span> <span class="token function">startSnow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Create canvas</span>\n            <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                cxt<span class="token punctuation">;</span>\n            canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>\n            canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>\n            canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">\'style\'</span><span class="token punctuation">,</span> <span class="token string">\'position: fixed;left: 0;top: 0;pointer-events: none;\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">,</span> <span class="token string">\'canvas_snow\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'body\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            cxt <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// Create snow objects</span>\n            <span class="token keyword">var</span> snowList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> snow<span class="token punctuation">,</span> randomX<span class="token punctuation">,</span> randomY<span class="token punctuation">,</span> randomR<span class="token punctuation">,</span> randomFnx<span class="token punctuation">,</span> randomFny<span class="token punctuation">;</span>\n                randomX <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">\'x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                randomY <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">\'y\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                randomR <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">\'r\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                randomFnx <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">\'fnx\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                randomFny <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">\'fny\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                snow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snow</span><span class="token punctuation">(</span>randomX<span class="token punctuation">,</span> randomY<span class="token punctuation">,</span> randomR<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                    x<span class="token punctuation">:</span> randomFnx<span class="token punctuation">,</span>\n                    y<span class="token punctuation">:</span> randomFny\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                snow<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                snowList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>snow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// Update snow position data, and redraw them in each frame</span>\n            <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                cxt<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                snowList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                snowList<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Handle window resize</span>\n        window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> canvasSnow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'canvas_snow\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            canvasSnow<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>\n            canvasSnow<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Let it snow O(”_”)0</span>\n        <span class="token function">startSnow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>900<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas_snow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n        </div></p>',
id:"/github/workspace/blog/下雪特效/index.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{date:"2018-01-22 15:52:43",path:"/snow-css/",tags:"前端, CSS",title:"下雪特效",draft:null}},{excerpt:"本文主要考量客户端性能、服务器端和网络性能，内容框架来自 Yahoo Developer Network，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。 同时，建议关注及时更新的 Google 性能优化指南。 前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。 来自 Google 的数据表明，一个有 10 条数据 0.4 秒能加载完的页面，变成 30 条数据 0.9 秒加载完之后，流量和广告收入下降 9…",html:'<p>本文主要考量客户端性能、服务器端和网络性能，内容框架来自 Yahoo Developer Network，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。</p>\n<p>同时，建议关注及时更新的 Google 性能优化指南。</p>\n<p>前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。</p>\n<blockquote>\n<ul>\n<li>来自 Google 的数据表明，一个有 10 条数据 0.4 秒能加载完的页面，变成 30 条数据 0.9 秒加载完之后，流量和广告收入下降 90%。</li>\n</ul>\n</blockquote>\n<ul>\n<li>Google Map 首页文件大小从 100KB 减小到 70-80KB 后，流量在第一周涨了 10%，接下来的三周涨了 25%。</li>\n<li>亚马逊的数据表明：加载时间增加 100 毫秒，销量就下降 1%。</li>\n</ul>\n<p>以上数据更说明「加载时间就是金钱」，前端优化主要围绕提高加载速度进行。</p>\n<h2 id="页面内容"><a href="#%E9%A1%B5%E9%9D%A2%E5%86%85%E5%AE%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>页面内容</h2>\n<h3 id="减少-http-请求数"><a href="#%E5%87%8F%E5%B0%91-http-%E8%AF%B7%E6%B1%82%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减少 HTTP 请求数</h3>\n<p>Web 前端 80% 的响应时间花在图片、样式、脚本等资源下载上。浏览器对每个域名的连接数是有限制的，减少请求次数是缩短响应时间的关键。</p>\n<p>通过简洁的设计减少页面所需资源，进而减少 HTTP 请求，这是最直接的方式，前提是你的 Boss、设计师同事不打死你。所以，还是另辟蹊径吧：</p>\n<ul>\n<li>合并 JavaScript、CSS 等文件；</li>\n<li>服务器端（CDN）自动合并</li>\n<li>基于 Node.js 的文件合并工具一抓一大把</li>\n<li>使用 CSS Sprite：将背景图片合并成一个文件，通过 background-image 和 background-position 控制显示；</li>\n<li>Sprite Cow</li>\n<li>Spritebox</li>\n</ul>\n<blockquote>\n<p>逐步被 Icon Font 和 SVG Sprite 取代。</p>\n</blockquote>\n<ul>\n<li>Image Map：合并图片，然后使用坐标映射不同的区域（演示）。</li>\n</ul>\n<blockquote>\n<p>缺点：仅适用于相连的图片；设置坐标过程乏味且易出错；可访性问题。不推荐使用这种过时的技术。</p>\n</blockquote>\n<ul>\n<li>Inline Assets：使用 Data URI scheme 将图片嵌入 HTML 或者 CSS 中；或者将 CSS、JS、图片直接嵌入 HTML 中。</li>\n</ul>\n<blockquote>\n<p>会增加文件大小，也可能产生浏览器兼容及其他性能问题（有待整理补充）。</p>\n</blockquote>\n<blockquote>\n<p>未来的趋势是使用内嵌 SVG。</p>\n</blockquote>\n<ul>\n<li>内容分片，将请求划分到不同的域名上。</li>\n</ul>\n<blockquote>\n<p>HTTP/2 通过多路复用大幅降低了多个请求的开销。通过数据分帧层，客户端和服务器之间只需要建立一个 TCP 连接，即可同时收发多个文件，而且，该连接在相当长的时间周期内保持打开（持久化），以便复用。</p>\n</blockquote>\n<blockquote>\n<p>HTTP/2 的新特性意味着上述优化实践不再适用，但考虑到客户端对 HTTP/2 的支持覆盖程度，还需根据实际数据权衡。</p>\n</blockquote>\n<h3 id="减少-dns-查询"><a href="#%E5%87%8F%E5%B0%91-dns-%E6%9F%A5%E8%AF%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减少 DNS 查询</h3>\n<p>用户输入 URL 以后，浏览器首先要查询域名（hostname）对应服务器的 IP 地址，一般需要耗费 20-120 毫秒 时间。DNS 查询完成之前，浏览器无法从服务器下载任何数据。</p>\n<p>基于性能考虑，ISP、局域网、操作系统、浏览器都会有相应的 DNS 缓存机制。</p>\n<ul>\n<li>IE 缓存 30 分钟，可以通过注册表中 DnsCacheTimeout 项设置；</li>\n<li>Firefox 混存 1 分钟，通过 network.dnsCacheExpiration 配置；</li>\n<li>（TODO：补充其他浏览器缓存信息）</li>\n</ul>\n<p>首次访问、没有相应的 DNS 缓存时，域名越多，查询时间越长。所以应尽量减少域名数量。但基于并行下载考虑，把资源分布到 2 个域名上（最多不超过 4 个）。这是减少 DNS 查询同时保证并行下载的折衷方案。</p>\n<h3 id="避免重定向"><a href="#%E9%81%BF%E5%85%8D%E9%87%8D%E5%AE%9A%E5%90%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>避免重定向</h3>\n<p>HTTP 重定向通过 301/302 状态码实现。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92665572416296260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`HTTP/1.1 301 Moved Permanently Location: http://example.com/newuri Content-Type: text/html`, `92665572416296260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html">HTTP/1.1 301 Moved Permanently Location: http://example.com/newuri Content-Type: text/html</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>客户端收到服务器的重定向响应后，会根据响应头中 Location 的地址再次发送请求。重定向会影响用户体验，尤其是多次重定向时，用户在一段时间内看不到任何内容，只看到浏览器进度条一直在刷新。</p>\n<p>有时重定向无法避免，在糟糕也比抛出 404 好。虽然通过 HTML meta refresh 和 JavaScript 也能实现，但首选 HTTP 3xx 跳转，以保证浏览器「后退」功能正常工作（也利于 SEO）。</p>\n<ul>\n<li>最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加 / 但未添加。比如，访问 <code class="language-text">http://astrology.yahoo.com/astrology</code> 将被 301 重定向到 <code class="language-text">http://astrology.yahoo.com/astrology/</code>（注意末尾的 /）。如果使用 Apache，可以通过 Alias 或 mod_rewrite 或 DirectorySlash 解决这个问题。</li>\n<li>网站域名变更：CNAME 结合 Alias 或 mod_rewrite 或者其他服务器类似功能实现跳转。</li>\n</ul>\n<h3 id="缓存-ajax-请求"><a href="#%E7%BC%93%E5%AD%98-ajax-%E8%AF%B7%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>缓存 Ajax 请求</h3>\n<p>Ajax 可以提高用户体验。但「异步」不意味着「及时」，优化 Ajax 响应速度提高性能仍是需要关注的主题。</p>\n<p>最重要的的优化方式是缓存响应结果，详见 添加 Expires 或 Cache-Control 响应头。</p>\n<p>以下规则也关乎 Ajax 响应速度：</p>\n<ul>\n<li>启用 Gzip</li>\n<li>减少 DNS 查询</li>\n<li>压缩 JavaScript 和 CSS</li>\n<li>避免重定向</li>\n<li>配置 Etag</li>\n</ul>\n<h3 id="延迟加载"><a href="#%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>延迟加载</h3>\n<p>页面初始加载时哪些内容是绝对必需的？不在答案之列的资源都可以延迟加载。比如：</p>\n<ul>\n<li>非首屏使用的数据、样式、脚本、图片等；</li>\n<li>用户交互时才会显示的内容。</li>\n</ul>\n<p>遵循「渐进增强」理念开发的网站：JavaScript 用于增强用用户体验，但没有（不支持） JavaScript 也能正常工作，完全可以延迟加载 JavaScript。</p>\n<h3 id="延迟渲染"><a href="#%E5%BB%B6%E8%BF%9F%E6%B8%B2%E6%9F%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>延迟渲染</h3>\n<p>将首屏以外的 HTML 放在不渲染的元素中，如隐藏的 <code class="language-text">&lt;textarea&gt;</code>，或者 type 属性为非执行脚本的 <code class="language-text">&lt;script&gt;</code> 标签中，减少初始渲染的 DOM 元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</p>\n<h3 id="预先加载"><a href="#%E9%A2%84%E5%85%88%E5%8A%A0%E8%BD%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>预先加载</h3>\n<p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<ul>\n<li>\n<p>无条件预先加载：页面加载完成（load）后，马上获取其他资源。以 google.com 为例，首页加载完成后会立即下载一个 Sprite 图片，此图首页不需要，但是搜索结果页要用到。</p>\n</li>\n<li>\n<p>有条件预先加载：根据用户行为预判用户去向，预载相关资源。比如 search.yahoo.com 开始输入时会有额外的资源加载。</p>\n</li>\n</ul>\n<blockquote>\n<p>Chrome 等浏览器的地址栏也有类似的机制。</p>\n</blockquote>\n<ul>\n<li>有「阴谋」的预先加载：页面即将上线新版前预先加载新版内容。网站改版后由于缓存、使用习惯等原因，会有旧版的网站更快更流畅的反馈。为缓解这一问题，在新版上线之前，旧版可以利用空闲提前加载一些新版的资源缓存到客户端，以便新版正式上线后更快的载入（好一个「心机猿」😱）。</li>\n</ul>\n<blockquote>\n<p>「双十一」、「黑五」这类促销日来临之前，也可以预先下载一些相关资源到客户端（浏览器、App 等），有效利用浏览器缓存和本地存储，降低活动当日请求压力，提高用户体验。</p>\n</blockquote>\n<blockquote>\n<p>TODO: Prefetch 相关细节</p>\n</blockquote>\n<ul>\n<li>Resource Hints Spec</li>\n</ul>\n<h3 id="减少-dom-元素数量"><a href="#%E5%87%8F%E5%B0%91-dom-%E5%85%83%E7%B4%A0%E6%95%B0%E9%87%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减少 DOM 元素数量</h3>\n<p>复杂的页面不仅下载的字节更多，JavaScript DOM 操作也更慢。例如，同是添加一个事件处理器，500 个元素和 5000 个元素的页面速度上会有很大区别。</p>\n<p>从以下几个角度考虑移除不必要的标记：</p>\n<ul>\n<li>是否还在使用表格布局？</li>\n<li>塞进去更多的 <code class="language-text">&lt;div&gt;</code> 仅为了处理布局问题？也许有更好、更语义化的标记。</li>\n<li>能通过伪元素实现的功能，就没必要添加额外元素，如清除浮动。</li>\n</ul>\n<p>浏览器控制台中输入以下代码可以计算出页面中有多少 DOM 元素：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56709316817563810000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`document.getElementsByTagName(\'*\').length;`, `56709316817563810000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'*\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>对比标记良好的的网站，看看差距是多少。</p>\n<p>为什么不使用表格布局？</p>\n<ul>\n<li>更多的标签，增加文件大小；</li>\n<li>不易维护，无法适应响应式设计；</li>\n<li>性能考量，默认的表格布局算法会产生大量重绘（参见<a href="https://csspod.com/table-width-algorithms/" target="_blank" rel="nofollow noreferrer noopener">表格布局算法</a>）。</li>\n</ul>\n<h3 id="划分内容到不同域名"><a href="#%E5%88%92%E5%88%86%E5%86%85%E5%AE%B9%E5%88%B0%E4%B8%8D%E5%90%8C%E5%9F%9F%E5%90%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>划分内容到不同域名</h3>\n<p>浏览器一般会限制每个域的并行线程（一般为 6 个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在 2-4 个域名内，以避免 DNS 查询损耗。</p>\n<p>例如，动态内容放在 csspod.com 上，静态资源放在 static.csspod.com 上。这样还可以禁用静态资源域下的 Cookie，减少数据传输，详见 Cookie 优化。</p>\n<p>更多信息参考 Maximizing Parallel Downloads in the Carpool Lane</p>\n<h3 id="尽量减少-iframe-使用"><a href="#%E5%B0%BD%E9%87%8F%E5%87%8F%E5%B0%91-iframe-%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>尽量减少 iframe 使用</h3>\n<p>使用 iframe 可以在页面中嵌入 HTML 文档，但有利有弊。</p>\n<p><code class="language-text">&lt;iframe&gt;</code> 优点：</p>\n<ul>\n<li>可以用来加载速度较慢的第三方资源，如广告、徽章；</li>\n<li>可用作安全沙箱；</li>\n<li>可以并行下载脚本。</li>\n</ul>\n<p><code class="language-text">&lt;iframe&gt;</code> 缺点：</p>\n<ul>\n<li>\n<p>加载代价昂贵，即使是空的页面；</p>\n</li>\n<li>\n<p>阻塞页面 load 事件触发；</p>\n</li>\n</ul>\n<blockquote>\n<p>Iframe 完全加载以后，父页面才会触发 load 事件。 Safari、Chrome 中通过 JavaScript 动态设置 iframe src 可以避免这个问题。</p>\n</blockquote>\n<ul>\n<li>缺乏语义。</li>\n</ul>\n<h3 id="避免-404-错误"><a href="#%E9%81%BF%E5%85%8D-404-%E9%94%99%E8%AF%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>避免 404 错误</h3>\n<p>HTTP 请求很昂贵，返回无效的响应（如 404 未找到）完全没必要，降低用户体验而且毫无益处。</p>\n<p>一些网站设计很酷炫、有提示信息的 404 页面，有助于提高用户体验，但还是浪费服务器资源。尤其糟糕的是外部脚本返回 404，不仅阻塞其他资源下载，浏览器还会尝试把 404 页面内容当作 JavaScript 解析，消耗更多资源。</p>\n<h3 id="补充规则"><a href="#%E8%A1%A5%E5%85%85%E8%A7%84%E5%88%99" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>补充规则</h3>\n<ul>\n<li>定义字符集，并放在 <code class="language-text">&lt;head&gt;</code> 顶部。大多数浏览器会暂停页面渲染，直到找到字符集定义。</li>\n</ul>\n<h2 id="服务器"><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>服务器</h2>\n<p>服务器相关优化设置可参考 H5BP 相关项目：</p>\n<p><a href="https://github.com/h5bp/server-configs-nginx" target="_blank" rel="nofollow noreferrer noopener">Nginx HTTP server boilerplate configs</a> <a href="https://github.com/h5bp/server-configs-apache" target="_blank" rel="nofollow noreferrer noopener">Apache HTTP server boilerplate configs</a> <a href="https://github.com/h5bp/server-configs-iis" target="_blank" rel="nofollow noreferrer noopener">IIS Web.Config Boilerplates</a></p>\n<h3 id="使用-cdn"><a href="#%E4%BD%BF%E7%94%A8-cdn" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 CDN</h3>\n<p>网站 80-90% 响应时间消耗在资源下载上，减少资源下载时间是性能优化的黄金发则。</p>\n<p>相比分布式架构的复杂和巨大投入，静态内容分发网络（CDN）可以以较低的投入，获得加载速度有效提升。</p>\n<h3 id="添加-expires-或-cache-control-响应头"><a href="#%E6%B7%BB%E5%8A%A0-expires-%E6%88%96-cache-control-%E5%93%8D%E5%BA%94%E5%A4%B4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>添加 Expires 或 Cache-Control 响应头</h3>\n<ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略；</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<blockquote>\n<p>Cache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires、Pragma）。当前的所有浏览器都支持 Cache-Control，因此，使用它就够了。</p>\n</blockquote>\n<blockquote>\n<p>鉴于静态内容和动态内容不同的缓存策略，实践中一般会把二者部署在不同的服务器（域名）以方便管理。</p>\n</blockquote>\n<p>参考链接：</p>\n<p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="nofollow noreferrer noopener">HTTP 缓存 | Web Fundamentals - Google Developers</a> <a href="https://github.com/h5bp/server-configs" target="_blank" rel="nofollow noreferrer noopener">H5BP - Server Configs</a></p>\n<h3 id="启用-gzip"><a href="#%E5%90%AF%E7%94%A8-gzip" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>启用 Gzip</h3>\n<p>Gzip 压缩通常可以减少 70% 的响应大小，对某些文件更可能高达 90%，比 Deflate 更高效。主流 Web 服务器都有相应模块，而且绝大多数浏览器支持 gzip 解码。所以，应该对 HTML、CSS、JS、XML、JSON 等文本类型的内容启用压缩。</p>\n<p>注意，图片和 PDF 文件不要使用 gzip。它们本身已经压缩过，再使用 gzip 压缩不仅浪费 CPU 资源，而且还可能增加文件体积。</p>\n<p>对于不支持的 Gzip 的用户代理，通过设置 Vary 响应头，返回为未压缩的数据：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="82490312099422810000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Vary: *`, `82490312099422810000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js">Vary<span class="token punctuation">:</span> <span class="token operator">*</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h3 id="配置-etag"><a href="#%E9%85%8D%E7%BD%AE-etag" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>配置 Etag</h3>\n<p>Etag 通过文件版本标识，方便服务器判断请求的内容是否有更新，如果没有就响应 304，避免重新下载。</p>\n<p>当然，启用 Etag 可能会导致其他问题，还需要根据具体情况做判断。（TODO：补充相关内容）</p>\n<h3 id="尽早输出（flush）缓冲"><a href="#%E5%B0%BD%E6%97%A9%E8%BE%93%E5%87%BA%EF%BC%88flush%EF%BC%89%E7%BC%93%E5%86%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>尽早输出（flush）缓冲</h3>\n<p>用户请求页面时，服务器通常需要花费 200 ~ 500 毫秒来组合 HTML 页面。在此期间，浏览器处于空闲、等待数据状态。使用 PHP 中的 flush() 函数，可以发送部分已经准备好的 HTML 到浏览器，以便服务器还在忙于处理剩余页面时，浏览器可以提前开始获取资源。</p>\n<p>可以考虑在 <code class="language-text">&lt;/head&gt;</code> 之后输出一次缓冲，HTML head 一般比较容易生成，先发送以便浏览器开始获取 <code class="language-text">&lt;head&gt;</code> 里引用的 CSS 等资源。</p>\n<p>Example:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="88022915862963420000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<!-- css, js -->\n</head>\n<?php flush(); ?>\n<body>\n<!-- content -->`, `88022915862963420000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                php 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="php"><pre style="counter-reset: linenumber NaN" class="language-php line-numbers"><code class="language-php"><span class="token comment">&lt;!-- css, js --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- content --></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="ajax-请求使用-get-方法"><a href="#ajax-%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8-get-%E6%96%B9%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ajax 请求使用 GET 方法</h3>\n<p>浏览器执行 XMLHttpRequest POST 请求时分成两步，先发送 Header，再发送数据。而 GET 只使用一个 TCP 数据包发送数据，所以首选 GET 方法。</p>\n<p>根据 HTTP 规范，GET 用于获取数据，POST 则用于向服务器发送数据，所以 Ajax 请求数据时使用 GET 更符合规范（GET 和 POST 对比）。</p>\n<p>IE 中最大 URL 长度为 2K，如果超出 2K，则需要考虑使用 POST 方法。</p>\n<h3 id="避免图片-src-为空"><a href="#%E9%81%BF%E5%85%8D%E5%9B%BE%E7%89%87-src-%E4%B8%BA%E7%A9%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>避免图片 src 为空</h3>\n<p>图片 src 属性值为空字符串可能以下面两种形式出现：</p>\n<p>HTML:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="71444315718117530000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<img src=&quot;&quot; />`, `71444315718117530000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>JavaScript：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="99038277729263570000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`var img = new Image();\nimg.src = \'\';`, `99038277729263570000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                js 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="js"><pre style="counter-reset: linenumber NaN" class="language-js line-numbers"><code class="language-js"><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nimg<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>虽然 src 属性为空字符串，但浏览器仍然会向服务器发起一个 HTTP 请求：</p>\n<ul>\n<li>IE 向页面所在的目录发送请求；</li>\n<li>Safari、Chrome、Firefox 向页面本身发送请求；</li>\n<li>Opera 不执行任何操作。</li>\n</ul>\n<blockquote>\n<p>以上数据较老，当下主流版本可能会有改变。</p>\n</blockquote>\n<p>空 src 产生请求的后果不容小觑：</p>\n<ul>\n<li>给服务器造成意外的流量负担，尤其时日 PV 较大时；</li>\n<li>浪费服务器计算资源；</li>\n<li>可能产生报错。</li>\n</ul>\n<p>当然，浏览器如此实现也是根据 RFC 3986 - Uniform Resource Identifiers，当空字符串作为 URI 出现时，被当成相对 URI，具体算法参见规范 5.2 节。</p>\n<p>参考链接：</p>\n<p><a href="https://www.nczonline.net/blog/2009/11/30/empty-image-src-can-destroy-your-site/" target="_blank" rel="nofollow noreferrer noopener">Empty image src can destroy your site</a></p>\n<blockquote>\n<p>空的 href 属性也存在类似问题。用户点击空链接时，浏览器也会向服务器发送 HTTP 请求，可以通过 JavaScript 阻止空链接的默认的行为。</p>\n</blockquote>\n<h2 id="cookie"><a href="#cookie" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cookie</h2>\n<h3 id="减少-cookie-大小"><a href="#%E5%87%8F%E5%B0%91-cookie-%E5%A4%A7%E5%B0%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减少 Cookie 大小</h3>\n<p>Cookie 被用于身份认证、个性化设置等诸多用途。Cookie 通过 HTTP 头在服务器和浏览器间来回传送，减少 Cookie 大小可以降低其对响应速度的影响。</p>\n<ul>\n<li>去除不必要的 Cookie；</li>\n<li>尽量压缩 Cookie 大小；</li>\n<li>注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；</li>\n<li>设置合适的过期时间。</li>\n</ul>\n<p>更多细节参考 <a href="http://yuiblog.com/blog/2007/03/01/performance-research-part-3/" target="_blank" rel="nofollow noreferrer noopener">When the Cookie Crumbles。</a></p>\n<blockquote>\n<p>HTTP/2 首部压缩在客户端和服务器端使用「首部表」来跟踪和存储之前发送的键值对，对于相同的数据，不再随每次请求和响应发送。</p>\n</blockquote>\n<h3 id="静态资源使用无-cookie-域名"><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8%E6%97%A0-cookie-%E5%9F%9F%E5%90%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>静态资源使用无 Cookie 域名</h3>\n<p>静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。</p>\n<h2 id="css"><a href="#css" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>CSS</h2>\n<h3 id="把样式表放在-head-中"><a href="#%E6%8A%8A%E6%A0%B7%E5%BC%8F%E8%A1%A8%E6%94%BE%E5%9C%A8-head-%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>把样式表放在 <head> 中</h3>\n<p>把样式表放在 <code class="language-text">&lt;head&gt;</code> 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。</p>\n<p>这对内容比较多的页面尤为重要，用户可以先查看已经下载渲染的内容，而不是盯着白屏等待。</p>\n<p>如果把样式表放在页面底部，一些浏览器为减少重绘，会在 CSS 加载完成以后才渲染页面，用户只能对着白屏干瞪眼，用户体验极差。</p>\n<h3 id="不要使用-css-表达式"><a href="#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8-css-%E8%A1%A8%E8%BE%BE%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>不要使用 CSS 表达式</h3>\n<p>CSS 表达式可以在 CSS 里执行 JavaScript，仅 IE5-IE7 支持，IE8 标准模式已经废弃。</p>\n<p>CSS 表达式超出预期的频繁执行，页面滚动、鼠标移动时都会不断执行，带来很大的性能损耗。</p>\n<blockquote>\n<p>IE7 及更低版本的浏览器已经逐渐成为历史，忘记它吧。</p>\n</blockquote>\n<h3 id="使用-link-替代-import"><a href="#%E4%BD%BF%E7%94%A8-link-%E6%9B%BF%E4%BB%A3-import" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 <link> 替代 @import</h3>\n<p>对于 IE 某些版本，@import 的行为和 <code class="language-text">&lt;link&gt;</code> 放在页面底部一样。所以，不要用它。</p>\n<h3 id="不要使用-filter"><a href="#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8-filter" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>不要使用 filter</h3>\n<p>AlphaImageLoader 为 IE5.5-IE8 专有的技术，和 CSS 表达式一样，放进博物馆吧。</p>\n<blockquote>\n<p>注意：这里所说的不是 CSS3 Filter，参考文章 Understanding CSS Filter Effects</p>\n</blockquote>\n<h2 id="javascript"><a href="#javascript" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JavaScript</h2>\n<h3 id="把脚本放在页面底部"><a href="#%E6%8A%8A%E8%84%9A%E6%9C%AC%E6%94%BE%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>把脚本放在页面底部</h3>\n<p>浏览器下载脚本时，会阻塞其他资源并行下载，即使是来自不同域名的资源。因此，最好将脚本放在底部，以提高页面加载速度。</p>\n<p>一些特殊场景无法将脚本放到页面底部的，可以考虑<code class="language-text">&lt;script&gt;</code> 的以下属性：</p>\n<ul>\n<li>defer 属性；</li>\n<li>HTML5 新增的 async 属性。</li>\n</ul>\n<h3 id="使用外部-javascript-和-css"><a href="#%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8-javascript-%E5%92%8C-css" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用外部 JavaScript 和 CSS</h3>\n<p>外部 JavaScript 和 CSS 文件可以被浏览器缓存，在不同页面间重用，也能降低页面大小。</p>\n<p>当然，实际中也需要考虑代码的重用程度。如果仅仅是某个页面使用到的代码，可以考虑内嵌在页面中，减少 HTTP 请求数。另外，可以在首页加载完成以后，预先加载子页面的资源。</p>\n<h3 id="压缩-javascript-和-css"><a href="#%E5%8E%8B%E7%BC%A9-javascript-%E5%92%8C-css" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>压缩 JavaScript 和 CSS</h3>\n<p>压缩代码可以移除非功能性的字符（注释、空格、空行等），减少文件大小，提高载入速度。</p>\n<blockquote>\n<p>得益于 Node.js 的流行，开源社区涌现出许多高效、易用的前端优化工具，JavaScript 和 CSS 压缩类的，不敢说多如牛毛，多如鸡毛倒是一点不夸张，如 <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="nofollow noreferrer noopener">UglifyJS 2</a>、csso、cssnano 等。对于内嵌的 CSS 和 JavaScript，也可以通过 htmlmin 等工具压缩。这些项目都有 Gulp、Webpack 等流行构建工具的配套版本。</p>\n</blockquote>\n<h3 id="移除重复脚本"><a href="#%E7%A7%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E8%84%9A%E6%9C%AC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>移除重复脚本</h3>\n<p>重复的脚本不仅产生不必要的 HTTP 请求，而且重复解析执行浪费时间和计算资源。</p>\n<h3 id="减少-dom-操作"><a href="#%E5%87%8F%E5%B0%91-dom-%E6%93%8D%E4%BD%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减少 DOM 操作</h3>\n<p>JavaScript 操作 DOM 很慢，尤其是 DOM 节点很多时。</p>\n<p>使用时应该注意：</p>\n<ul>\n<li>缓存已经访问过的元素；</li>\n<li>使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；</li>\n<li>操作 className，而不是多次读写 style；</li>\n<li>避免使用 JavaScript 修复布局。</li>\n</ul>\n<h3 id="使用高效的事件处理"><a href="#%E4%BD%BF%E7%94%A8%E9%AB%98%E6%95%88%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用高效的事件处理</h3>\n<ul>\n<li>减少绑定事件监听的节点，如通过事件委托；</li>\n<li>尽早处理事件，在 DOMContentLoaded 即可进行，不用等到 load 以后。</li>\n</ul>\n<blockquote>\n<p>对于 resize、scroll 等触发频率极高的事件，应该通过 debounce 等机制降低处理程序执行频率。</p>\n</blockquote>\n<h2 id="图片"><a href="#%E5%9B%BE%E7%89%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>图片</h2>\n<h3 id="优化图片"><a href="#%E4%BC%98%E5%8C%96%E5%9B%BE%E7%89%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>优化图片</h3>\n<p>YDN 列出的相关工具 缺乏易用性，建议参考以下工具。</p>\n<ul>\n<li>imagemin</li>\n<li>ImageOptim</li>\n</ul>\n<blockquote>\n<p>TODO:</p>\n<ul>\n<li>PNG 终极优化；</li>\n<li>Webp 相关内容；</li>\n<li>SVG 相关内容。</li>\n</ul>\n</blockquote>\n<h3 id="png-终极优化"><a href="#png-%E7%BB%88%E6%9E%81%E4%BC%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>PNG 终极优化</h3>\n<ul>\n<li>Most Effective Method to Reduce and Optimize PNG Images</li>\n<li>Clever PNG Optimization Techniques</li>\n</ul>\n<h3 id="优化-css-sprite"><a href="#%E4%BC%98%E5%8C%96-css-sprite" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>优化 CSS Sprite</h3>\n<p>水平排列 Sprite 中的图片，垂直排列会增加图片大小； Spirite 中把颜色较近的组合在一起可以降低颜色数，理想状况是低于 256 色以适用 PNG8 格式；不要在 Spirite 的图像中间留有较大空隙。减少空隙虽然不太影响文件大小，但可以降低用户代理把图片解压为像素图的内存消耗，对移动设备更友好。</p>\n<h3 id="不要在-html-中缩放图片"><a href="#%E4%B8%8D%E8%A6%81%E5%9C%A8-html-%E4%B8%AD%E7%BC%A9%E6%94%BE%E5%9B%BE%E7%89%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>不要在 HTML 中缩放图片</h3>\n<p>不要使用 <code class="language-text">&lt;img&gt;</code> 的 width、height 缩放图片，如果用到小图片，就使用相应大小的图片。</p>\n<blockquote>\n<p>很多 CMS 和 CDN 都提供图片裁切功能。</p>\n</blockquote>\n<h3 id="使用体积小、可缓存的-faviconico"><a href="#%E4%BD%BF%E7%94%A8%E4%BD%93%E7%A7%AF%E5%B0%8F%E3%80%81%E5%8F%AF%E7%BC%93%E5%AD%98%E7%9A%84-faviconico" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用体积小、可缓存的 favicon.ico</h3>\n<p>Favicon.ico 一般存放在网站根目录下，无论是否在页面中设置，浏览器都会尝试请求这个文件。</p>\n<p>所以确保这个图标：</p>\n<ul>\n<li>存在（避免 404）；</li>\n<li>尽量小，最好小于 1K；</li>\n<li>设置较长的过期时间。</li>\n</ul>\n<blockquote>\n<p>对于较新的浏览器，可以使用 PNG 格式的 favicon。</p>\n</blockquote>\n<p>参考链接：</p>\n<p>Favicons, Touch Icons, Tile Icons, etc. Which Do You Need?</p>\n<blockquote>\n<p>图片相关补充设置图片的宽和高，以免浏览器按照「猜」的宽高给图片保留的区域和实际宽高差异，产生重绘。</p>\n</blockquote>\n<h2 id="移动端"><a href="#%E7%A7%BB%E5%8A%A8%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>移动端</h2>\n<blockquote>\n<p>移动端优化相关内容有待进一步整理补充。</p>\n</blockquote>\n<h3 id="保持单个文件小于-25-kb"><a href="#%E4%BF%9D%E6%8C%81%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E5%B0%8F%E4%BA%8E-25-kb" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://developer.yahoo.com/performance/rules.html#under25" target="_blank" rel="nofollow noreferrer noopener">保持单个文件小于 25 KB</a></h3>\n<h3 id="打包内容为分段（multipart）文档"><a href="#%E6%89%93%E5%8C%85%E5%86%85%E5%AE%B9%E4%B8%BA%E5%88%86%E6%AE%B5%EF%BC%88multipart%EF%BC%89%E6%96%87%E6%A1%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="https://developer.yahoo.com/performance/rules.html#multipart" target="_blank" rel="nofollow noreferrer noopener">打包内容为分段（multipart）文档</a></h3>',
id:"/github/workspace/blog/前端性能优化/index.md absPath of file >>> MarkdownRemark",timeToRead:12,frontmatter:{date:"2018-01-05 23:49:44",path:"/front-end-performance-optimization/",tags:"面试, 前端, 前端性能优化",title:"前端性能优化最佳实践",draft:null}}],length:133,tag:"前端",pagesSum:27,page:25}}}});