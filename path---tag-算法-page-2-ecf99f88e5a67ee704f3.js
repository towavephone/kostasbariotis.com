webpackJsonp([93223738411919],{1406:function(n,s){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"重建二叉树 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。",html:'<h2 id="重建二叉树"><a href="#%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>重建二叉树</h2>\n<blockquote>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n</blockquote>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="65353966748720250000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include<iostream>\n#include<vector>\n#include<queue>\nusing namespace std;\n\nstruct TreeNode\n{\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x)\n        : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution\n{\npublic:\n    static TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> in)\n    {\n        int in_size = in.size();\n        int pre_size = pre.size();\n        if(in_size == 0 || pre_size == 0)\n        {\n            return NULL;\n        }\n        int rootValue = pre[0];\n        TreeNode* root = new TreeNode(rootValue);\n        if(pre_size == 1 && in_size == 1 && pre[0] == in[0])\n        {\n            return root;\n        }\n        vector<int> pre_left;\n        vector<int> pre_right;\n        vector<int> in_left;\n        vector<int> in_right;\n\n        int leftLength;\n        for(int i = 0; i< in_size; i++)\n        {\n            if(in[i] == rootValue)\n            {\n                // 在中序遍历中找到根节点位置，它的两边即为左右子树\n                leftLength = i;\n                break;\n            }\n        }\n        // 分别放到对应的数组\n        for(int i = 1; i < pre_size; i++)\n        {\n            if(i <= leftLength)\n            {\n                pre_left.push_back(pre[i]);\n            }\n            else\n            {\n                pre_right.push_back(pre[i]);\n            }\n        }\n        for(int i = 0; i < in_size; i++)\n        {\n            if(i < leftLength)\n            {\n                in_left.push_back(in[i]);\n            }\n            else if(i != leftLength)\n            {\n                in_right.push_back(in[i]);\n            }\n        }\n        if(leftLength > 0)\n        {\n            // 构建左子树\n            root->left = reConstructBinaryTree(pre_left, in_left);\n        }\n        if(leftLength < in_size)\n        {\n            // 构建右子树\n            root->right = reConstructBinaryTree(pre_right, in_right);\n        }\n        return root;\n    }\n};\n//广度优先遍历\nvoid BFS(TreeNode* root){\n    queue<TreeNode *> nodeQueue;  //使用C++的STL标准模板库\n    nodeQueue.push(root);\n    TreeNode *node;\n    while(!nodeQueue.empty()){\n        node = nodeQueue.front();\n        nodeQueue.pop();\n        cout<<node->val;\n        if(node->left){\n            nodeQueue.push(node->left);  //先将左子树入队\n        }\n        if(node->right){\n            nodeQueue.push(node->right);  //再将右子树入队\n        }\n    }\n}\nint main()\n{\n    int i = 0, j = 0;\n    vector<int> pre;\n    vector<int> in;\n    while(cin>>i && i != -1)\n    {\n        pre.push_back(i);\n    }\n    while(cin>>j && j != -1)\n    {\n        in.push_back(j);\n    }\n    //while(head != NULL)\n    //{\n    //    cout<<head->val;\n    //    head = head->next;\n    //}\n    BFS(Solution::reConstructBinaryTree(pre, in));\n    return 0;\n}`, `65353966748720250000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> val<span class="token punctuation">;</span>\n    TreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>\n    TreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span>\n    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>\n        <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Solution</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> TreeNode<span class="token operator">*</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pre<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> in<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> in_size <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> pre_size <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>in_size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> pre_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> rootValue <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>rootValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>pre_size <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> in_size <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pre_left<span class="token punctuation">;</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pre_right<span class="token punctuation">;</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> in_left<span class="token punctuation">;</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> in_right<span class="token punctuation">;</span>\n\n        <span class="token keyword">int</span> leftLength<span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> in_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> rootValue<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token comment">// 在中序遍历中找到根节点位置，它的两边即为左右子树</span>\n                leftLength <span class="token operator">=</span> i<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 分别放到对应的数组</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pre_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> leftLength<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                pre_left<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span>\n            <span class="token punctuation">{</span>\n                pre_right<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> leftLength<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                in_left<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> leftLength<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                in_right<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>leftLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 构建左子树</span>\n            root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre_left<span class="token punctuation">,</span> in_left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>leftLength <span class="token operator">&lt;</span> in_size<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 构建右子树</span>\n            root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre_right<span class="token punctuation">,</span> in_right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">//广度优先遍历</span>\n<span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    queue<span class="token operator">&lt;</span>TreeNode <span class="token operator">*</span><span class="token operator">></span> nodeQueue<span class="token punctuation">;</span>  <span class="token comment">//使用C++的STL标准模板库</span>\n    nodeQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    TreeNode <span class="token operator">*</span>node<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        node <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        nodeQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cout<span class="token operator">&lt;&lt;</span>node<span class="token operator">-></span>val<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            nodeQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先将左子树入队</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            nodeQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//再将右子树入队</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pre<span class="token punctuation">;</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> in<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>i <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        pre<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>j <span class="token operator">&amp;&amp;</span> j <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        in<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//while(head != NULL)</span>\n    <span class="token comment">//{</span>\n    <span class="token comment">//    cout&lt;&lt;head->val;</span>\n    <span class="token comment">//    head = head->next;</span>\n    <span class="token comment">//}</span>\n    <span class="token function">BFS</span><span class="token punctuation">(</span>Solution<span class="token operator">::</span><span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',id:"/github/workspace/blog/剑指offer算法——树/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2018-02-25 14:59:45",path:"/offer-binary-tree/",tags:"面试, 算法",title:"剑指offer算法题——树",draft:null}},{excerpt:"链表操作 链表末尾添加节点 删除含有某值的节点 从尾到头打印链表 题目描述：输入一个链表，从尾到头打印链表每个节点的值。 栈实现 递归实现",html:'<h2 id="链表操作"><a href="#%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>链表操作</h2>\n<h3 id="链表末尾添加节点"><a href="#%E9%93%BE%E8%A1%A8%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>链表末尾添加节点</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="81351540101242650000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`struct ListNode\n{\n    int m_nValue;\n    ListNode* m_pNext;\n};\nvoid AddToTail(ListNode** pHead, int value)\n{\n    ListNode *pNew = new ListNode();\n    pNew->m_nValue = value;\n    pNew->m_pNext = NULL;\n    if(*pHead == NULL)\n    {\n        *pHead = pNew;\n    }\n    else\n    {\n        ListNode* pNode = *pHead;\n        while(pNode->m_pNext != NULL)\n        {\n            pNode = pNode->m_pNext;\n        }\n        pNode->m_pNext = pNew;\n    }\n}`, `81351540101242650000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> m_nValue<span class="token punctuation">;</span>\n    ListNode<span class="token operator">*</span> m_pNext<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">AddToTail</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    ListNode <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pNew<span class="token operator">-></span>m_nValue <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    pNew<span class="token operator">-></span>m_pNext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token operator">*</span>pHead <span class="token operator">=</span> pNew<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span>\n    <span class="token punctuation">{</span>\n        ListNode<span class="token operator">*</span> pNode <span class="token operator">=</span> <span class="token operator">*</span>pHead<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode<span class="token operator">-></span>m_pNext <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            pNode <span class="token operator">=</span> pNode<span class="token operator">-></span>m_pNext<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        pNode<span class="token operator">-></span>m_pNext <span class="token operator">=</span> pNew<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="删除含有某值的节点"><a href="#%E5%88%A0%E9%99%A4%E5%90%AB%E6%9C%89%E6%9F%90%E5%80%BC%E7%9A%84%E8%8A%82%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>删除含有某值的节点</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14241014875626922000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`void RemoveNode(ListNode** pHead, int value)\n{\n    if(*pHead == NULL || **pHead == NULL)\n    {\n        return;\n    }\n    ListNode *isToBeDeteled = NULL;\n    if((*pHead)->m_nValue == value)\n    {\n        isToBeDeleted = *pHead;\n        *pHead = (*pHead)->m_pNext;\n    }\n    else\n    {\n        ListNode *pNode = *pHead;\n        while(pNode->m_pNext != NULL && pNode->m_pNext->m_nValue != value)\n        {\n            pNode = pNode->m_pNext;\n        }\n        if(pNode->m_pNext != NULL && pNode->m_pNext->m_nValue == value)\n        {\n            isToBeDeleted = pNode->m_pNext;\n            pNode->m_pNext = pNode->m_pNext->m_pNext;\n        }\n    }\n    if(isToBeDeleted != NULL)\n    {\n        delete isToBeDeleted;\n        isToBeDeleted = NULL;\n    }\n}`, `14241014875626922000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">RemoveNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token operator">*</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    ListNode <span class="token operator">*</span>isToBeDeteled <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pHead<span class="token punctuation">)</span><span class="token operator">-></span>m_nValue <span class="token operator">==</span> value<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        isToBeDeleted <span class="token operator">=</span> <span class="token operator">*</span>pHead<span class="token punctuation">;</span>\n        <span class="token operator">*</span>pHead <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pHead<span class="token punctuation">)</span><span class="token operator">-></span>m_pNext<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span>\n    <span class="token punctuation">{</span>\n        ListNode <span class="token operator">*</span>pNode <span class="token operator">=</span> <span class="token operator">*</span>pHead<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode<span class="token operator">-></span>m_pNext <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pNode<span class="token operator">-></span>m_pNext<span class="token operator">-></span>m_nValue <span class="token operator">!=</span> value<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            pNode <span class="token operator">=</span> pNode<span class="token operator">-></span>m_pNext<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>pNode<span class="token operator">-></span>m_pNext <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pNode<span class="token operator">-></span>m_pNext<span class="token operator">-></span>m_nValue <span class="token operator">==</span> value<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            isToBeDeleted <span class="token operator">=</span> pNode<span class="token operator">-></span>m_pNext<span class="token punctuation">;</span>\n            pNode<span class="token operator">-></span>m_pNext <span class="token operator">=</span> pNode<span class="token operator">-></span>m_pNext<span class="token operator">-></span>m_pNext<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>isToBeDeleted <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">delete</span> isToBeDeleted<span class="token punctuation">;</span>\n        isToBeDeleted <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="从尾到头打印链表"><a href="#%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>从尾到头打印链表</h2>\n<blockquote>\n<p>题目描述：输入一个链表，从尾到头打印链表每个节点的值。</p>\n</blockquote>\n<h3 id="栈实现"><a href="#%E6%A0%88%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>栈实现</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="83255833528570460000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include<iostream>\n#include<vector>\n#include<stack>\nusing namespace std;\nstruct ListNode\n{\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(NULL)\n    {\n    }\n};\n\nclass Solution\n{\npublic:\n    static vector<int> printListFromTailToHead(struct ListNode* head)\n    {\n        stack<ListNode*> nodes;\n        ListNode *pNode=head;\n        vector<int> arr;\n        while(pNode!=NULL)\n        {\n            nodes.push(pNode);\n            pNode=pNode->next;\n        }\n        while(!nodes.empty())\n        {\n            pNode=nodes.top();\n            arr.push_back(pNode->val);\n            nodes.pop();\n        }\n        return arr;\n    }\n};\nvoid AddToTail(ListNode** pHead, int val)\n{\n    ListNode* pNew = new ListNode(val);\n    if(*pHead == NULL)\n    {\n        *pHead = pNew;\n    }\n    else\n    {\n        ListNode* pNode = *pHead;\n        while(pNode->next != NULL)\n        {\n            pNode = pNode->next;\n        }\n        pNode->next = pNew;\n    }\n}\nint main()\n{\n    ListNode* head = NULL;\n    int i = 0;\n    while(cin>>i && i != -1){\n        // 注意此处的head为地址的地址，即二级指针\n        AddToTail(&head, i);\n    }\n    //while(head != NULL)\n    //{\n    //    cout<<head->val;\n    //    head = head->next;\n    //}\n    vector<int> tmp = Solution::printListFromTailToHead(head);\n    for (int val : tmp)\n    {\n        cout << val << \' \';\n    }\n    return 0;\n}`, `83255833528570460000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n<span class="token keyword">struct</span> <span class="token class-name">ListNode</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> val<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>\n    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span>\n        <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Solution</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        stack<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">></span> nodes<span class="token punctuation">;</span>\n        ListNode <span class="token operator">*</span>pNode<span class="token operator">=</span>head<span class="token punctuation">;</span>\n        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            pNode<span class="token operator">=</span>pNode<span class="token operator">-></span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nodes<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            pNode<span class="token operator">=</span>nodes<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pNode<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            nodes<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">AddToTail</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token operator">*</span> pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    ListNode<span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token operator">*</span>pHead <span class="token operator">=</span> pNew<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span>\n    <span class="token punctuation">{</span>\n        ListNode<span class="token operator">*</span> pNode <span class="token operator">=</span> <span class="token operator">*</span>pHead<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>pNode<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            pNode <span class="token operator">=</span> pNode<span class="token operator">-></span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        pNode<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    ListNode<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>i <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 注意此处的head为地址的地址，即二级指针</span>\n        <span class="token function">AddToTail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//while(head != NULL)</span>\n    <span class="token comment">//{</span>\n    <span class="token comment">//    cout&lt;&lt;head->val;</span>\n    <span class="token comment">//    head = head->next;</span>\n    <span class="token comment">//}</span>\n    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token operator">=</span> Solution<span class="token operator">::</span><span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">:</span> tmp<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">\' \'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="递归实现"><a href="#%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>递归实现</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68188428849174370000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 重复部分略过\nstatic void printListFromTailToHead(struct ListNode* head)\n{\n    if(head != NULL)\n    {\n        if(head->next != NULL)\n        {\n            printListFromTailToHead(head->next);\n        }\n        cout<<head->val<<\' \';\n    }\n}`, `68188428849174370000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token comment">// 重复部分略过</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        cout<span class="token operator">&lt;&lt;</span>head<span class="token operator">-></span>val<span class="token operator">&lt;&lt;</span><span class="token string">\' \'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',
id:"/github/workspace/blog/剑指offer算法——链表/index.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{date:"2018-02-21 11:04:04",path:"/offer-linked-list/",tags:"面试, 算法",title:"剑指offer算法题——链表",draft:null}},{excerpt:"单例模式 加同步锁前两次后判断实例是否存在 Singleton 加锁模式确保多线程下只创建一个实例 缺点：实现复杂，容易出错 利用静态构造函数（C#版） C#语法中有一个函数能够确保只调用一次，即静态构造函数 缺点：第一次用到 Singleton…",html:'<h2 id="单例模式"><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>单例模式</h2>\n<h3 id="加同步锁前两次后判断实例是否存在"><a href="#%E5%8A%A0%E5%90%8C%E6%AD%A5%E9%94%81%E5%89%8D%E4%B8%A4%E6%AC%A1%E5%90%8E%E5%88%A4%E6%96%AD%E5%AE%9E%E4%BE%8B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>加同步锁前两次后判断实例是否存在</h3>\n<blockquote>\n<p>Singleton 加锁模式确保多线程下只创建一个实例</p>\n</blockquote>\n<blockquote>\n<p>缺点：实现复杂，容易出错</p>\n</blockquote>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97913224865011120000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`public sealed class Singleton3\n{\n    private Singleton3()\n    {\n    }\n    private static object syncObj = new Object();\n    private static Singleton3 instance = null;\n    public static Singleton3 Instance\n    {\n        get\n        {\n            if(instance == null)\n            {\n                lock(syncObj){\n                    if(instance == null)\n                    {\n                        instance = new Singleton3();\n                    }\n                }\n            }\n            return instance;\n        }\n    }\n}`, `97913224865011120000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token keyword">public</span> sealed <span class="token keyword">class</span> <span class="token class-name">Singleton3</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token function">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> object syncObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton3 instance <span class="token operator">=</span> null<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton3 Instance\n    <span class="token punctuation">{</span>\n        get\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token function">lock</span><span class="token punctuation">(</span>syncObj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>\n                    <span class="token punctuation">{</span>\n                        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="利用静态构造函数（c版）"><a href="#%E5%88%A9%E7%94%A8%E9%9D%99%E6%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%88c%E7%89%88%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>利用静态构造函数（C#版）</h3>\n<blockquote>\n<p>C#语法中有一个函数能够确保只调用一次，即静态构造函数</p>\n</blockquote>\n<blockquote>\n<p>缺点：第一次用到 Singleton4 的时候就被创建，不能按需创建</p>\n</blockquote>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="93792431116661180000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`public sealed class Singleton4\n{\n    private Sinleton4(){\n\n    }\n    private static Singleton4 instance = new Singleton4();\n    public static Sinleton4 Instance\n    {\n        get\n        {\n            return instance;\n        }\n    }\n}`, `93792431116661180000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token keyword">public</span> sealed <span class="token keyword">class</span> <span class="token class-name">Singleton4</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token function">Sinleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton4 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> Sinleton4 Instance\n    <span class="token punctuation">{</span>\n        get\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="实现按需创建实例"><a href="#%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%9C%80%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>实现按需创建实例</h3>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="78240231031918720000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`public sealed class Sinleton5\n{\n    Singleton5()\n    {\n    }\n    public static Singleton5 Instance\n    {\n        get\n        {\n            return Nested.instance;\n        }\n    }\n    class Nested\n    {\n        static Nested()\n        {\n        }\n        internal static readonly Sington5 instance = new Singleton5();\n    }\n}`, `78240231031918720000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token keyword">public</span> sealed <span class="token keyword">class</span> <span class="token class-name">Sinleton5</span>\n<span class="token punctuation">{</span>\n    <span class="token function">Singleton5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton5 Instance\n    <span class="token punctuation">{</span>\n        get\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> Nested<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">class</span> <span class="token class-name">Nested</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">static</span> <span class="token function">Nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n        internal <span class="token keyword">static</span> readonly Sington5 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="二维数组中的查找"><a href="#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>二维数组中的查找</h2>\n<blockquote>\n<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<blockquote>\n<p>要点：从右上角开始遍历，遍历值小于目标值排除此行即到下一行找，大于的话排除此列即到上一列开始找，直到找到为止。</p>\n</blockquote>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="52223370001546020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include<iostream>\n#include<cstring>\n#include<vector>\nusing namespace std;\nclass Solution\n{\npublic:\n    bool Find(int target, vector<vector<int> > array)\n    {\n        if(array.empty()) return false;\n        bool found = false;\n        int row = 0;\n        int column = array.size()-1;\n        while(row < array[0].size() && column >= 0)\n        {\n            if(array[row][column]==target)\n            {\n                found=true;\n                break;\n            }\n            else if(array[row][column]<target)\n            {\n                row++;\n            }\n            else\n            {\n                column--;\n            }\n        }\n        return found;\n    }\n};\nint main()\n{\n    int n;\n    vector<vector<int>> a = {{1,2,8,9},{2,4,9,12},{4,7,10,13},{6,8,11,15}};\n    while(cin>>n)\n    {\n        Solution s;\n        bool found = s.Find(n, a);\n        cout<<found<<endl;\n    }\n    return 0;\n}`, `52223370001546020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">Solution</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">bool</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> array<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">bool</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> column <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> column <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                found<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                row<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span>\n            <span class="token punctuation">{</span>\n                column<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> found<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> n<span class="token punctuation">;</span>\n    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Solution s<span class="token punctuation">;</span>\n        <span class="token keyword">bool</span> found <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cout<span class="token operator">&lt;&lt;</span>found<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="替换空格"><a href="#%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>替换空格</h2>\n<blockquote>\n<p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。</p>\n</blockquote>\n<blockquote>\n<p>思路：从后往前替换会好的多，合并两个数组时也可以考虑从后往前复制</p>\n</blockquote>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36790267934219490000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include<iostream>\n#include<cstring>\n#include<vector>\nusing namespace std;\nclass Solution\n{\npublic:\n    /*length为字符串容量，不是字符串的长度*/\n    void replaceSpace(char *str,int length)\n    {\n        if(str == NULL && length <= 0)\n        {\n            return;\n        }\n        int numberOfBlank = 0;\n        int originalLength = 0;\n        while(str[originalLength]!=\'\\0\')\n        {\n            if(str[originalLength]==\' \')\n            {\n                numberOfBlank++;\n            }\n            originalLength++;\n        }\n        int newLength = originalLength + 2 * numberOfBlank;\n        if(newLength > length)\n        {\n            return;\n        }\n        int indexOfNew = newLength;\n        int indexOfOriginal = originalLength;\n        // 可能有字符串不存在空格的情况\n        while(indexOfOriginal >= 0 && indexOfNew >= indexOfOriginal)\n        {\n            if(str[indexOfOriginal] == \' \')\n            {\n                str[indexOfNew--] = \'0\';\n                str[indexOfNew--] = \'2\';\n                str[indexOfNew--] = \'%\';\n            }\n            else\n            {\n                str[indexOfNew--] = str[indexOfOriginal];\n            }\n            indexOfOriginal--;\n        }\n    }\n};\nint main()\n{\n    char str[1000];\n    while(cin.getline(str, 1000))\n    {\n        Solution s;\n        s.replaceSpace(str, 1000);\n        cout<<str<<endl;\n    }\n    return 0;\n}`, `36790267934219490000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">Solution</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">/*length为字符串容量，不是字符串的长度*/</span>\n    <span class="token keyword">void</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> numberOfBlank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> originalLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>originalLength<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">\'\\0\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>originalLength<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                numberOfBlank<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            originalLength<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> newLength <span class="token operator">=</span> originalLength <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> numberOfBlank<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>newLength <span class="token operator">></span> length<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> indexOfNew <span class="token operator">=</span> newLength<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> indexOfOriginal <span class="token operator">=</span> originalLength<span class="token punctuation">;</span>\n        <span class="token comment">// 可能有字符串不存在空格的情况</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>indexOfOriginal <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> indexOfNew <span class="token operator">>=</span> indexOfOriginal<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>indexOfOriginal<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">\' \'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                str<span class="token punctuation">[</span>indexOfNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'0\'</span><span class="token punctuation">;</span>\n                str<span class="token punctuation">[</span>indexOfNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'2\'</span><span class="token punctuation">;</span>\n                str<span class="token punctuation">[</span>indexOfNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'%\'</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span>\n            <span class="token punctuation">{</span>\n                str<span class="token punctuation">[</span>indexOfNew<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>indexOfOriginal<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            indexOfOriginal<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Solution s<span class="token punctuation">;</span>\n        s<span class="token punctuation">.</span><span class="token function">replaceSpace</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="旋转数组的最小数字"><a href="#%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>旋转数组的最小数字</h2>\n<blockquote>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为 1。 NOTE：给出的所有元素都大于 0，若数组大小为 0，请返回 0。</p>\n</blockquote>\n<blockquote>\n<p>思路：注意 1，1，1，0，1 这种情况，只能遍历得出结果</p>\n</blockquote>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68111737535891480000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include<iostream>\n#include<vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    static int minNumberInRotateArray(vector<int> rotateArray) {\n        if(rotateArray.size() <= 0)\n        {\n            return 0;\n        }\n        int index1 = 0;\n        int index2 = rotateArray.size() - 1;\n        // 考虑到数组有可能全部一样，初始化为index1\n        int mid = index1;\n        while(rotateArray[index1] >= rotateArray[index2])\n        {\n            if(index2 - index1 == 1)\n            {\n                mid = index2;\n                break;\n            }\n            mid = (index1 + index2) / 2;\n            if(rotateArray[mid] == rotateArray[index1] && rotateArray[mid] == rotateArray[index2])\n            {\n                int min = rotateArray[index1];\n                for(int i = index1; i < index2; i++)\n                {\n                    if(rotateArray[i] < min)\n                    {\n                        min = rotateArray[i];\n                    }\n                }\n                return min;\n            }\n            if(rotateArray[index1] <= rotateArray[mid])\n            {\n                index1 = mid;\n            }else if(rotateArray[index2] >= rotateArray[mid])\n            {\n                index2 = mid;\n            }\n        }\n        return rotateArray[mid];\n    }\n};\nint main()\n{\n    int a[1000];\n    int n = 0;\n    while(cin>>n)\n    {\n        for(int i = 0; i < n; i++)\n        {\n            cin>>a[i];\n        }\n        if(n > 0)\n        {\n            vector<int> arr(a,a+n);\n            cout<<Solution::minNumberInRotateArray(arr)<<endl;\n        }\n    }\n    return 0;\n}`, `68111737535891480000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                cpp 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="cpp"><pre style="counter-reset: linenumber NaN" class="language-cpp line-numbers"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rotateArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>rotateArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> index2 <span class="token operator">=</span> rotateArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token comment">// 考虑到数组有可能全部一样，初始化为index1</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> index1<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">>=</span> rotateArray<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>index2 <span class="token operator">-</span> index1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                mid <span class="token operator">=</span> index2<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            mid <span class="token operator">=</span> <span class="token punctuation">(</span>index1 <span class="token operator">+</span> index2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> rotateArray<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> rotateArray<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">int</span> min <span class="token operator">=</span> rotateArray<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n                <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span><span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>\n                    <span class="token punctuation">{</span>\n                        min <span class="token operator">=</span> rotateArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> min<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                index1 <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">>=</span> rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                index2 <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            cout<span class="token operator">&lt;&lt;</span>Solution<span class="token operator">::</span><span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',
id:"/github/workspace/blog/剑指offer算法——查找/index.md absPath of file >>> MarkdownRemark",timeToRead:4,frontmatter:{date:"2018-02-08 22:04:33",path:"/offer-find/",tags:"面试, 算法",title:"剑指offer算法题——查找",draft:null}}],length:8,tag:"算法",pagesSum:2,page:2}}}});