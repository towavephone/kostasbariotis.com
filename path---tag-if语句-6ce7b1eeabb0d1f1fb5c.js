webpackJsonp([99329431726685],{1287:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"需求 现在我们可以比较值了，是时候在我们的语言中添加 IF 语句了，因此让我们看一下 IF 语句的一般语法以及如何将它们转换为汇编语言。 准备 IF 语法 IF 语句的语法为： 通常如何将其转换为汇编语言？事实证明如果相反的比较成立，我们将执行相反的比较并跳转： 其中 L1 和 L2 是汇编语言标签。 在我们的编译器中生成程序集 现在我们输出代码以基于比较来设置寄存器，例如 变成 但是对于 IF 语句，我们需要进行相反的比较： 应该变成： 因此在这一部分中，我已经实现了 IF…",html:'<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>现在我们可以比较值了，是时候在我们的语言中添加 IF 语句了，因此让我们看一下 IF 语句的一般语法以及如何将它们转换为汇编语言。</p>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<h2 id="if-语法"><a href="#if-%E8%AF%AD%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>IF 语法</h2>\n<p>IF 语句的语法为：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">if (condition is true)\n  perform this first block of code\nelse\n  perform this other block of code</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>通常如何将其转换为汇编语言？事实证明如果相反的比较成立，我们将执行相反的比较并跳转：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">       perform the opposite comparison\n       jump to L1 if true\n       perform the first block of code\n       jump to L2\nL1:\n       perform the other block of code\nL2:</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中 L1 和 L2 是汇编语言标签。</p>\n<h2 id="在我们的编译器中生成程序集"><a href="#%E5%9C%A8%E6%88%91%E4%BB%AC%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F%E9%9B%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在我们的编译器中生成程序集</h2>\n<p>现在我们输出代码以基于比较来设置寄存器，例如</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15080480398302720000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`int x; x= 7 < 9;         From input04`, `15080480398302720000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span> x<span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span>         From input04</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>变成</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">movq    $7, %r8\nmovq    $9, %r9\ncmpq    %r9, %r8\nsetl    %r9b        Set if less than\nandq    $255,%r9</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但是对于 IF 语句，我们需要进行相反的比较：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="36108122139416277000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (7 < 9)`, `36108122139416277000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>应该变成：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">        movq    $7, %r8\n        movq    $9, %r9\n        cmpq    %r9, %r8\n        jge     L1         Jump if greater then or equal to\n        ....\nL1:</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>因此在这一部分中，我已经实现了 IF 语句。作为旅程的一部分，由于这是一个正在工作的项目，因此我确实必须撤消一些操作并将其重构。在此过程中，我将尝试介绍所做的更改以及添加的内容。</p>\n<h2 id="新元素和其他悬空元素"><a href="#%E6%96%B0%E5%85%83%E7%B4%A0%E5%92%8C%E5%85%B6%E4%BB%96%E6%82%AC%E7%A9%BA%E5%85%83%E7%B4%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新元素和其他悬空元素</h2>\n<p>我们将需要使用我们的语言的一堆新元素，我暂时也想避免其他问题。为此我更改了语法，以便所有语句组都用 <code class="language-text">{...}</code> 大括号括起来；我称这种分组为 <code class="language-text">复合语句</code>。我们还需要使用括号 <code class="language-text">(...)</code> 来容纳 IF 表达式以及关键字 if 和 else，因此新元素为（defs.h 中的代码）：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">T_LBRACE, T_RBRACE, T_LPAREN, T_RPAREN,\n// Keywords\n..., T_IF, T_ELSE</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="扫描令牌"><a href="#%E6%89%AB%E6%8F%8F%E4%BB%A4%E7%89%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>扫描令牌</h2>\n<p>单字符元素应该很明显，我不会给出扫描它们的代码。关键字也应该是很明显的，但我会从 scan.c 中给出扫描代码 keyword()：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="49718749183554540000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`switch (*s) {\n  case \'e\':\n    if (!strcmp(s, &quot;else&quot;))\n      return (T_ELSE);\n    break;\n  case \'i\':\n    if (!strcmp(s, &quot;if&quot;))\n      return (T_IF);\n    if (!strcmp(s, &quot;int&quot;))\n      return (T_INT);\n    break;\n  case \'p\':\n    if (!strcmp(s, &quot;print&quot;))\n      return (T_PRINT);\n    break;\n}`, `49718749183554540000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">\'e\'</span><span class="token operator">:</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"else"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>T_ELSE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token string">\'i\'</span><span class="token operator">:</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"if"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>T_IF<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>T_INT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token string">\'p\'</span><span class="token operator">:</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>T_PRINT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="新的-bnf-语法"><a href="#%E6%96%B0%E7%9A%84-bnf-%E8%AF%AD%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新的 BNF 语法</h2>\n<p>我们的语法开始变得越来越大，因此我对其进行了一些重写：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">compound_statement: &#39;{&#39; &#39;}&#39;          // empty, i.e. no statement\n    |      &#39;{&#39; statement &#39;}&#39;\n    |      &#39;{&#39; statement statements &#39;}&#39;\n    ;\n\nstatement: print_statement\n    |     declaration\n    |     assignment_statement\n    |     if_statement\n    ;\n\nprint_statement: &#39;print&#39; expression &#39;;&#39;  ;\n\ndeclaration: &#39;int&#39; identifier &#39;;&#39;  ;\n\nassignment_statement: identifier &#39;=&#39; expression &#39;;&#39;   ;\n\nif_statement: if_head\n    |        if_head &#39;else&#39; compound_statement\n    ;\n\nif_head: &#39;if&#39; &#39;(&#39; true_false_expression &#39;)&#39; compound_statement  ;\n\nidentifier: T_IDENT ;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我省略了定义 true<em>false</em>expression，但是在某些时候我们添加了更多运算符时我会添加它。</p>\n<p>请注意 IF 语句的语法：它是 if<em>head（没有 else 子句），或 if</em>head 后跟 else 和 a compound_statement。</p>\n<p>我已经分离出所有不同的语句类型以拥有自己的非终端名称，而且以前的 statements 非终结点现在 compound_statement 是非终结点，这要求在语句周围使用 <code class="language-text">{...}</code>。</p>\n<p>这意味着 compound<em>statement 头部中的被 <code class="language-text">{...}</code> 包围，compound</em>statement else 关键字之后的任何字符也被包围。因此如果我们嵌套了 IF 语句，它们必须看起来像：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="68690436336639700000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (condition1 is true) {\n  if (condition2 is true) {\n    statements;\n  } else {\n    statements;\n  }\n} else {\n  statements;\n}`, `68690436336639700000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1 is true<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2 is true<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    statements<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    statements<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  statements<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>并且每个 else 属于哪个 if 没有任何歧义，这解决了悬而未决的问题，稍后我将使 <code class="language-text">{...}</code> 为可选。</p>\n<h2 id="解析复合语句"><a href="#%E8%A7%A3%E6%9E%90%E5%A4%8D%E5%90%88%E8%AF%AD%E5%8F%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解析复合语句</h2>\n<p>现在的旧 void statements() 函数 compound_statement() 如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25140584353087150000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parse a compound statement\n// and return its AST\nstruct ASTnode *compound_statement(void) {\n  struct ASTnode *left = NULL;\n  struct ASTnode *tree;\n\n  // Require a left curly bracket\n  lbrace();\n\n  while (1) {\n    switch (Token.token) {\n      case T_PRINT:\n        tree = print_statement();\n        break;\n      case T_INT:\n        var_declaration();\n        tree = NULL;            // No AST generated here\n        break;\n      case T_IDENT:\n        tree = assignment_statement();\n        break;\n      case T_IF:\n        tree = if_statement();\n        break;\n    case T_RBRACE:\n        // When we hit a right curly bracket,\n        // skip past it and return the AST\n        rbrace();\n        return (left);\n      default:\n        fatald(&quot;Syntax error, token&quot;, Token.token);\n    }\n\n    // For each new tree, either save it in left\n    // if left is empty, or glue the left and the\n    // new tree together\n    if (tree) {\n      if (left == NULL)\n        left = tree;\n      else\n        left = mkastnode(A_GLUE, left, NULL, tree, 0);\n    }\n  }`, `25140584353087150000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parse a compound statement</span>\n<span class="token comment">// and return its AST</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">compound_statement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>tree<span class="token punctuation">;</span>\n\n  <span class="token comment">// Require a left curly bracket</span>\n  <span class="token function">lbrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> T_PRINT<span class="token operator">:</span>\n        tree <span class="token operator">=</span> <span class="token function">print_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> T_INT<span class="token operator">:</span>\n        <span class="token function">var_declaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        tree <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token comment">// No AST generated here</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> T_IDENT<span class="token operator">:</span>\n        tree <span class="token operator">=</span> <span class="token function">assignment_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> T_IF<span class="token operator">:</span>\n        tree <span class="token operator">=</span> <span class="token function">if_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_RBRACE<span class="token operator">:</span>\n        <span class="token comment">// When we hit a right curly bracket,</span>\n        <span class="token comment">// skip past it and return the AST</span>\n        <span class="token function">rbrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token function">fatald</span><span class="token punctuation">(</span><span class="token string">"Syntax error, token"</span><span class="token punctuation">,</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// For each new tree, either save it in left</span>\n    <span class="token comment">// if left is empty, or glue the left and the</span>\n    <span class="token comment">// new tree together</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n        left <span class="token operator">=</span> tree<span class="token punctuation">;</span>\n      <span class="token keyword">else</span>\n        left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span>A_GLUE<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>首先请注意代码强制解析器在复合语句的开头与 lbrace() 匹配，而我们仅在将结尾的 <code class="language-text">}</code> 与匹配时退出 rbrace()。</p>\n<p>其次请注意 print<em>statement()、assignment</em>statement() 和 if<em>statement() 一样都返回 AST 树 compound</em>statement()。在我们的旧代码中，print<em>statement() 本身调用 genAST() 来求值表达式然后调用 genprintint()，类似地 assignment</em>statement() 也调用 genAST() 来执行赋值。</p>\n<p>这意味着我们在这里有 AST 树，在那儿还有其他树。只生成一个 AST 树，并调用 genAST() 一次性为其生成汇编代码是有意义的。</p>\n<p>这不是强制性的，例如 SubC 只为表达式生成 AST，对于语言的结构部分（如语句），SubC 像在以前版本的编译器中一样，对代码生成器进行特定的调用。</p>\n<p>我现在决定使用解析器为整个输入生成一个 AST 树，解析输入后就可以从一棵 AST 树中生成程序集输出。</p>\n<p>稍后我可能会为每个函数生成一个 AST 树。</p>\n<h2 id="解析-if-语法"><a href="#%E8%A7%A3%E6%9E%90-if-%E8%AF%AD%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解析 IF 语法</h2>\n<p>因为我们是递归下降解析器，所以解析 IF 语句还不错：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="3931195026460998700"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parse an IF statement including\n// any optional ELSE clause\n// and return its AST\nstruct ASTnode *if_statement(void) {\n  struct ASTnode *condAST, *trueAST, *falseAST = NULL;\n\n  // Ensure we have \'if\' \'(\'\n  match(T_IF, &quot;if&quot;);\n  lparen();\n\n  // Parse the following expression\n  // and the \')\' following. Ensure\n  // the tree\'s operation is a comparison.\n  condAST = binexpr(0);\n\n  if (condAST->op < A_EQ || condAST->op > A_GE)\n    fatal(&quot;Bad comparison operator&quot;);\n  rparen();\n\n  // Get the AST for the compound statement\n  trueAST = compound_statement();\n\n  // If we have an \'else\', skip it\n  // and get the AST for the compound statement\n  if (Token.token == T_ELSE) {\n    scan(&Token);\n    falseAST = compound_statement();\n  }\n  // Build and return the AST for this statement\n  return (mkastnode(A_IF, condAST, trueAST, falseAST, 0));\n}`, `3931195026460998700`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parse an IF statement including</span>\n<span class="token comment">// any optional ELSE clause</span>\n<span class="token comment">// and return its AST</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">if_statement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>condAST<span class="token punctuation">,</span> <span class="token operator">*</span>trueAST<span class="token punctuation">,</span> <span class="token operator">*</span>falseAST <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Ensure we have \'if\' \'(\'</span>\n  <span class="token function">match</span><span class="token punctuation">(</span>T_IF<span class="token punctuation">,</span> <span class="token string">"if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">lparen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Parse the following expression</span>\n  <span class="token comment">// and the \')\' following. Ensure</span>\n  <span class="token comment">// the tree\'s operation is a comparison.</span>\n  condAST <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>condAST<span class="token operator">-></span>op <span class="token operator">&lt;</span> A_EQ <span class="token operator">||</span> condAST<span class="token operator">-></span>op <span class="token operator">></span> A_GE<span class="token punctuation">)</span>\n    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"Bad comparison operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">rparen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Get the AST for the compound statement</span>\n  trueAST <span class="token operator">=</span> <span class="token function">compound_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If we have an \'else\', skip it</span>\n  <span class="token comment">// and get the AST for the compound statement</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token <span class="token operator">==</span> T_ELSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    falseAST <span class="token operator">=</span> <span class="token function">compound_statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Build and return the AST for this statement</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">mkastnode</span><span class="token punctuation">(</span>A_IF<span class="token punctuation">,</span> condAST<span class="token punctuation">,</span> trueAST<span class="token punctuation">,</span> falseAST<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>现在我不想处理类似的输入 if (x-2)，因此我已经限制了二进制表达式 binexpr() 只能具有一个根，该根是六个比较运算符 A<em>EQ，A</em>NE，A<em>LT，A</em>GT，A<em>LE 或 A</em>GE 之一。</p>\n<h2 id="三个子树"><a href="#%E4%B8%89%E4%B8%AA%E5%AD%90%E6%A0%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>三个子树</h2>\n<p>在 if_statement() 我的最后一行中，我建立了一个 AST 节点：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="39106349430443660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`mkastnode(A_IF, condAST, trueAST, falseAST, 0);`, `39106349430443660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token function">mkastnode</span><span class="token punctuation">(</span>A_IF<span class="token punctuation">,</span> condAST<span class="token punctuation">,</span> trueAST<span class="token punctuation">,</span> falseAST<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>那是三个 AST 子树！这里发生了什么？如您所见，IF 语句将具有三个子树：</p>\n<ul>\n<li>执行条件的子树</li>\n<li>紧随其后的复合语句</li>\n<li>else 关键字之后的可选复合语句</li>\n</ul>\n<p>因此我们现在需要具有三个子节点的 AST 节点结构（在 defs.h 中）：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60694560466671165000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// AST node types.\nenum {\n  ...\n  A_GLUE, A_IF\n};\n\n// Abstract Syntax Tree structure\nstruct ASTnode {\n  int op;                       // &quot;Operation&quot; to be performed on this tree\n  struct ASTnode *left;         // Left, middle and right child trees\n  struct ASTnode *mid;\n  struct ASTnode *right;\n  union {\n    int intvalue;               // For A_INTLIT, the integer value\n    int id;                     // For A_IDENT, the symbol slot number\n  } v;\n};`, `60694560466671165000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// AST node types.</span>\n<span class="token keyword">enum</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  A_GLUE<span class="token punctuation">,</span> A_IF\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Abstract Syntax Tree structure</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> op<span class="token punctuation">;</span>                       <span class="token comment">// "Operation" to be performed on this tree</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>         <span class="token comment">// Left, middle and right child trees</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>mid<span class="token punctuation">;</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">union</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> intvalue<span class="token punctuation">;</span>               <span class="token comment">// For A_INTLIT, the integer value</span>\n    <span class="token keyword">int</span> id<span class="token punctuation">;</span>                     <span class="token comment">// For A_IDENT, the symbol slot number</span>\n  <span class="token punctuation">}</span> v<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>因此 A_IF 树如下所示：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">                      IF\n                    / |  \\\n                   /  |   \\\n                  /   |    \\\n                 /    |     \\\n                /     |      \\\n               /      |       \\\n      condition   statements   statements</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="组装-ast-节点"><a href="#%E7%BB%84%E8%A3%85-ast-%E8%8A%82%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>组装 AST 节点</h2>\n<p>还有一个新的 A_GLUE AST 节点类型，这是做什么用的？现在我们用很多语句构建一个 AST 树，因此我们需要一种将它们组装在一起的方法。</p>\n<p>查看 compound_statement() 循环代码的结尾：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="73354906181431230000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`if (left != NULL)\n  left = mkastnode(A_GLUE, left, NULL, tree, 0);`, `73354906181431230000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>\n  left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span>A_GLUE<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> tree<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>每次获得新的子树时，我们会将其粘贴到现有树上。因此，对于此语句序列：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">stmt1;\nstmt2;\nstmt3;\nstmt4;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们最终得到：</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">             A_GLUE\n              /  \\\n          A_GLUE stmt4\n            /  \\\n        A_GLUE stmt3\n          /  \\\n      stmt1  stmt2</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>而且当我们从左到右先深度遍历树时，这仍然会以正确的顺序生成汇编代码。</p>\n<h2 id="通用代码生成器"><a href="#%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>通用代码生成器</h2>\n<p>现在我们的 AST 节点有多个子节点，我们的通用代码生成器将变得更加复杂。另外对于比较运算符，我们需要知道是否要在 IF 语句（相反的比较中为跳转）或正则表达式（正常的比较中将寄存器设置为 1 或 0）的一部分中进行比较。</p>\n<p>为此我进行了修改 getAST() 以便我们可以传递父 AST 节点操作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="62167161947349020000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Given an AST, the register (if any) that holds\n// the previous rvalue, and the AST op of the parent,\n// generate assembly code recursively.\n// Return the register id with the tree\'s final value\nint genAST(struct ASTnode *n, int reg, int parentASTop) {\n   ...\n}`, `62167161947349020000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Given an AST, the register (if any) that holds</span>\n<span class="token comment">// the previous rvalue, and the AST op of the parent,</span>\n<span class="token comment">// generate assembly code recursively.</span>\n<span class="token comment">// Return the register id with the tree\'s final value</span>\n<span class="token keyword">int</span> <span class="token function">genAST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> reg<span class="token punctuation">,</span> <span class="token keyword">int</span> parentASTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id="处理特定的-ast-节点"><a href="#%E5%A4%84%E7%90%86%E7%89%B9%E5%AE%9A%E7%9A%84-ast-%E8%8A%82%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>处理特定的 AST 节点</h3>\n<p>现在 genAST() 中的代码必须处理特定的 AST 节点：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="17943724468359145000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// We now have specific AST node handling at the top\nswitch (n->op) {\n  case A_IF:\n    return (genIFAST(n));\n  case A_GLUE:\n    // Do each child statement, and free the\n    // registers after each child\n    genAST(n->left, NOREG, n->op);\n    genfreeregs();\n    genAST(n->right, NOREG, n->op);\n    genfreeregs();\n    return (NOREG);\n}`, `17943724468359145000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// We now have specific AST node handling at the top</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> A_IF<span class="token operator">:</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">genIFAST</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> A_GLUE<span class="token operator">:</span>\n    <span class="token comment">// Do each child statement, and free the</span>\n    <span class="token comment">// registers after each child</span>\n    <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">,</span> NOREG<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">,</span> NOREG<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>NOREG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果不返回则继续执行普通的二进制运算符 AST 节点，但有一个例外比较节点：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51183890779945116000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`case A_EQ:\ncase A_NE:\ncase A_LT:\ncase A_GT:\ncase A_LE:\ncase A_GE:\n  // If the parent AST node is an A_IF, generate a compare\n  // followed by a jump. Otherwise, compare registers and\n  // set one to 1 or 0 based on the comparison.\n  if (parentASTop == A_IF)\n    return (cgcompare_and_jump(n->op, leftreg, rightreg, reg));\n  else\n    return (cgcompare_and_set(n->op, leftreg, rightreg));`, `51183890779945116000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">case</span> A_EQ<span class="token operator">:</span>\n<span class="token keyword">case</span> A_NE<span class="token operator">:</span>\n<span class="token keyword">case</span> A_LT<span class="token operator">:</span>\n<span class="token keyword">case</span> A_GT<span class="token operator">:</span>\n<span class="token keyword">case</span> A_LE<span class="token operator">:</span>\n<span class="token keyword">case</span> A_GE<span class="token operator">:</span>\n  <span class="token comment">// If the parent AST node is an A_IF, generate a compare</span>\n  <span class="token comment">// followed by a jump. Otherwise, compare registers and</span>\n  <span class="token comment">// set one to 1 or 0 based on the comparison.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentASTop <span class="token operator">==</span> A_IF<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgcompare_and_jump</span><span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">,</span> leftreg<span class="token punctuation">,</span> rightreg<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">cgcompare_and_set</span><span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">,</span> leftreg<span class="token punctuation">,</span> rightreg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我将介绍新的功能 cgcompare<em>and</em>jump() 和 cgcompare<em>and</em>set()。</p>\n<h3 id="生成-if-汇编代码"><a href="#%E7%94%9F%E6%88%90-if-%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>生成 IF 汇编代码</h3>\n<p>我们使用特定函数处理 A_IF AST 节点，并使用一个函数来生成新标签号：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53401146049031990000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Generate and return a new label number\nstatic int label(void) {\n  static int id = 1;\n  return (id++);\n}\n\n// Generate the code for an IF statement\n// and an optional ELSE clause\nstatic int genIFAST(struct ASTnode *n) {\n  int Lfalse, Lend;\n\n  // Generate two labels: one for the\n  // false compound statement, and one\n  // for the end of the overall IF statement.\n  // When there is no ELSE clause, Lfalse _is_\n  // the ending label!\n  Lfalse = label();\n  if (n->right)\n    Lend = label();\n\n  // Generate the condition code followed\n  // by a zero jump to the false label.\n  // We cheat by sending the Lfalse label as a register.\n  genAST(n->left, Lfalse, n->op);\n  genfreeregs();\n\n  // Generate the true compound statement\n  genAST(n->mid, NOREG, n->op);\n  genfreeregs();\n\n  // If there is an optional ELSE clause,\n  // generate the jump to skip to the end\n  if (n->right)\n    cgjump(Lend);\n\n  // Now the false label\n  cglabel(Lfalse);\n\n  // Optional ELSE clause: generate the\n  // false compound statement and the\n  // end label\n  if (n->right) {\n    genAST(n->right, NOREG, n->op);\n    genfreeregs();\n    cglabel(Lend);\n  }\n\n  return (NOREG);\n}`, `53401146049031990000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Generate and return a new label number</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Generate the code for an IF statement</span>\n<span class="token comment">// and an optional ELSE clause</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">genIFAST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> Lfalse<span class="token punctuation">,</span> Lend<span class="token punctuation">;</span>\n\n  <span class="token comment">// Generate two labels: one for the</span>\n  <span class="token comment">// false compound statement, and one</span>\n  <span class="token comment">// for the end of the overall IF statement.</span>\n  <span class="token comment">// When there is no ELSE clause, Lfalse _is_</span>\n  <span class="token comment">// the ending label!</span>\n  Lfalse <span class="token operator">=</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span>\n    Lend <span class="token operator">=</span> <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Generate the condition code followed</span>\n  <span class="token comment">// by a zero jump to the false label.</span>\n  <span class="token comment">// We cheat by sending the Lfalse label as a register.</span>\n  <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">,</span> Lfalse<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Generate the true compound statement</span>\n  <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>mid<span class="token punctuation">,</span> NOREG<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If there is an optional ELSE clause,</span>\n  <span class="token comment">// generate the jump to skip to the end</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span>\n    <span class="token function">cgjump</span><span class="token punctuation">(</span>Lend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Now the false label</span>\n  <span class="token function">cglabel</span><span class="token punctuation">(</span>Lfalse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Optional ELSE clause: generate the</span>\n  <span class="token comment">// false compound statement and the</span>\n  <span class="token comment">// end label</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">,</span> NOREG<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">genfreeregs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">cglabel</span><span class="token punctuation">(</span>Lend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>NOREG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实际上，代码正在执行以下操作：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94985853460878130000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`genAST(n->left, Lfalse, n->op);       // Condition and jump to Lfalse\ngenAST(n->mid, NOREG, n->op);         // Statements after \'if\'\ncgjump(Lend);                         // Jump to Lend\ncglabel(Lfalse);                      // Lfalse: label\ngenAST(n->right, NOREG, n->op);       // Statements after \'else\'\ncglabel(Lend);`, `94985853460878130000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">,</span> Lfalse<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Condition and jump to Lfalse</span>\n<span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>mid<span class="token punctuation">,</span> NOREG<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Statements after \'if\'</span>\n<span class="token function">cgjump</span><span class="token punctuation">(</span>Lend<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// Jump to Lend</span>\n<span class="token function">cglabel</span><span class="token punctuation">(</span>Lfalse<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// Lfalse: label</span>\n<span class="token function">genAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">,</span> NOREG<span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Statements after \'else\'</span>\n<span class="token function">cglabel</span><span class="token punctuation">(</span>Lend<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="x86-64-代码生成功能"><a href="#x86-64-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8A%9F%E8%83%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>x86-64 代码生成功能</h2>\n<p>因此，我们现在有了一些新的 x86-64 代码生成功能，其中一些替代了 cgXXX() 我们在旅程的最后部分中创建的六个比较功能。</p>\n<p>对于正常的比较功能，我们现在传递 AST 操作以选择相关的 x86-64 set 指令：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="4245774180583539000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// List of comparison instructions,\n// in AST order: A_EQ, A_NE, A_LT, A_GT, A_LE, A_GE\nstatic char *cmplist[] =\n  { &quot;sete&quot;, &quot;setne&quot;, &quot;setl&quot;, &quot;setg&quot;, &quot;setle&quot;, &quot;setge&quot; };\n\n// Compare two registers and set if true.\nint cgcompare_and_set(int ASTop, int r1, int r2) {\n\n  // Check the range of the AST operation\n  if (ASTop < A_EQ || ASTop > A_GE)\n    fatal(&quot;Bad ASTop in cgcompare_and_set()&quot;);\n\n  fprintf(Outfile, &quot;\\tcmpq\\t%s, %s\\n&quot;, reglist[r2], reglist[r1]);\n  fprintf(Outfile, &quot;\\t%s\\t%s\\n&quot;, cmplist[ASTop - A_EQ], breglist[r2]);\n  fprintf(Outfile, &quot;\\tmovzbq\\t%s, %s\\n&quot;, breglist[r2], reglist[r2]);\n  free_register(r1);\n  return (r2);\n}`, `4245774180583539000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// List of comparison instructions,</span>\n<span class="token comment">// in AST order: A_EQ, A_NE, A_LT, A_GT, A_LE, A_GE</span>\n<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmplist<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>\n  <span class="token punctuation">{</span> <span class="token string">"sete"</span><span class="token punctuation">,</span> <span class="token string">"setne"</span><span class="token punctuation">,</span> <span class="token string">"setl"</span><span class="token punctuation">,</span> <span class="token string">"setg"</span><span class="token punctuation">,</span> <span class="token string">"setle"</span><span class="token punctuation">,</span> <span class="token string">"setge"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Compare two registers and set if true.</span>\n<span class="token keyword">int</span> <span class="token function">cgcompare_and_set</span><span class="token punctuation">(</span><span class="token keyword">int</span> ASTop<span class="token punctuation">,</span> <span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// Check the range of the AST operation</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ASTop <span class="token operator">&lt;</span> A_EQ <span class="token operator">||</span> ASTop <span class="token operator">></span> A_GE<span class="token punctuation">)</span>\n    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"Bad ASTop in cgcompare_and_set()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tcmpq\\t%s, %s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\t%s\\t%s\\n"</span><span class="token punctuation">,</span> cmplist<span class="token punctuation">[</span>ASTop <span class="token operator">-</span> A_EQ<span class="token punctuation">]</span><span class="token punctuation">,</span> breglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tmovzbq\\t%s, %s\\n"</span><span class="token punctuation">,</span> breglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">free_register</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我还发现了一条 x86-64 指令 movzbq，该指令将一个寄存器中的最低字节移出并将其扩展为适合 64 位寄存器，我现在正在使用它而不是旧代码中的 and $255。</p>\n<p>我们需要一个函数来生成标签并跳转到它：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="94477344399916060000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Generate a label\nvoid cglabel(int l) {\n  fprintf(Outfile, &quot;L%d:\\n&quot;, l);\n}\n\n// Generate a jump to a label\nvoid cgjump(int l) {\n  fprintf(Outfile, &quot;\\tjmp\\tL%d\\n&quot;, l);\n}`, `94477344399916060000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Generate a label</span>\n<span class="token keyword">void</span> <span class="token function">cglabel</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"L%d:\\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Generate a jump to a label</span>\n<span class="token keyword">void</span> <span class="token function">cgjump</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tjmp\\tL%d\\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最后我们需要一个函数进行比较并根据相反的比较跳转，因此使用 AST 比较节点类型，我们进行相反的比较：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="54437167823612320000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// List of inverted jump instructions,\n// in AST order: A_EQ, A_NE, A_LT, A_GT, A_LE, A_GE\nstatic char *invcmplist[] = { &quot;jne&quot;, &quot;je&quot;, &quot;jge&quot;, &quot;jle&quot;, &quot;jg&quot;, &quot;jl&quot; };\n\n// Compare two registers and jump if false.\nint cgcompare_and_jump(int ASTop, int r1, int r2, int label) {\n\n  // Check the range of the AST operation\n  if (ASTop < A_EQ || ASTop > A_GE)\n    fatal(&quot;Bad ASTop in cgcompare_and_set()&quot;);\n\n  fprintf(Outfile, &quot;\\tcmpq\\t%s, %s\\n&quot;, reglist[r2], reglist[r1]);\n  fprintf(Outfile, &quot;\\t%s\\tL%d\\n&quot;, invcmplist[ASTop - A_EQ], label);\n  freeall_registers();\n  return (NOREG);\n}`, `54437167823612320000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// List of inverted jump instructions,</span>\n<span class="token comment">// in AST order: A_EQ, A_NE, A_LT, A_GT, A_LE, A_GE</span>\n<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>invcmplist<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"jne"</span><span class="token punctuation">,</span> <span class="token string">"je"</span><span class="token punctuation">,</span> <span class="token string">"jge"</span><span class="token punctuation">,</span> <span class="token string">"jle"</span><span class="token punctuation">,</span> <span class="token string">"jg"</span><span class="token punctuation">,</span> <span class="token string">"jl"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Compare two registers and jump if false.</span>\n<span class="token keyword">int</span> <span class="token function">cgcompare_and_jump</span><span class="token punctuation">(</span><span class="token keyword">int</span> ASTop<span class="token punctuation">,</span> <span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">,</span> <span class="token keyword">int</span> label<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// Check the range of the AST operation</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ASTop <span class="token operator">&lt;</span> A_EQ <span class="token operator">||</span> ASTop <span class="token operator">></span> A_GE<span class="token punctuation">)</span>\n    <span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"Bad ASTop in cgcompare_and_set()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\tcmpq\\t%s, %s\\n"</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">,</span> reglist<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span>Outfile<span class="token punctuation">,</span> <span class="token string">"\\t%s\\tL%d\\n"</span><span class="token punctuation">,</span> invcmplist<span class="token punctuation">[</span>ASTop <span class="token operator">-</span> A_EQ<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">freeall_registers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>NOREG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<p>input05</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">{\n  int i; int j;\n  i=6; j=12;\n  if (i &lt; j) {\n    print i;\n  } else {\n    print j;\n  }\n}</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="9299749167532001000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\\$ make test\ncc -o comp1 -g cg.c decl.c expr.c gen.c main.c misc.c scan.c stmt.c sym.c tree.c\n./comp1 input05\ncc -o out out.s\n./out\n6`, `9299749167532001000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">$ <span class="token function">make</span> <span class="token builtin class-name">test</span>\ncc -o comp1 -g cg.c decl.c expr.c gen.c main.c misc.c scan.c stmt.c sym.c tree.c\n./comp1 input05\ncc -o out out.s\n./out\n<span class="token number">6</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>out.s</p>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">        .text\n.LC0:\n        .string &quot;%d\\n&quot;\nprintint:\n        pushq   %rbp\n        movq    %rsp, %rbp\n        subq    $16, %rsp\n        movl    %edi, -4(%rbp)\n        movl    -4(%rbp), %eax\n        movl    %eax, %esi\n        leaq    .LC0(%rip), %rdi\n        movl    $0, %eax\n        call    printf@PLT\n        nop\n        leave\n        ret\n\n        .globl  main\n        .type   main, @function\nmain:\n        pushq   %rbp\n        movq    %rsp, %rbp\n        .comm   i,8,8\n        .comm   j,8,8\n        movq    $6, %r8\n        movq    %r8, i(%rip)\n        movq    $12, %r8\n        movq    %r8, j(%rip)\n        movq    i(%rip), %r8\n        movq    j(%rip), %r9\n        cmpq    %r9, %r8\n        jge     L1\n        movq    i(%rip), %r8\n        movq    %r8, %rdi\n        call    printint\n        jmp     L2\nL1:\n        movq    j(%rip), %r8\n        movq    %r8, %rdi\n        call    printint\nL2:\n        movl    $0, %eax\n        popq    %rbp\n        ret</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="结论"><a href="#%E7%BB%93%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结论</h1>\n<p>我们已经使用 IF 语句在我们的语言中添加了第一个控制结构，在此过程中我不得不重写一些现有的内容，而且由于我脑子里还没有完整的架构计划，因此将来可能需要重写更多内容。</p>\n<p>这段旅程的难处在于，对于 IF 决策我们必须执行与对普通比较运算符相反的比较，我的解决方案是通知每个 AST 节点其父节点的节点类型，比较节点现在可以查看父节点是否为 A_IF 节点。</p>\n<p>我知道 Nils Holm 在实现 SubC 时选择了不同的方法，因此您应该查看他的代码，以便看到针对同一问题的不同解决方案。</p>\n<p>在编译器编写过程的下一部分中，我们将添加另一个控制结构：WHILE 循环。</p>',
id:"/github/workspace/blog/编译器之旅（八）——IF语句/index.md absPath of file >>> MarkdownRemark",timeToRead:10,frontmatter:{date:"2020-03-16 17:22:09",path:"/tour-of-compiler-if-statements/",tags:"编译原理, IF语句",title:"编译器之旅（八）——IF语句",draft:null}}],length:1,tag:"IF语句",pagesSum:1,page:1}}}});