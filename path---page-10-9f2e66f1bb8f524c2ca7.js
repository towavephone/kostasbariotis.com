webpackJsonp([0x6c17f6046482],{1176:function(n,a){n.exports={data:{site:{siteMetadata:{description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"需求 我们在上一部分中看到，解析器不一定强制执行我们语言的语义，它仅强制执行语法的语法和结构规则。 我们最终得到了计算表达式错误值（如 2 _ 3 + 4 _ 5）的代码，因为该代码创建了一个如下所示的 AST…",html:'<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>我们在上一部分中看到，解析器不一定强制执行我们语言的语义，它仅强制执行语法的语法和结构规则。</p>\n<p>我们最终得到了计算表达式错误值（如 2 _ 3 + 4 _ 5）的代码，因为该代码创建了一个如下所示的 AST：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="1498492448946975200"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(` *\n/ \\\n2  +\n  / \\\n  3  *\n    / \\\n   4   5`, `1498492448946975200`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text"> *\n/ \\\n2  +\n  / \\\n  3  *\n    / \\\n   4   5</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>为了解决这个问题，我们必须向解析器添加代码以执行运算符优先级。</p>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<p>有（至少）两种方法：</p>\n<ul>\n<li>在语言的语法中明确运算符的优先级</li>\n<li>用运算符优先级表影响现有解析器</li>\n</ul>\n<h2 id="明确运算符优先级"><a href="#%E6%98%8E%E7%A1%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>明确运算符优先级</h2>\n<p>这是旅程最后一部分的语法：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="19540716922908130000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`expression: number\n          | expression \'*\' expression\n          | expression \'/\' expression\n          | expression \'+\' expression\n          | expression \'-\' expression\n          ;\n\nnumber:  T_INTLIT\n         ;`, `19540716922908130000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">expression: number\n          | expression &#39;*&#39; expression\n          | expression &#39;/&#39; expression\n          | expression &#39;+&#39; expression\n          | expression &#39;-&#39; expression\n          ;\n\nnumber:  T_INTLIT\n         ;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>请注意这四个数学运算符之间没有区别。让我们调整语法，以便有所不同：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="77093279539762660000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`expression: additive_expression\n    ;\n\nadditive_expression:\n      multiplicative_expression\n    | additive_expression \'+\' multiplicative_expression\n    | additive_expression \'-\' multiplicative_expression\n    ;\n\nmultiplicative_expression:\n      number\n    | number \'*\' multiplicative_expression\n    | number \'/\' multiplicative_expression\n    ;\n\nnumber:  T_INTLIT\n         ;`, `77093279539762660000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">expression: additive_expression\n    ;\n\nadditive_expression:\n      multiplicative_expression\n    | additive_expression &#39;+&#39; multiplicative_expression\n    | additive_expression &#39;-&#39; multiplicative_expression\n    ;\n\nmultiplicative_expression:\n      number\n    | number &#39;*&#39; multiplicative_expression\n    | number &#39;/&#39; multiplicative_expression\n    ;\n\nnumber:  T_INTLIT\n         ;</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>现在，我们有两种类型的表达式：加法表达式和乘法表达式。请注意，语法现在强制数字仅作为乘法表达式的一部分。这迫使’*‘和’/‘运算符更紧密地绑定到任一侧的数字，因此具有更高的优先级。</p>\n<p>任何加法表达式实际上要么本身就是乘法表达式，要么是加法（即乘法）表达式，后跟“ +”或“-”运算符，然后是另一个乘法表达式。现在，加性表达式的出现率比乘法表达式低得多。</p>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="在递归下降解析器中执行上述操作"><a href="#%E5%9C%A8%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%8A%E8%BF%B0%E6%93%8D%E4%BD%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在递归下降解析器中执行上述操作</h2>\n<p>我们如何将语法的上述版本实现到递归下降解析器中？我已在文件中完成此操作，expr2.c 下面将介绍代码。</p>\n<p>答案是拥有一个 multiplicative<em>expr()处理’*‘和’/‘运算符的 additive</em>expr()函数，以及一个处理优先级较低的’+‘和’-‘运算符的函数。</p>\n<p>这两个函数都将读入某些内容和一个运算符。然后，尽管后面的运算符具有相同的优先级，但是每个函数都会解析更多的输入，并将左半部分和右半部分与第一个运算符组合在一起。</p>\n<p>但是，additive<em>expr()必须遵循更高优先级的 multiplicative</em>expr()功能。这是如何完成的。</p>\n<h2 id="additive_expr"><a href="#additive_expr" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>additive_expr()</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53064114652661080000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 返回一个AST树，其根是一个“+”或“-”二进制运算符\nstruct ASTnode *additive_expr(void) {\n  struct ASTnode *left, *right;\n  int tokentype;\n\n  // 获得比我们的左子树更高的优先级\n  left = multiplicative_expr();\n\n  // 如果没有剩余令牌，则仅返回左侧节点\n  tokentype = Token.token;\n  if (tokentype == T_EOF)\n    return (left);\n\n  // Cache the \'+\' or \'-\' token type\n\n  // 以优先级循环处理令牌\n  while (1) {\n    // 获取下一个整数文字\n    scan(&Token);\n\n    // 获得比我们的右子树更高的优先级\n    right = multiplicative_expr();\n\n    // 使用低优先级运算符将两个子树连接起来\n    left = mkastnode(arithop(tokentype), left, right, 0);\n\n    // 并以优先级获取下一个令牌\n    tokentype = Token.token;\n    if (tokentype == T_EOF)\n      break;\n  }\n\n  // Return whatever tree we have created\n  return (left);\n}`, `53064114652661080000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// 返回一个AST树，其根是一个“+”或“-”二进制运算符</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">additive_expr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> tokentype<span class="token punctuation">;</span>\n\n  <span class="token comment">// 获得比我们的左子树更高的优先级</span>\n  left <span class="token operator">=</span> <span class="token function">multiplicative_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 如果没有剩余令牌，则仅返回左侧节点</span>\n  tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Cache the \'+\' or \'-\' token type</span>\n\n  <span class="token comment">// 以优先级循环处理令牌</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取下一个整数文字</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 获得比我们的右子树更高的优先级</span>\n    right <span class="token operator">=</span> <span class="token function">multiplicative_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用低优先级运算符将两个子树连接起来</span>\n    left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span><span class="token function">arithop</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 并以优先级获取下一个令牌</span>\n    tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Return whatever tree we have created</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>从头开始，multiplicative_expr() 如果第一个运算符为高优先级’*‘或’/’ ，我们立即调用。该函数仅在遇到低优先级的“+”或“-”运算符时返回。</p>\n<p>在循环内部 multiplicative_expr()，如果将来有任何运算符的优先级高于现有的，我们将再次调用。</p>\n<p>一旦有了左右子树，我们就可以将它们与最后一次绕过循环的运算符结合起来。重复此操作，以便如果我们有表达式 2 + 4 + 6，我们将得到 AST 树：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="37236337443148825000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`    +\n   / \\\n  +   6\n / \\\n2   4`, `37236337443148825000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">    +\n   / \\\n  +   6\n / \\\n2   4</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但是，如果 multiplicative_expr() 拥有自己的更高优先级运算符，我们将合并其中具有多个节点的子树。</p>\n<h2 id="multiplicative_expr"><a href="#multiplicative_expr" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>multiplicative_expr()</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="11505177074920536000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 返回根为\'*\'或\'/\'二进制运算符的AST树\nstruct ASTnode *multiplicative_expr(void) {\n  struct ASTnode *left, *right;\n  int tokentype;\n\n  // 获取左侧的整数文字\n  // 同时获取下一个令牌\n  left = primary();\n\n  tokentype = Token.token;\n  if (tokentype == T_EOF)\n    return (left);\n\n  // While the token is a \'*\' or \'/\'\n  while ((tokentype == T_STAR) || (tokentype == T_SLASH)) {\n    // Fetch in the next integer literal\n    scan(&Token);\n    right = primary();\n\n    // Join that with the left integer literal\n    left = mkastnode(arithop(tokentype), left, right, 0);\n\n    // Update the details of the current token.\n    // If no tokens left, return just the left node\n    tokentype = Token.token;\n    if (tokentype == T_EOF)\n      break;\n  }\n\n  // Return whatever tree we have created\n  return (left);\n}`, `11505177074920536000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// 返回根为\'*\'或\'/\'二进制运算符的AST树</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">multiplicative_expr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> tokentype<span class="token punctuation">;</span>\n\n  <span class="token comment">// 获取左侧的整数文字</span>\n  <span class="token comment">// 同时获取下一个令牌</span>\n  left <span class="token operator">=</span> <span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// While the token is a \'*\' or \'/\'</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_STAR<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_SLASH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Fetch in the next integer literal</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    right <span class="token operator">=</span> <span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Join that with the left integer literal</span>\n    left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span><span class="token function">arithop</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Update the details of the current token.</span>\n    <span class="token comment">// If no tokens left, return just the left node</span>\n    tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Return whatever tree we have created</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>该代码与 additive<em>expr() 相似，不同之处在于我们需要调用 primary() 以获得整数元素，我们也只有在具有较高优先级的运算符（即’*‘和’/‘运算符）时循环。遇到低优先级运算符后，我们只需返回到此为止构建的子树即可，再返回 additive</em>expr() 处理低优先级运算符。</p>\n<h2 id="上面的缺点"><a href="#%E4%B8%8A%E9%9D%A2%E7%9A%84%E7%BC%BA%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>上面的缺点</h2>\n<p>由于要达到正确的优先级，需要进行所有的函数调用，因此以显式的运算符优先级构造递归下降解析器的上述方法效率低下，还必须有函数来处理每个级别的运算符优先级，因此我们最终需要编写许多行代码。</p>\n<h2 id="替代方案：pratt-解析"><a href="#%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88%EF%BC%9Apratt-%E8%A7%A3%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>替代方案：Pratt 解析</h2>\n<p>减少代码量的一种方法是使用 Pratt 解析器 ，该解析器具有与每个标记关联的优先级值表，而不是使用具有在语法中复制显式优先级的函数。</p>\n<p>在这一点上，我强烈建议您阅读 Bob Nystrom 撰写的 Pratt Parsers：轻松进行表达式解析。</p>\n<h2 id="exprc-普拉特解析"><a href="#exprc-%E6%99%AE%E6%8B%89%E7%89%B9%E8%A7%A3%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>expr.c: 普拉特解析</h2>\n<p>我已经实现了 Pratt 解析，expr.c 是用来替代 expr2.c 的。</p>\n<p>首先，我们需要一些代码来确定每个令牌的优先级：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="436565204219308000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Operator precedence for each token\n// enum {\n//   A_ADD, A_SUBTRACT, A_MULTIPLY, A_DIVIDE, A_INTLIT\n// };\nstatic int OpPrec[] = { 0, 10, 10, 20, 20, 0 };\n\n// Check that we have a binary operator and\n// return its precedence.\nstatic int op_precedence(int tokentype) {\n  int prec = OpPrec[tokentype];\n  if (prec == 0) {\n    fprintf(stderr, &quot;syntax error on line %d, token %d\\n&quot;, Line, tokentype);\n    exit(1);\n  }\n  return (prec);\n}`, `436565204219308000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Operator precedence for each token</span>\n<span class="token comment">// enum {</span>\n<span class="token comment">//   A_ADD, A_SUBTRACT, A_MULTIPLY, A_DIVIDE, A_INTLIT</span>\n<span class="token comment">// };</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> OpPrec<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Check that we have a binary operator and</span>\n<span class="token comment">// return its precedence.</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">op_precedence</span><span class="token punctuation">(</span><span class="token keyword">int</span> tokentype<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> prec <span class="token operator">=</span> OpPrec<span class="token punctuation">[</span>tokentype<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>prec <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"syntax error on line %d, token %d\\n"</span><span class="token punctuation">,</span> Line<span class="token punctuation">,</span> tokentype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>prec<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>较高的数字（例如 20）表示优先级高于较低的数字（例如 10）。</p>\n<p>现在您可能会问：当您有一个查找表时，为什么要有一个函数 OpPrec[]？答案是：发现语法错误。</p>\n<p>考虑一个看起来像的输入 234 101 + 12。我们可以扫描前两个标记。但是，如果我们只是简单地获取第二个 101 令牌的优先级，我们不会注意到它不是运算符。因此，该 op_precedence() 函数强制执行正确的语法语法。</p>\n<p>现在，我们不再为每个优先级都拥有一个函数，而是拥有一个使用运算符优先级表的单一表达式函数：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="61310497146701600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Return an AST tree whose root is a binary operator.\n// Parameter ptp is the previous token\'s precedence.\nstruct ASTnode *binexpr(int ptp) {\n  struct ASTnode *left, *right;\n  int tokentype;\n\n  // Get the integer literal on the left.\n  // Fetch the next token at the same time.\n  left = primary();\n\n  // If no tokens left, return just the left node\n  tokentype = Token.token;\n  if (tokentype == T_EOF)\n    return (left);\n\n  // While the precedence of this token is\n  // more than that of the previous token precedence\n  while (op_precedence(tokentype) > ptp) {\n    // Fetch in the next integer literal\n    scan(&Token);\n\n    // Recursively call binexpr() with the\n    // precedence of our token to build a sub-tree\n    // 优先级高的优先建立子树\n    right = binexpr(OpPrec[tokentype]);\n\n    // Join that sub-tree with ours. Convert the token\n    // into an AST operation at the same time.\n    // 同时转换左子树\n    left = mkastnode(arithop(tokentype), left, right, 0);\n\n    // Update the details of the current token.\n    // If no tokens left, return just the left node\n    tokentype = Token.token;\n    if (tokentype == T_EOF)\n      return (left);\n  }\n\n  // Return the tree we have when the precedence\n  // is the same or lower\n  return (left);\n}`, `61310497146701600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Return an AST tree whose root is a binary operator.</span>\n<span class="token comment">// Parameter ptp is the previous token\'s precedence.</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token keyword">int</span> ptp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> tokentype<span class="token punctuation">;</span>\n\n  <span class="token comment">// Get the integer literal on the left.</span>\n  <span class="token comment">// Fetch the next token at the same time.</span>\n  left <span class="token operator">=</span> <span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If no tokens left, return just the left node</span>\n  tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// While the precedence of this token is</span>\n  <span class="token comment">// more than that of the previous token precedence</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">op_precedence</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span> <span class="token operator">></span> ptp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Fetch in the next integer literal</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Recursively call binexpr() with the</span>\n    <span class="token comment">// precedence of our token to build a sub-tree</span>\n    <span class="token comment">// 优先级高的优先建立子树</span>\n    right <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span>OpPrec<span class="token punctuation">[</span>tokentype<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Join that sub-tree with ours. Convert the token</span>\n    <span class="token comment">// into an AST operation at the same time.</span>\n    <span class="token comment">// 同时转换左子树</span>\n    left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span><span class="token function">arithop</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Update the details of the current token.</span>\n    <span class="token comment">// If no tokens left, return just the left node</span>\n    tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Return the tree we have when the precedence</span>\n  <span class="token comment">// is the same or lower</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>首先，请注意这仍然像以前的解析器函数一样是递归的。这次我们收到在调用之前找到的令牌的优先级。</p>\n<p>您还应该发现代码与 multiplicative_expr() 功能非常相似：读取整数文字，获取运算符的令牌类型，然后循环构建树。</p>\n<p>区别在于循环条件和主体：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="45442482159206740000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`multiplicative_expr():\n  while ((tokentype == T_STAR) || (tokentype == T_SLASH)) {\n    scan(&Token); right = primary();\n\n    left = mkastnode(arithop(tokentype), left, right, 0);\n\n    tokentype = Token.token;\n    if (tokentype == T_EOF) return (left);\n  }\n\nbinexpr():\n  while (op_precedence(tokentype) > ptp) {\n    scan(&Token); right = binexpr(OpPrec[tokentype]);\n\n    left = mkastnode(arithop(tokentype), left, right, 0);\n\n    tokentype = Token.token;\n    if (tokentype == T_EOF) return (left);\n  }`, `45442482159206740000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token function">multiplicative_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_STAR<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_SLASH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span> right <span class="token operator">=</span> <span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span><span class="token function">arithop</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">op_precedence</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span> <span class="token operator">></span> ptp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span> right <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span>OpPrec<span class="token punctuation">[</span>tokentype<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    left <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span><span class="token function">arithop</span><span class="token punctuation">(</span>tokentype<span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    tokentype <span class="token operator">=</span> Token<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokentype <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>使用 Pratt 解析器时，当下一个运算符的优先级高于我们当前的令牌时，我们不仅可以使用获取下一个整数文字 primary()，还可以调用自身 binexpr(OpPrec[tokentype]) 以提高运算符的优先级。</p>\n<p>一旦我们达到或低于优先级的令牌，我们将简单地返回 left。</p>\n<p>这将是一个具有许多节点和运算符的子树，其优先级高于调用我们的运算符，或者对于与我们相同的运算符，它可能是单个整数文字。</p>\n<p>现在，我们有一个函数来进行表达式解析。它使用一个小的辅助函数来强制运算符优先级，从而实现我们语言的语义。</p>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="2927919299283465700"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`2 + 3 * 5 - 8 / 3`, `2927919299283465700`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">2 + 3 * 5 - 8 / 3</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="85289022203157280000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`13 -6+  4*\n5\n       +\n08 / 3`, `85289022203157280000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">13 -6+  4*\n5\n       +\n08 / 3</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="5230166964528737000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`12 34 + -56 * / - - 8 + * 2`, `5230166964528737000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">12 34 + -56 * / - - 8 + * 2</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="34504054898940973000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`23 +\n18 -\n45.6 * 2\n/ 18`, `34504054898940973000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">23 +\n18 -\n45.6 * 2\n/ 18</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="25272535786982674000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\\$ make test\ncc -o parser -g expr.c interp.c main.c scan.c tree.c\n(./parser input01; \\\n ./parser input02; \\\n ./parser input03; \\\n ./parser input04; \\\n ./parser input05)\nint 2\nint 3\nint 5\n3 * 5\n2 + 15\nint 8\nint 3\n8 / 3\n17 - 2\n15\nint 13\nint 6\n13 - 6\nint 4\nint 5\n4 * 5\n7 + 20\nint 8\nint 3\n8 / 3\n27 + 2\n29\nsyntax error on line 1, token 5\nUnrecognised character . on line 3\nUnrecognised character a on line 1`, `25272535786982674000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">$ make test\ncc -o parser -g expr.c interp.c main.c scan.c tree.c\n(./parser input01; \\\n ./parser input02; \\\n ./parser input03; \\\n ./parser input04; \\\n ./parser input05)\nint 2\nint 3\nint 5\n3 * 5\n2 + 15\nint 8\nint 3\n8 / 3\n17 - 2\n15\nint 13\nint 6\n13 - 6\nint 4\nint 5\n4 * 5\n7 + 20\nint 8\nint 3\n8 / 3\n27 + 2\n29\nsyntax error on line 1, token 5\nUnrecognised character . on line 3\nUnrecognised character a on line 1</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="82203544307227070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`\\$ make test2\n(./parser2 input01; \\\n ./parser2 input02; \\\n ./parser2 input03; \\\n ./parser2 input04; \\\n ./parser2 input05)\n15                                       # input01 result\n29                                       # input02 result\nsyntax error on line 1, token 5          # input03 result\nUnrecognised character . on line 3       # input04 result\nUnrecognised character a on line 1       # input05 result`, `82203544307227070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">$ make test2\n(./parser2 input01; \\\n ./parser2 input02; \\\n ./parser2 input03; \\\n ./parser2 input04; \\\n ./parser2 input05)\n15                                       # input01 result\n29                                       # input02 result\nsyntax error on line 1, token 5          # input03 result\nUnrecognised character . on line 3       # input04 result\nUnrecognised character a on line 1       # input05 result</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="结论"><a href="#%E7%BB%93%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结论</h1>\n<p>现在退后一步，看看我们要做什么。现在我们有：</p>\n<ul>\n<li>识别并以我们的语言返回令牌的扫描仪</li>\n<li>识别我们的语法，报告语法错误并构建抽象语法树的解析器</li>\n<li>解析器的优先级表，用于实现我们语言的语义</li>\n<li>深度优先遍历抽象语法树并在输入中计算表达式结果的解释器</li>\n</ul>\n<p>我们还没有一个编译器。但是，我们非常接近制作第一个编译器！</p>\n<p>在编译器编写过程的下一部分中，我们将替换解释器。取而代之的是我们将编写一个转换器，为具有数学运算符的每个 AST 节点生成 x86-64 汇编代码。我们还将生成一些汇编前同步码和后同步码，以支持生成器输出的汇编代码。</p>',
id:"/github/workspace/blog/编译器之旅（三）——运算符优先级/index.md absPath of file >>> MarkdownRemark",timeToRead:6,frontmatter:{date:"2020-03-02 12:06:36",path:"/tour-of-compiler-operator-precedence/",tags:"编译原理, 语法分析",title:"编译器之旅（三）——运算符优先级",draft:null}},{excerpt:"需求 为上一节识别的语言定义一个语法 准备 BNF 这是语法的 BNF 描述 竖线将语法中的选项分开，因此含义是： 表达式可以只是一个数字，或者 一个表达式是两个用’ * ‘标记分隔的表达式，或者 一个表达式是两个用’/‘标记分隔的表达式，或者 一个表达式是两个用’+‘标记分隔的表达式，或者 一个表达式是两个由’-‘标记分隔的表达式 数字始终是 T_INTLIT 语法的 BNF…",html:'<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>为上一节识别的语言定义一个语法</p>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<h2 id="bnf"><a href="#bnf" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>BNF</h2>\n<p>这是语法的 BNF 描述</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64612984962207440000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`expression: number\n          | expression \'*\' expression\n          | expression \'/\' expression\n          | expression \'+\' expression\n          | expression \'-\' expression\n          ;\n\nnumber:  T_INTLIT\n         ;`, `64612984962207440000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">expression: number\n          <span class="token operator">|</span> expression <span class="token string">\'*\'</span> expression\n          <span class="token operator">|</span> expression <span class="token string">\'/\'</span> expression\n          <span class="token operator">|</span> expression <span class="token string">\'+\'</span> expression\n          <span class="token operator">|</span> expression <span class="token string">\'-\'</span> expression\n          <span class="token punctuation">;</span>\n\nnumber:  T_INTLIT\n         <span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>竖线将语法中的选项分开，因此含义是：</p>\n<ul>\n<li>表达式可以只是一个数字，或者</li>\n<li>一个表达式是两个用’*‘标记分隔的表达式，或者</li>\n<li>一个表达式是两个用’/‘标记分隔的表达式，或者</li>\n<li>一个表达式是两个用’+‘标记分隔的表达式，或者</li>\n<li>一个表达式是两个由’-‘标记分隔的表达式</li>\n<li>数字始终是 T_INTLIT</li>\n</ul>\n<p>语法的 BNF 定义是递归的，这很明显：通过引用其他表达式来定义一个表达式。但是，有一种方法可以“自下而上”递归：当一个表达式证明是一个数字时，它始终是 T_INTLIT，因此不是递归的。</p>\n<p>在 BNF 中，我们说“表达式”和“数字” 是非终结符，因为它们是由语法规则产生的。但是，T_INTLIT 是终端符号，因为它没有任何规则定义。相反，它是该语言中已经被认可的。同样，四个数学运算符也是终端符号。</p>\n<h2 id="递归下降解析"><a href="#%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%A7%A3%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>递归下降解析</h2>\n<p>鉴于我们语言的语法是递归的，因此尝试递归解析它是有意义的。我们需要做的是读入令牌，然后向前看下一个令牌。根据下一个标记是什么，然后我们可以决定解析输入所需要的路径。这可能需要我们递归调用已被调用的函数。</p>\n<p>在我们的例子中，任何表达式中的第一个标记都是数字，数学运算符可以跟在后面。之后，可能只有一个数字，或者可能是一个全新表达式的开始。我们如何递归解析呢？</p>\n<p>我们可以编写如下的伪代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="847438658641142000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`function expression() {\n  Scan and check the first token is a number. Error if it\'s not\n  Get the next token\n  If we have reached the end of the input, return, i.e. base case\n\n  Otherwise, call expression()\n}`, `847438658641142000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">function expression() {\n  Scan and check the first token is a number. Error if it&#39;s not\n  Get the next token\n  If we have reached the end of the input, return, i.e. base case\n\n  Otherwise, call expression()\n}</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>该函数能够递归地解析输入 2 + 3 - 5 T_EOF。</p>\n<p>当然，我们对输入没有做任何事情，但这不是解析器的工作。解析器的工作是识别输入，并警告任何语法错误。然后对输入进行语义分析，即理解并执行该输入的含义。</p>\n<h2 id="抽象语法树"><a href="#%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>抽象语法树</h2>\n<p>要进行语义分析，我们需要用于解释识别的输入或将其转换为另一种格式的代码，例如汇编代码。这一部分我们将为输入内容构建一个解释器，但是要到达那里，我们首先将输入转换为抽象语法树，也称为 AST。</p>\n<p>我们将在 AST 中构建的每个节点的结构描述如下：（defs.h）</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="66837951794710170000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// AST node types\nenum {\n  A_ADD, A_SUBTRACT, A_MULTIPLY, A_DIVIDE, A_INTLIT\n};\n\n// Abstract Syntax Tree structure\nstruct ASTnode {\n  int op; // 对应结点的类型\n  struct ASTnode *left; // 左子树右子树\n  struct ASTnode *right;\n  int intvalue; // 代表整数值，没有子树\n};`, `66837951794710170000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// AST node types</span>\n<span class="token keyword">enum</span> <span class="token punctuation">{</span>\n  A_ADD<span class="token punctuation">,</span> A_SUBTRACT<span class="token punctuation">,</span> A_MULTIPLY<span class="token punctuation">,</span> A_DIVIDE<span class="token punctuation">,</span> A_INTLIT\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Abstract Syntax Tree structure</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> op<span class="token punctuation">;</span> <span class="token comment">// 对应结点的类型</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span> <span class="token comment">// 左子树右子树</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> intvalue<span class="token punctuation">;</span> <span class="token comment">// 代表整数值，没有子树</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="建立-ast-节点和树"><a href="#%E5%BB%BA%E7%AB%8B-ast-%E8%8A%82%E7%82%B9%E5%92%8C%E6%A0%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>建立 AST 节点和树</h2>\n<p>tree.c 具有构建 AST 的功能，最通用的函数 mkastnode() 接受 AST 节点中四个字段的值。它分配节点，填充字段值并返回指向该节点的指针：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74055011250937510000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include &quot;defs.h&quot;\n#include &quot;data.h&quot;\n#include &quot;decl.h&quot;\n\n// AST tree functions\n// Build and return a generic AST node\nstruct ASTnode *mkastnode(\n  int op,\n  struct ASTnode *left,\n  struct ASTnode *right,\n  int intvalue\n) {\n  struct ASTnode *n;\n\n  // Malloc a new ASTnode\n  n = (struct ASTnode *) malloc(sizeof(struct ASTnode));\n  if (n == NULL) {\n    fprintf(stderr, &quot;Unable to malloc in mkastnode()\\n&quot;);\n    exit(1);\n  }\n  // Copy in the field values and return it\n  n->op = op;\n  n->left = left;\n  n->right = right;\n  n->intvalue = intvalue;\n  return n;\n}\n\n// 创建 AST 叶子节点\nstruct ASTnode *mkastleaf(int op, int intvalue) {\n  return mkastnode(op, NULL, NULL, intvalue);\n}\n\n// 创建一个有单个子节点的 AST 节点\nstruct ASTnode *mkastunary(int op, struct ASTnode *left, int intvalue) {\n  return mkastnode(op, left, NULL, intvalue);\n}`, `74055011250937510000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"defs.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"data.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"decl.h"</span></span>\n\n<span class="token comment">// AST tree functions</span>\n<span class="token comment">// Build and return a generic AST node</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">mkastnode</span><span class="token punctuation">(</span>\n  <span class="token keyword">int</span> op<span class="token punctuation">,</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>right<span class="token punctuation">,</span>\n  <span class="token keyword">int</span> intvalue\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>\n\n  <span class="token comment">// Malloc a new ASTnode</span>\n  n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unable to malloc in mkastnode()\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Copy in the field values and return it</span>\n  n<span class="token operator">-></span>op <span class="token operator">=</span> op<span class="token punctuation">;</span>\n  n<span class="token operator">-></span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>\n  n<span class="token operator">-></span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>\n  n<span class="token operator">-></span>intvalue <span class="token operator">=</span> intvalue<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 创建 AST 叶子节点</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">mkastleaf</span><span class="token punctuation">(</span><span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> intvalue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 创建一个有单个子节点的 AST 节点</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">mkastunary</span><span class="token punctuation">(</span><span class="token keyword">int</span> op<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token keyword">int</span> intvalue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="ast-的目的"><a href="#ast-%E7%9A%84%E7%9B%AE%E7%9A%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AST 的目的</h2>\n<p>我们将使用 AST 来存储我们认识的每个表达式，以便以后可以递归遍历它以计算表达式的最终值，但需要处理数学运算符的优先级，这是一个例子。</p>\n<p>考虑一下表达式 2 _ 3 + 4 _ 5。现在，乘法比加法具有更高的优先级。因此，我们希望将乘法操作数绑定在一起并在执行加法之前执行这些操作。</p>\n<p>如果我们生成的 AST 树看起来像这样：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="60481613244787960000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`      +\n     / \\\n    /   \\\n   /     \\\n  *       *\n / \\     / \\\n2   3   4   5`, `60481613244787960000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">      +\n     / \\\n    /   \\\n   /     \\\n  *       *\n / \\     / \\\n2   3   4   5</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>然后当遍历树时，我们将 2<em>3 首先执行，然后执行 4</em>5。获得这些结果后，便可以将它们传递到树的根部以执行加法。</p>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="表达式解析器"><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>表达式解析器</h2>\n<p>现在，我们可以将扫描仪中的令牌值重新用作 AST 节点操作值，但是我想将令牌和 AST 节点的概念分开。因此，首先我将具有一个将令牌值映射到 AST 节点操作值的函数与解析器的其余部分一起位于 expr.c：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="63925066824013370000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 把 token 元素转换为 AST 操作\nint arithop(int tok) {\n  switch (tok) {\n    case T_PLUS:\n      return A_ADD;\n    case T_MINUS:\n      return A_SUBTRACT;\n    case T_STAR:\n      return A_MULTIPLY;\n    case T_SLASH:\n      return A_DIVIDE;\n    default:\n      fprintf(stderr, &quot;unknown token in arithop() on line %d\\n&quot;, Line);\n      exit(1);\n  }\n}`, `63925066824013370000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// 把 token 元素转换为 AST 操作</span>\n<span class="token keyword">int</span> <span class="token function">arithop</span><span class="token punctuation">(</span><span class="token keyword">int</span> tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> T_PLUS<span class="token operator">:</span>\n      <span class="token keyword">return</span> A_ADD<span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_MINUS<span class="token operator">:</span>\n      <span class="token keyword">return</span> A_SUBTRACT<span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_STAR<span class="token operator">:</span>\n      <span class="token keyword">return</span> A_MULTIPLY<span class="token punctuation">;</span>\n    <span class="token keyword">case</span> T_SLASH<span class="token operator">:</span>\n      <span class="token keyword">return</span> A_DIVIDE<span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"unknown token in arithop() on line %d\\n"</span><span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当我们无法将给定令牌转换为 AST 节点类型时，将触发 switch 语句中的默认语句。这将成为解析器中语法检查的一部分。</p>\n<p>我们需要一个函数来检查下一个标记是否为整数文字，并构建一个 AST 节点来保存文字值。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="74410048308333130000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// Parsing of expressions\n// Parse a primary factor and return an\n// AST node representing it.\nstatic struct ASTnode *primary(void) {\n  struct ASTnode *n;\n\n  // 对于 INTLIT token 为其创建叶子结点然后扫描下一个 token，否则会报语法错误\n  switch (Token.token) {\n    case T_INTLIT:\n      n = mkastleaf(A_INTLIT, Token.intvalue);\n      scan(&Token);\n      return n;\n    default:\n      fprintf(stderr, &quot;syntax error on line %d\\n&quot;, Line);\n      exit(1);\n  }\n}`, `74410048308333130000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// Parsing of expressions</span>\n<span class="token comment">// Parse a primary factor and return an</span>\n<span class="token comment">// AST node representing it.</span>\n<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>\n\n  <span class="token comment">// 对于 INTLIT token 为其创建叶子结点然后扫描下一个 token，否则会报语法错误</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> T_INTLIT<span class="token operator">:</span>\n      n <span class="token operator">=</span> <span class="token function">mkastleaf</span><span class="token punctuation">(</span>A_INTLIT<span class="token punctuation">,</span> Token<span class="token punctuation">.</span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"syntax error on line %d\\n"</span><span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>假设存在一个全局变量 Token，并且已经有从输入中扫描来的最新令牌，在 data.h：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15553330752067308000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`extern_ struct token Token;`, `15553330752067308000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c">extern_ <span class="token keyword">struct</span> <span class="token class-name">token</span> Token<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>main():</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="58080841821437340000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`scan(&Token);  // 得到输入的第一个元素\nn = binexpr();  // 解析文件中的表达式`, `58080841821437340000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 得到输入的第一个元素</span>\nn <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 解析文件中的表达式</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span></span></pre></div>\n<p>为解析器编写代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90836590478598540000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// 返回一个以二元操作符为根的树\nstruct ASTnode *binexpr(void) {\n  struct ASTnode *n, *left, *right;\n  int nodetype;\n\n  // 获取左结点的整数文字同时获取下一个元素\n  left = primary();\n\n  // 下一个元素是文件结尾，返回左节点\n  if (Token.token == T_EOF)\n    return left;\n\n  // 转换元素到结点的类型\n  nodetype = arithop(Token.token);\n\n  // 获取下一个元素\n  scan(&Token);\n\n  // 递归右子树\n  right = binexpr();\n\n  n = mkastnode(nodetype, left, right, 0);\n  return n;\n}`, `90836590478598540000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// 返回一个以二元操作符为根的树</span>\n<span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span><span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> nodetype<span class="token punctuation">;</span>\n\n  <span class="token comment">// 获取左结点的整数文字同时获取下一个元素</span>\n  left <span class="token operator">=</span> <span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 下一个元素是文件结尾，返回左节点</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token <span class="token operator">==</span> T_EOF<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> left<span class="token punctuation">;</span>\n\n  <span class="token comment">// 转换元素到结点的类型</span>\n  nodetype <span class="token operator">=</span> <span class="token function">arithop</span><span class="token punctuation">(</span>Token<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 获取下一个元素</span>\n  <span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 递归右子树</span>\n  right <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  n <span class="token operator">=</span> <span class="token function">mkastnode</span><span class="token punctuation">(</span>nodetype<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>请注意在此解析器代码中，没有任何地方可以处理不同的运算符优先级。就目前而言，该代码将所有运算符都视为具有相同的优先级。如果您在解析表达式时遵循代码 2 _ 3 + 4 _ 5，则会看到它构建了这个 AST：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="37273107977455485000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`  *\n / \\\n2   +\n   / \\\n  3   *\n     / \\\n    4   5`, `37273107977455485000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">  *\n / \\\n2   +\n   / \\\n  3   *\n     / \\\n    4   5</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这绝对是不正确的。</p>\n<p>那我为什么要这样做呢？我想向您展示，编写一个简单的解析器很容易，但是要使其同时进行语义分析也很困难。</p>\n<h2 id="解释树"><a href="#%E8%A7%A3%E9%87%8A%E6%A0%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解释树</h2>\n<p>现在我们有了（错误的）AST 树，让我们编写一些代码来解释它。同样，我们将编写递归代码遍历树。这是伪代码：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="14958424200780618000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interpretTree:\n  First, interpret the left-hand sub-tree and get its value\n  Then, interpret the right-hand sub-tree and get its value\n  Perform the operation in the node at the root of our tree\n  on the two sub-tree values, and return this value`, `14958424200780618000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">interpretTree:\n  First, interpret the left-hand sub-tree and get its value\n  Then, interpret the right-hand sub-tree and get its value\n  Perform the operation in the node at the root of our tree\n  on the two sub-tree values, and return this value</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>返回正确的 AST 树：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56384900593564600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`      +\n     / \\\n    /   \\\n   /     \\\n  *       *\n / \\     / \\\n2   3   4   5`, `56384900593564600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">      +\n     / \\\n    /   \\\n   /     \\\n  *       *\n / \\     / \\\n2   3   4   5</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>调用结构如下所示：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="29596068145719288000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`interpretTree0(tree with +):\n  Call interpretTree1(left tree with *):\n     Call interpretTree2(tree with 2):\n       No maths operation, just return 2\n     Call interpretTree3(tree with 3):\n       No maths operation, just return 3\n     Perform 2 * 3, return 6\n\n  Call interpretTree1(right tree with *):\n     Call interpretTree2(tree with 4):\n       No maths operation, just return 4\n     Call interpretTree3(tree with 5):\n       No maths operation, just return 5\n     Perform 4 * 5, return 20\n\n  Perform 6 + 20, return 26`, `29596068145719288000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">interpretTree0(tree with +):\n  Call interpretTree1(left tree with *):\n     Call interpretTree2(tree with 2):\n       No maths operation, just return 2\n     Call interpretTree3(tree with 3):\n       No maths operation, just return 3\n     Perform 2 * 3, return 6\n\n  Call interpretTree1(right tree with *):\n     Call interpretTree2(tree with 4):\n       No maths operation, just return 4\n     Call interpretTree3(tree with 5):\n       No maths operation, just return 5\n     Perform 4 * 5, return 20\n\n  Perform 6 + 20, return 26</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="解释树的代码"><a href="#%E8%A7%A3%E9%87%8A%E6%A0%91%E7%9A%84%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>解释树的代码</h2>\n<p>interp.c</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="55118294799563050000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`// AST tree interpreter\n// Copyright (c) 2019 Warren Toomey, GPL3\n\n// List of AST operators\nstatic char *ASTop[] = { &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot; };\n\n// 给一个 AST 树并做出解释得到最终值\nint interpretAST(struct ASTnode *n) {\n  int leftval, rightval;\n\n  if (n->left)\n    leftval = interpretAST(n->left);\n  if (n->right)\n    rightval = interpretAST(n->right);\n\n  // 调试\n  if (n->op == A_INTLIT)\n    printf(&quot;int %d\\n&quot;, n->intvalue);\n  else\n    printf(&quot;%d %s %d\\n&quot;, leftval, ASTop[n->op], rightval);\n\n  switch (n->op) {\n    case A_ADD:\n      return (leftval + rightval);\n    case A_SUBTRACT:\n      return (leftval - rightval);\n    case A_MULTIPLY:\n      return (leftval * rightval);\n    case A_DIVIDE:\n      return (leftval / rightval);\n    case A_INTLIT:\n      return (n->intvalue);\n    default:\n      fprintf(stderr, &quot;Unknown AST operator %d\\n&quot;, n->op);\n      exit(1);\n  }\n}`, `55118294799563050000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token comment">// AST tree interpreter</span>\n<span class="token comment">// Copyright (c) 2019 Warren Toomey, GPL3</span>\n\n<span class="token comment">// List of AST operators</span>\n<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>ASTop<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 给一个 AST 树并做出解释得到最终值</span>\n<span class="token keyword">int</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ASTnode</span> <span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> leftval<span class="token punctuation">,</span> rightval<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span>\n    leftval <span class="token operator">=</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span>\n    rightval <span class="token operator">=</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span>n<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 调试</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op <span class="token operator">==</span> A_INTLIT<span class="token punctuation">)</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int %d\\n"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s %d\\n"</span><span class="token punctuation">,</span> leftval<span class="token punctuation">,</span> ASTop<span class="token punctuation">[</span>n<span class="token operator">-></span>op<span class="token punctuation">]</span><span class="token punctuation">,</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> A_ADD<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">+</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_SUBTRACT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">-</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_MULTIPLY<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">*</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_DIVIDE<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>leftval <span class="token operator">/</span> rightval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> A_INTLIT<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unknown AST operator %d\\n"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>同样，当我们无法解释 AST 节点类型时，switch 语句中的默认语句也会触发。这将成为解析器中语义检查的一部分。</p>\n<h2 id="构建解析器"><a href="#%E6%9E%84%E5%BB%BA%E8%A7%A3%E6%9E%90%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>构建解析器</h2>\n<p>这里还有其他一些代码，例如 main()对解释器的调用：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="72515375576404260000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`scan(&Token); // Get the first token from the input\nn = binexpr(); // Parse the expression in the file\nprintf(&quot;%d\\n&quot;, interpretAST(n)); // Calculate the final result\nexit(0);`, `72515375576404260000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the first token from the input</span>\nn <span class="token operator">=</span> <span class="token function">binexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Parse the expression in the file</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\\n"</span><span class="token punctuation">,</span> <span class="token function">interpretAST</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Calculate the final result</span>\n<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="97182605335816000000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`2 + 3 * 5 - 8 / 3`, `97182605335816000000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">2 + 3 * 5 - 8 / 3</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="3503528649794840600"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`13 -6+  4*\n5\n       +\n08 / 3`, `3503528649794840600`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">13 -6+  4*\n5\n       +\n08 / 3</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="39346608046195850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`12 34 + -56 * / - - 8 + * 2`, `39346608046195850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">12 34 + -56 * / - - 8 + * 2</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46645736206872625000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`23 +\n18 -\n45.6 * 2\n/ 18`, `46645736206872625000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">23 +\n18 -\n45.6 * 2\n/ 18</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="86506888940923400000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`int 2\nint 3\nint 5\nint 8\nint 3\n8 / 3\n5 - 2\n3 * 3\n2 + 9\n11`, `86506888940923400000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">int 2\nint 3\nint 5\nint 8\nint 3\n8 / 3\n5 - 2\n3 * 3\n2 + 9\n11</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="85862985571747170000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`int 13\nint 6\nint 4\nint 5\nint 8\nint 3\n8 / 3\n5 + 2\n4 * 7\n6 + 28\n13 - 34\n-21`, `85862985571747170000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">int 13\nint 6\nint 4\nint 5\nint 8\nint 3\n8 / 3\n5 + 2\n4 * 7\n6 + 28\n13 - 34\n-21</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35537340016511787000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`unknown token in arithop() on line 1`, `35537340016511787000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">unknown token in arithop() on line 1</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79779089240263070000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Unrecognised character . on line 3`, `79779089240263070000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">Unrecognised character . on line 3</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h1 id="结论"><a href="#%E7%BB%93%E8%AE%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结论</h1>\n<p>解析器识别该语言的语法，并检查编译器的输入是否符合该语法。如果不是，则解析器应打印出错误消息。由于我们的表达式语法是递归的，因此我们选择编写递归下降解析器来识别我们的表达式。</p>\n<p>现在，解析器可以正常工作，如上面的输出所示，但是它无法获得正确语义。换句话说，它无法计算表达式的正确值。</p>\n<p>在编译器编写过程的下一部分中，我们将修改解析器，以便它也对表达式进行语义分析以获得正确的数学结果。</p>',
id:"/github/workspace/blog/编译器之旅（二）——解析简介/index.md absPath of file >>> MarkdownRemark",timeToRead:6,frontmatter:{date:"2020-02-27 09:57:06",path:"/tour-of-compiler-analysis-introduction/",tags:"编译原理, 语法分析",title:"编译器之旅（二）——解析简介",draft:null}},{excerpt:"原理知识 可参考  parsing techniques…",html:'<h1 id="原理知识"><a href="#%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>原理知识</h1>\n<p>可参考 <a href="http://parsing-techniques.duguying.net/" target="_blank" rel="nofollow noreferrer noopener">parsing techniques 中文译本——《解析技术》</a></p>\n<h1 id="目标"><a href="#%E7%9B%AE%E6%A0%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>目标</h1>\n<ul>\n<li>编写一个自编译的编译器：我认为如果编译器可以自行编译，就可以称其为真正的编译器。</li>\n<li>针对至少一个真实的硬件平台：我见过一些为假设的机器生成代码的编译器，我希望我的编译器可以在真正的硬件上运行。另外，如果可能的话我想编写编译器，以便它可以为不同的硬件平台支持多个后端。</li>\n<li>研究前实用：在编译器领域有很多研究，在此过程中我想从绝对零开始，因此我倾向于采用一种实用的方法，而不是理论繁重的方法，就是说有时候我需要介绍（并实现）一些基于理论的东西。</li>\n<li>遵循 KISS 原则：保持简单，我肯定会在这里使用肯·汤普森的原则：“如有疑问，请使用蛮力。”</li>\n<li>采取许多小步骤以达到最终目标：我将把旅程分解成许多简单的步骤，而不是进行大的飞跃。这将使编译器中的每个新添加内容都变成一口大小且易于消化的东西。</li>\n<li>对其他语言的编译有所启发：了解真实语言的编译过程，有助于了解 babel 编译的过程</li>\n</ul>\n<h1 id="搭建开发环境"><a href="#%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>搭建开发环境</h1>\n<p>使用 Ubuntu 系统，运行以下命令安装软件包即可</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="92883676354235630000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(` \\$ sudo apt-get install build-essential`, `92883676354235630000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"> $ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>构造一个简单的词法扫描器，识别输入语言中的词法元素或标记</p>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<p>我们将从只有五个词法元素的语言开始：</p>\n<ul>\n<li>这四个基本的数学运算符：*，/，+和-</li>\n<li>具有 1 个或多个数字的十进制整数 0..9</li>\n</ul>\n<p>扫描到的每个元素的结构如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12357725496412609000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`struct token {\n  int token;\n  int intvalue;\n};`, `12357725496412609000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">token</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> token<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> intvalue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中 token 字段可以为以下值之一：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="46477427490152420000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`enum {\n  T_PLUS, T_MINUS, T_STAR, T_SLASH, T_INTLIT\n};`, `46477427490152420000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">{</span>\n  T_PLUS<span class="token punctuation">,</span> T_MINUS<span class="token punctuation">,</span> T_STAR<span class="token punctuation">,</span> T_SLASH<span class="token punctuation">,</span> T_INTLIT\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>当 token 为 T_INTLIT 时，intvalue 将保存我们搜索到的整数值</p>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="scanc"><a href="#scanc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>scan.c</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41942305441513850000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include &quot;defs.h&quot;\n#include &quot;data.h&quot;\n#include &quot;decl.h&quot;\n\n// 词法分析\n// 返回字符 c 在字符串 s 的位置\nstatic int chrpos(char *s, int c) {\n  char *p;\n\n  p = strchr(s, c);\n  return (p ? p - s : -1);\n}\n\n// 读取文件的每一个字符\nstatic int next(void) {\n  int c;\n\n  if (Putback) {  // Putback 有值时，回退到字符 Putback\n    c = Putback;\n    Putback = 0;\n    return c;\n  }\n\n  c = fgetc(Infile);  // 从文件指针 stream 指向的文件中读取一个字符，读取一个字节后，光标位置后移一个字节，Infile 是全局变量\n  if (\'\\n\' == c)\n    Line++; //  记录行号\n  return c;\n}\n\n// 回退到字符 c 处\nstatic void putback(int c) {\n  Putback = c;\n}\n\n// 跳过空白字符\nstatic int skip(void) {\n  int c;\n\n  c = next(); // 读取第一个字符\n  while (\' \' == c || \'\\t\' == c || \'\\n\' == c || \'\\r\' == c || \'\\f\' == c) { // 遇到空白字符马上跳过\n    c = next();\n  }\n  return c;\n}\n\n// 扫描字符串中的整数，注意整数的连续性\nstatic int scanint(int c) {\n  int k, val = 0;\n\n  // 遇到整数字符累加，直至遇到非整数字符\n  // 为什么不简单地从中减去 ASCII 值使 c 其成为整数？\n  // 因为之后的 chrpos(&quot;0123456789abcdef&quot;) 能转换十六进制数字\n  while ((k = chrpos(&quot;0123456789&quot;, c)) >= 0) {\n    val = val * 10 + k;\n    c = next();\n  }\n\n  // 此时已是非整数字符，回退到 c 字符\n  putback(c);\n  return val;\n}\n\nint scan(struct token *t) {\n  int c;\n\n  // 跳过空白，读取第一个非空字符\n  c = skip();\n\n  // 处理字符\n  switch (c) {\n    case EOF:\n      return 0;\n    case \'+\':\n      t->token = T_PLUS;\n      break;\n    case \'-\':\n      t->token = T_MINUS;\n      break;\n    case \'*\':\n      t->token = T_STAR;\n      break;\n    case \'/\':\n      t->token = T_SLASH;\n      break;\n    default:\n      if (isdigit(c)) {\n        t->intvalue = scanint(c);\n        t->token = T_INTLIT;\n        break;\n    }\n\n    printf(&quot;Unrecognised character %c on line %d\\n&quot;, c, Line);\n    exit(1);\n  }\n\n  // We found a token\n  return 1;\n}`, `41942305441513850000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"defs.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"data.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"decl.h"</span></span>\n\n<span class="token comment">// 词法分析</span>\n<span class="token comment">// 返回字符 c 在字符串 s 的位置</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">chrpos</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>\n\n  p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">?</span> p <span class="token operator">-</span> s <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 读取文件的每一个字符</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Putback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Putback 有值时，回退到字符 Putback</span>\n    c <span class="token operator">=</span> Putback<span class="token punctuation">;</span>\n    Putback <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>Infile<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从文件指针 stream 指向的文件中读取一个字符，读取一个字节后，光标位置后移一个字节，Infile 是全局变量</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'\\n\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span>\n    Line<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//  记录行号</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 回退到字符 c 处</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putback</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Putback <span class="token operator">=</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 跳过空白字符</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n\n  c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取第一个字符</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">\' \'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\t\'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\n\'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\r\'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\f\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遇到空白字符马上跳过</span>\n    c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 扫描字符串中的整数，注意整数的连续性</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">scanint</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> k<span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 遇到整数字符累加，直至遇到非整数字符</span>\n  <span class="token comment">// 为什么不简单地从中减去 ASCII 值使 c 其成为整数？</span>\n  <span class="token comment">// 因为之后的 chrpos("0123456789abcdef") 能转换十六进制数字</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token function">chrpos</span><span class="token punctuation">(</span><span class="token string">"0123456789"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val <span class="token operator">=</span> val <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> k<span class="token punctuation">;</span>\n    c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 此时已是非整数字符，回退到 c 字符</span>\n  <span class="token function">putback</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">token</span> <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n\n  <span class="token comment">// 跳过空白，读取第一个非空字符</span>\n  c <span class="token operator">=</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 处理字符</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">EOF</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'+\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_PLUS<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'-\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_MINUS<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'*\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_STAR<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'/\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_SLASH<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        t<span class="token operator">-></span>intvalue <span class="token operator">=</span> <span class="token function">scanint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t<span class="token operator">-></span>token <span class="token operator">=</span> T_INTLIT<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unrecognised character %c on line %d\\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// We found a token</span>\n  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="mainc"><a href="#mainc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>main.c</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="12310810061741306000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include &quot;defs.h&quot;\n#define extern_\n#include &quot;data.h&quot;\n#undef extern_\n#include &quot;decl.h&quot;\n#include <errno.h>\n\nstatic void init() {\n  Line = 1;\n  Putback = \'\\n\';\n}\n\n// Print out a usage if started incorrectly\nstatic void usage(char *prog) {\n  fprintf(stderr, &quot;Usage: %s infile\\n&quot;, prog);\n  exit(1);\n}\n\n// List of printable tokens\nchar *tokstr[] = { &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;intlit&quot; };\n\nstatic void scanfile() {\n  struct token T;\n\n  while (scan(&T)) {\n    printf(&quot;Token %s&quot;, tokstr[T.token]);\n    if (T.token == T_INTLIT)\n      printf(&quot;, value %d&quot;, T.intvalue);\n    printf(&quot;\\n&quot;);\n  }\n}\n\nvoid main(int argc, char *argv[]) {\n  // 检查参数合法性\n  if (argc != 2)\n    usage(argv[0]);\n\n  init();\n\n  // 打不开文件错误处理\n  if ((Infile = fopen(argv[1], &quot;r&quot;)) == NULL) {\n    fprintf(stderr, &quot;Unable to open %s: %s\\n&quot;, argv[1], strerror(errno));\n    exit(1);\n  }\n\n  scanfile();\n  exit(0);\n}`, `12310810061741306000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                c 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"defs.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">define</span> extern_</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"data.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">undef</span> extern_</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"decl.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Line <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  Putback <span class="token operator">=</span> <span class="token string">\'\\n\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Print out a usage if started incorrectly</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>prog<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: %s infile\\n"</span><span class="token punctuation">,</span> prog<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// List of printable tokens</span>\n<span class="token keyword">char</span> <span class="token operator">*</span>tokstr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"intlit"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">scanfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">token</span> T<span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Token %s"</span><span class="token punctuation">,</span> tokstr<span class="token punctuation">[</span>T<span class="token punctuation">.</span>token<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>token <span class="token operator">==</span> T_INTLIT<span class="token punctuation">)</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", value %d"</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 检查参数合法性</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token function">usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 打不开文件错误处理</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Infile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unable to open %s: %s\\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">scanfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="47775646802441330000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`23 +\n18 -\n45.6 * 2\n/ 18`, `47775646802441330000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"><span class="token number">23</span> +\n<span class="token number">18</span> -\n<span class="token number">45.6</span> * <span class="token number">2</span>\n/ <span class="token number">18</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="35372603186782925000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`2 + 3 * 5 - 8 / 3`, `35372603186782925000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"><span class="token number">2</span> + <span class="token number">3</span> * <span class="token number">5</span> - <span class="token number">8</span> / <span class="token number">3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="1931132806070557000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Token intlit, value 23\nToken +\nToken intlit, value 18\nToken -\nToken intlit, value 45\nUnrecognised character . on line 3`, `1931132806070557000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">Token intlit, value <span class="token number">23</span>\nToken +\nToken intlit, value <span class="token number">18</span>\nToken -\nToken intlit, value <span class="token number">45</span>\nUnrecognised character <span class="token builtin class-name">.</span> on line <span class="token number">3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33303170123183624000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Token intlit, value 2\nToken +\nToken intlit, value 3\nToken *\nToken intlit, value 5\nToken -\nToken intlit, value 8\nToken /\nToken intlit, value 3`, `33303170123183624000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                bash 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">Token intlit, value <span class="token number">2</span>\nToken +\nToken intlit, value <span class="token number">3</span>\nToken *\nToken intlit, value <span class="token number">5</span>\nToken -\nToken intlit, value <span class="token number">8</span>\nToken /\nToken intlit, value <span class="token number">3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',
id:"/github/workspace/blog/编译器之旅（一）——词法分析/index.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{date:"2020-02-26 11:15:59",path:"/tour-of-compiler-lexical-analysis/",tags:"编译原理, 词法分析",title:"编译器之旅（一）——词法分析",draft:null}},{excerpt:"典型技术选型 集客顾客端脚手架搭建 记一次组件打包为链接的实践 选型背景 将第三方 SDK 打包为链接，类似于   这样的一个链接，实现粘贴代码即可完成部署。 技术选型过程 考虑到的方案有 rollup、jQuery、原生 js，鉴于这些方案的实现都比较复杂且没有积累，最终采用 webpack 脚手架。 其实更好的实现方式使用原生 js…",html:'<h1 id="典型技术选型"><a href="#%E5%85%B8%E5%9E%8B%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>典型技术选型</h1>\n<h2 id="集客顾客端脚手架搭建"><a href="#%E9%9B%86%E5%AE%A2%E9%A1%BE%E5%AE%A2%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>集客顾客端脚手架搭建</h2>\n<p><a href="/components-pack-as-library/">记一次组件打包为链接的实践</a></p>\n<h3 id="选型背景"><a href="#%E9%80%89%E5%9E%8B%E8%83%8C%E6%99%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选型背景</h3>\n<p>将第三方 SDK 打包为链接，类似于 <code class="language-text">&lt;script src=&quot;打包后库的地址?deployId=部署ID&quot; name=&quot;唯一标识符&quot;&gt;&lt;/script&gt;</code> 这样的一个链接，实现粘贴代码即可完成部署。</p>\n<h3 id="技术选型过程"><a href="#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E8%BF%87%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>技术选型过程</h3>\n<p>考虑到的方案有 rollup、jQuery、原生 js，鉴于这些方案的实现都比较复杂且没有积累，最终采用 webpack 脚手架。</p>\n<p>其实更好的实现方式使用原生 js 写，加载速度更快。</p>\n<h2 id="集客顾客端组件优化"><a href="#%E9%9B%86%E5%AE%A2%E9%A1%BE%E5%AE%A2%E7%AB%AF%E7%BB%84%E4%BB%B6%E4%BC%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>集客顾客端组件优化</h2>\n<p><a href="/building-platform-lightweight-components/">构建多平台轻量化组件的实践</a></p>\n<h3 id="选型背景-1"><a href="#%E9%80%89%E5%9E%8B%E8%83%8C%E6%99%AF-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选型背景</h3>\n<p>在将客服组件上线后，由于未考虑到加载的组件包的大小，尤其是初始加载的包比较大，即使是压缩过初始加载也有 600 多 k，严重影响首页加载，导致加载此脚本的网站需要很长时间才能响应</p>\n<h3 id="技术选型过程-1"><a href="#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E8%BF%87%E7%A8%8B-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>技术选型过程</h3>\n<p>考虑到的方案有</p>\n<ol>\n<li>组件异步加载，减少首屏加载，非首屏的较大的组件可以预加载（预加载没想到）</li>\n<li>轻量级库：</li>\n<li>所有 UI 组件自己编写，保证只写需要的组件</li>\n<li>去掉较大的依赖库</li>\n<li>移动端、桌面端的分开打包，参考拓客（没想到，我想到的是移动端另开一个新项目）</li>\n<li>代码分层，尤其是 IM 层要分离出来（没考虑过这方面）</li>\n</ol>\n<h2 id="轻量级网站构建"><a href="#%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%AB%99%E6%9E%84%E5%BB%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>轻量级网站构建</h2>\n<p><a href="/lightweight-website-construction/">轻量级网站构建实践</a></p>\n<h3 id="选型背景-2"><a href="#%E9%80%89%E5%9E%8B%E8%83%8C%E6%99%AF-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选型背景</h3>\n<p>微信端的问卷调查，需要在三端（桌面端、移动端、微信端）同时兼容</p>\n<h3 id="技术选型过程-2"><a href="#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E8%BF%87%E7%A8%8B-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>技术选型过程</h3>\n<ol>\n<li>后端渲染模板（未想到），以下是一些缺点</li>\n<li>后端渲染对 CPU 的要求较高</li>\n<li>打算用 oss 来减少后端渲染，但考虑到表单经常变化，且分享的链接要尽可能的保持不变，这就限制了 oss 的使用</li>\n<li>由于分享的链接要尽可能的保持不变，在新的表单分享模板加入后需要后端刷数据，容错性较低</li>\n<li>最终方案：采用前后端分离的方式，用原生语法新框架写，本来打算采用官网脚手架，但考虑到官网脚手架只能在 node v9.11.2 版本下使用，且不支持 ES6 及以上的语法，决定在 generator-webapp 脚手架的基础上改造</li>\n</ol>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<h2 id="选型共性"><a href="#%E9%80%89%E5%9E%8B%E5%85%B1%E6%80%A7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选型共性</h2>\n<h3 id="优点"><a href="#%E4%BC%98%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>优点</h3>\n<ol>\n<li>比较看重开发的效率性，会避免自己不熟悉的领域，开发比较快</li>\n<li>尽可能的寻找各种选型，会从前端的各种方面优化</li>\n</ol>\n<h3 id="缺点"><a href="#%E7%BC%BA%E7%82%B9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>缺点</h3>\n<ol>\n<li>比较看重开发的效率性，会避免自己不熟悉的领域，少了一些技术上的尝试（新项目尝试新技术）</li>\n<li>对选型背景不够了解，选型的技术方案考虑的不够全面（加深知识的广度，了解一些后端、前端新知识）</li>\n<li>没有分析技术的优劣势，以及可能存在的风险（列出技术方案时应给出优缺点，以及实现的风险）</li>\n<li>基本没有考虑到代码的架构（适当关注一下代码架构）</li>\n<li>没有从多方面考虑，比如从后端、需求的角度（同样加深知识的广度）</li>\n<li>没有参考市面上同类产品已经成熟的技术（选型时注意参考市面上已有的成熟技术）</li>\n</ol>\n<h2 id="选型经验教训"><a href="#%E9%80%89%E5%9E%8B%E7%BB%8F%E9%AA%8C%E6%95%99%E8%AE%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>选型经验教训</h2>\n<ol>\n<li>对于新的技术方案，先验证后使用，最好参考市面上同类已有的成熟技术</li>\n<li>深化知识广度，建立知识索引</li>\n<li>了解需求背景，有时可以从非技术的方面突破</li>\n<li>适度尝试新技术</li>\n</ol>',id:"/github/workspace/blog/2019年技术选型总结/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2020-01-20 21:06:13",path:"/summary-of-technology-selection-in-2019/",tags:"前端, 技术选型, 总结",title:"2019年技术选型总结",draft:null}},{excerpt:"字符介绍 字符以及 HTML 实体 描述以及说明 这是我们使用最多的空格，也就是按下 space 键产生的空格。在 HTML 中，如果你用空格键产生此空格，空格是不会累加的（只算 1 个）。要使用 html 实体表示才可累加。为了便于记忆，我总是把这个空格成为“牛逼(nb)空格(sp – space)”，虽然实际上并不牛逼。该空格占据宽度受字体影响明显而强烈。在 inline-block…",html:'<h1 id="字符介绍"><a href="#%E5%AD%97%E7%AC%A6%E4%BB%8B%E7%BB%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>字符介绍</h1>\n<table>\n<thead>\n<tr>\n<th align="left">字符以及 HTML 实体</th>\n<th align="left">描述以及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="left"><code class="language-text">&amp;nbsp;</code></td>\n<td align="left">这是我们使用最多的空格，也就是按下 space 键产生的空格。在 HTML 中，如果你用空格键产生此空格，空格是不会累加的（只算 1 个）。要使用 html 实体表示才可累加。为了便于记忆，我总是把这个空格成为“牛逼(nb)空格(sp – space)”，虽然实际上并不牛逼。该空格占据宽度受字体影响明显而强烈。在 inline-block 布局中会搞些小破坏，在两端对齐布局中又是不可少的元素。是个让人又爱又恨的小东东。</td>\n</tr>\n<tr>\n<td align="left"><code class="language-text">&amp;ensp;</code></td>\n<td align="left">该空格学名不详。为了便于记忆，我们不妨就叫它“恶念(e n-ian)空格”。此空格传承空格家族一贯的特性：透明滴！此空格有个相当稳健的特性，就是其占据的宽度正好是 1/2 个中文宽度，而且基本上不受字体影响。</td>\n</tr>\n<tr>\n<td align="left"><code class="language-text">&amp;emsp;</code></td>\n<td align="left">该空格学名不详。为了便于记忆，我们不妨就叫它”恶魔(e m-o)空格”。此空格也传承空格家族一贯的特性：透明滴！此空格也有个相当稳健的特性，就是其占据的宽度正好是 1 个中文宽度，而且基本上不受字体影响。</td>\n</tr>\n<tr>\n<td align="left"><code class="language-text">&amp;thinsp;</code></td>\n<td align="left">该空格学名不详。我们不妨称之为“瘦弱空格”，就是该空格长得比较瘦弱，身体单薄，占据的宽度比较小。我目前是没用过这个东西，这里亮出来是让其过一下群众演员的瘾。</td>\n</tr>\n</tbody>\n</table>\n<p>其中的<code class="language-text">&amp;ensp;</code>和<code class="language-text">&amp;emsp;</code>，由于具有某一超赞的特性，使其可以登上 web 届的舞台！什么特性呢？如上表加粗展示，</p>\n<ol>\n<li>透明；</li>\n<li>宽度正好跟中文正好是 1:2 和 1:1 的关系</li>\n</ol>\n<p>于是，一些中文排版对齐什么的，直接就可以使用这两个空格调节，如：</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 25%; position: relative; height: 0; overflow: hidden;margin-bottom: 2em"\n          >\n            <iframe src="/examples/tips-blank-character-chinese-align/space-and-text-layout.html" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p><div class="gatsby-highlight">\n        <pre class="language-html"><code><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n    <span class="token selector">html,\n    body</span> <span class="token punctuation">{</span>\n      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>\n      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token selector">ul</span> <span class="token punctuation">{</span>\n      <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n      <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token selector">.li</span> <span class="token punctuation">{</span>\n      <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">\'宋体\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓<span class="token entity" title="&emsp;">&amp;emsp;</span><span class="token entity" title="&emsp;">&amp;emsp;</span>名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手<span class="token entity" title="&ensp;">&amp;ensp;</span>机<span class="token entity" title="&ensp;">&amp;ensp;</span>号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>电子邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n        </div></p>\n<p>上面的空白字符中文对齐方法在 IE6 下不能完全兼容</p>\n<h1 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h1>\n<p>当中文和英文混杂的时候，使用<code class="language-text">&amp;ensp;</code>, <code class="language-text">&amp;emsp;</code>等空格实现冒号的完美对齐还是有些困难的，除非英文使用的是等宽字体，于是乎，我们就可以使用普通的<code class="language-text">&amp;nbsp;</code>空格做英文字符的宽度调节。</p>\n<ol>\n<li>HTML 中字符输出使用&#x26;#x 配上 charCode 值；</li>\n<li>在 JavaScript 文件中为防止乱码转义，则是\\u 配上 charCode 值；</li>\n<li>而在 CSS 文件中，如 CSS 伪元素的 content 属性，直接使用\\配上 charCode 值。</li>\n</ol>\n<p>因此，想在 HTML/JS/CSS 中转义“我”这个汉字，分别是：</p>\n<ol>\n<li><code class="language-text">&amp;#x6211</code>;</li>\n<li>\\u6211, 如<code class="language-text">console.log(&#39;\\u6211&#39;)</code>;</li>\n<li>\\6211, 如<code class="language-text">.xxx:before { content: &#39;\\6211&#39;; }</code></li>\n</ol>\n<p>考虑到直接<code class="language-text">&amp;#x3000;</code>这种形式暴露在 HTML 中，可能会让屏幕阅读器等辅助设备读取，从而影响正常阅读流，因此，我们可以进一步优化下，使用标签，利用伪元素，例如：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="32943797110248264000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`.half:before {\n  content: \'\\2002\'; /* &ensp; */\n  speak: none;\n}\n\n.full:before {\n  content: \'\\2003\'; /* &emsp; */\n  speak: none;\n}`, `32943797110248264000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                css 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="css"><pre style="counter-reset: linenumber NaN" class="language-css line-numbers"><code class="language-css"><span class="token selector">.half:before</span> <span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'\\2002\'</span><span class="token punctuation">;</span> <span class="token comment">/* &amp;ensp; */</span>\n  <span class="token property">speak</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.full:before</span> <span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">\'\\2003\'</span><span class="token punctuation">;</span> <span class="token comment">/* &amp;emsp; */</span>\n  <span class="token property">speak</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',id:"/github/workspace/blog/使用&#x3000;等空格实现最小成本中文对齐/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2020-01-20 10:29:05",path:"/tips-blank-character-chinese-align/",tags:"前端, CSS, CSS知识点",title:"使用&#x3000;等空格实现最小成本中文对齐",draft:null}}],page:10,pagesSum:37,length:185,prevPath:"/page/9",nextPath:"/page/11"}}}});