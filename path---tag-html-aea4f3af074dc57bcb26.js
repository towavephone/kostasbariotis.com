webpackJsonp([0xa4ee93538291],{1295:function(n,a){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"DOCTYPE 有什么用？ 版本一 在 HTML 中 doctype 有两个主要目的。 对文档进行有效性验证: 它告诉用户代理和校验器这个文档是按照什么 DTD 写的。这个动作是被动的，每次页面加载时，浏览器并不会下载 DTD 并检查合法性，只有当手动校验页面时才启用。 决定浏览器的呈现模式: 对于实际操作，通知浏览器读取文档时用哪种解析算法。如果没有写，则浏览器则根据自身的规则对代码进行解析，可能会严重影响 HTML 排版布局。浏览器有三种方式解析 HTML…",html:'<h2 id="doctype-有什么用？"><a href="#doctype-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>DOCTYPE 有什么用？</h2>\n<h3 id="版本一"><a href="#%E7%89%88%E6%9C%AC%E4%B8%80" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本一</h3>\n<p>在 HTML 中 doctype 有两个主要目的。</p>\n<ul>\n<li>对文档进行有效性验证: 它告诉用户代理和校验器这个文档是按照什么 DTD 写的。这个动作是被动的，每次页面加载时，浏览器并不会下载 DTD 并检查合法性，只有当手动校验页面时才启用。</li>\n<li>\n<p>决定浏览器的呈现模式:<br>\n对于实际操作，通知浏览器读取文档时用哪种解析算法。如果没有写，则浏览器则根据自身的规则对代码进行解析，可能会严重影响 HTML 排版布局。浏览器有三种方式解析 HTML 文档。</p>\n<ul>\n<li>非怪异（标准）模式</li>\n<li>怪异模式</li>\n<li>部分怪异（近乎标准）模式</li>\n</ul>\n</li>\n</ul>\n<h3 id="版本二"><a href="#%E7%89%88%E6%9C%AC%E4%BA%8C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本二</h3>\n<ol>\n<li>\n<!doctype>声明必须处于HTML文档的头部，在`<html>`标签之前，HTML5中不区分大小写\n</li>\n<li>\n<!doctype>声明不是一个HTML标签，是一个用于告诉浏览器当前HTMl版本的指令\n</li>\n<li>现代浏览器的 html 布局引擎通过检查 doctype 决定使用兼容模式还是标准模式对文档进行渲染，一些浏览器有一个接近标准模型</li>\n<li>在 HTML4.01 中&#x3C;!doctype>声明指向一个 DTD，由于 HTML4.01 基于 SGML，所以 DTD 指定了标记规则以保证浏览器正确渲染内容</li>\n<li>HTML5 不基于 SGML，所以不用指定 DTD</li>\n</ol>\n<p><strong>常见 doctype：</strong></p>\n<ol>\n<li><code class="language-text">HTML4.01 strict</code>：不允许使用表现性、废弃元素（如 font）以及 frameset。声明：<!DOCTYPE HTML PUBLIC "`-//W3C//DTD HTML 4.01//EN`" "`http://www.w3.org/TR/html4/strict.dtd`"></li>\n<li><code class="language-text">HTML4.01 Transitional</code>：允许使用表现性、废弃元素（如 font），不允许使用 frameset。声明：<!DOCTYPE HTML PUBLIC "`-//W3C//DTD HTML 4.01 Transitional//EN`" "`http://www.w3.org/TR/html4/loose.dtd`"></li>\n<li><code class="language-text">HTML4.01 Frameset</code>：允许表现性元素，废弃元素以及 frameset。声明：<!DOCTYPE HTML PUBLIC "`-//W3C//DTD HTML 4.01 Frameset//EN`" "`http://www.w3.org/TR/html4/frameset.dtd`"></li>\n<li><code class="language-text">XHTML1.0 Strict</code>：不使用允许表现性、废弃元素以及 frameset。文档必须是结构良好的 XML 文档。声明：<!DOCTYPE html PUBLIC "`-//W3C//DTD XHTML 1.0 Strict//EN`" "`http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd`"></li>\n<li><code class="language-text">XHTML1.0 Transitional</code>：允许使用表现性、废弃元素，不允许 frameset，文档必须是结构良好的 XMl 文档。声明： <!DOCTYPE html PUBLIC "`-//W3C//DTD XHTML 1.0 Transitional//EN`" "`http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd`"></li>\n<li><code class="language-text">XHTML 1.0 Frameset</code>：允许使用表现性、废弃元素以及 frameset，文档必须是结构良好的 XML 文档。声明：<!DOCTYPE html PUBLIC "`-//W3C//DTD XHTML 1.0 Frameset//EN`" "`http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd`"></li>\n<li><code class="language-text">HTML 5</code>: <!doctype html></li>\n</ol>\n<h2 id="如何提供包含多种语言内容的页面？"><a href="#%E5%A6%82%E4%BD%95%E6%8F%90%E4%BE%9B%E5%8C%85%E5%90%AB%E5%A4%9A%E7%A7%8D%E8%AF%AD%E8%A8%80%E5%86%85%E5%AE%B9%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何提供包含多种语言内容的页面？</h2>\n<p>这个问题有点问得含糊其辞，我认为这是在询问最常见的情况：如何提供包含多种语言内容的页面，并保证页面内容语言的一致性。</p>\n<p>当客户端向服务器发送 HTTP 请求时，通常会发送有关语言首选项的信息，比如使用 Accept-Language 请求头。如果替换语言存在，服务器可以利用该信息返回与之相匹配的 HTML 文档。返回的 HTML 文档还应在<code class="language-text">&lt;html&gt;</code>标签中声明 lang 属性，比如<code class="language-text">&lt;html lang=&quot;en&quot;&gt;...&lt;/html&gt;</code></p>\n<p>在后台中，HTML 将包含 i18n 占位符和待以替换的内容，这些按照不同语言，以 YML 或 JSON 格式存储。然后，服务器将动态生成指定语言内容的 HTML 页面。整个过程通常需要借助后台框架实现。</p>\n<h2 id="在设计开发多语言网站时，需要留心哪些事情？"><a href="#%E5%9C%A8%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BD%91%E7%AB%99%E6%97%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E7%95%99%E5%BF%83%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在设计开发多语言网站时，需要留心哪些事情？</h2>\n<ul>\n<li>在 HTML 中使用 lang 属性。</li>\n<li>引导用户切换到自己的母语——让用户能够轻松地切换到自己的国家或语言，而不用麻烦。</li>\n<li>在图片中展示文本会阻碍网站规模增长——把文本放在图片中展示，仍然是一种非常流行的方式。这样做可以在所有终端上，都能显示出美观的非系统字体。然而，为了翻译图片中的文本，需要为每种语言单独创建对应的图片，这种做法很容易在图片数量不断增长的过程中失控。</li>\n<li>限制词语或句子的长度——网页内容在使用其他语言表述时，文字长度会发生变化。设计时，需要警惕文字长度溢出布局的问题，最好不要使用受文字长度影响较大的设计。比如标题、标签、按钮的设计，往往很受文字长度影响，这些设计中的文字与正文或评论部分不同，一般不可以自由换行。</li>\n<li>注意颜色的使用——颜色在不同的语言和文化中，意义和感受是不同的。设计时应该使用恰当的颜色。</li>\n<li>日期和货币的格式化——日期在不同的国家和地区，会以不同的方式显示。比如美国的日期格式是<code class="language-text">May 31, 2012</code>，而在欧洲部分地区，日期格式是<code class="language-text">31 May 2012</code>。</li>\n<li>不要使用连接的翻译字符串——不要做类似这样的事情，比如“今天的日期是”+具体日期。这样做可能会打乱其他语言的语序。替代方案是，为每种语言编写带变量替换的模版字符串。</li>\n<li>注意语言阅读的方向——在英语中，文字是从左向右阅读的；而在传统日语中，文字是从右向左阅读的。</li>\n</ul>\n<h2 id="什么是-data-属性？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-data-%E5%B1%9E%E6%80%A7%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是 data-属性？</h2>\n<h3 id="版本一-1"><a href="#%E7%89%88%E6%9C%AC%E4%B8%80-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本一</h3>\n<p>在 JavaScript 框架变得流行之前，前端开发者经常使用 data-属性，把额外数据存储在 DOM 自身中。当时没有其他 Hack 手段（比如使用非标准属性或 DOM 上额外属性）。这样做是为了将自定义数据存储到页面或应用中，对此没有其他更适当的属性或元素。</p>\n<p>而现在，不鼓励使用 data-属性。原因之一是，用户可以通过在浏览器中利用检查元素，轻松地修改属性值，借此修改数据。数据模型最好存储在 JavaScript 本身中，并利用框架提供的数据绑定，使之与 DOM 保持更新。</p>\n<h3 id="版本二-1"><a href="#%E7%89%88%E6%9C%AC%E4%BA%8C-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本二</h3>\n<p>data- 为前端开发者提供自定义的属性，这些属性集可以通过对象的 dataset 属性获取，不支持该属性的浏览器可以通过 getAttribute 方法获取:</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="15763720678339533000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<div data-author=&quot;david&quot; data-time=&quot;2011-06-20&quot; data-comment-num=&quot;10&quot;>...</div>\n\ndiv.dataset.commentNum; // 10`, `15763720678339533000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-author</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>david<span class="token punctuation">"</span></span> <span class="token attr-name">data-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2011-06-20<span class="token punctuation">"</span></span> <span class="token attr-name">data-comment-num</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\ndiv.dataset.commentNum; // 10</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>需要注意的是，data- 之后的以连字符分割的多个单词组成的属性，获取的时候使用驼峰风格。并不是所有的浏览器都支持 .dataset 属性，测试的浏览器中只有 Chrome 和 Opera 支持。</p>\n<p>即：当没有合适的属性和元素时，自定义的 data 属性是能够存储页面或 App 的私有的自定义数据。</p>\n<h2 id="将-html5-看作成开放的网络平台，什么是-html5-的基本构件（building-block）？"><a href="#%E5%B0%86-html5-%E7%9C%8B%E4%BD%9C%E6%88%90%E5%BC%80%E6%94%BE%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF-html5-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9E%84%E4%BB%B6%EF%BC%88building-block%EF%BC%89%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>将 HTML5 看作成开放的网络平台，什么是 HTML5 的基本构件（building block）？</h2>\n<h3 id="版本一-2"><a href="#%E7%89%88%E6%9C%AC%E4%B8%80-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本一</h3>\n<ul>\n<li>连接 - 提供新的方式与服务器通信。</li>\n<li>离线和存储 - 允许网页在本地存储数据并有效地离线运行。</li>\n<li>多媒体 - 在 Open Web 中，视频和音频被视为一等公民（first-class citizens）。</li>\n<li>2D/3D 图形和特效 - 提供更多种演示选项。</li>\n<li>性能和集成 - 提供更快的访问速度和性能更好的计算机硬件。</li>\n<li>设备访问 - 允许使用各种输入、输出设备。</li>\n<li>外观 - 可以开发丰富的主题。</li>\n</ul>\n<h3 id="版本二-2"><a href="#%E7%89%88%E6%9C%AC%E4%BA%8C-2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>版本二</h3>\n<p>开放网络平台（Open Web Platform）是一些开放的（免版权）技术的集合，这些技术激活了互联网。使用开放网络平台时，每个人都有权实现 Web 上的一个组件，而不用向任何人索取许可和证书。</p>\n<p>将 HTML5 看做开放网络平台，那它的构建模块有哪些？我想，所谓构建模块，指的应该是开放网络平台这个技术集合中的技术。</p>\n<ul>\n<li>HTML</li>\n<li>DOM</li>\n<li>CSS</li>\n<li>SVG</li>\n<li>MathML</li>\n<li>\n<p>Web APIs</p>\n<ul>\n<li>Canvas WebGL</li>\n<li>Audio</li>\n<li>Web Storage</li>\n<li>File, File System</li>\n<li>History, contentEditable, Drag &#x26; Drop, HTML Editing Commands</li>\n<li>Web Sockets</li>\n<li>Web Workers</li>\n<li>Server-Send Events</li>\n<li>XMLHttpRequest</li>\n<li>Geolocation, Device Orientation</li>\n<li>DOM Events, Touch Events, Progress Events</li>\n<li>Custom application development</li>\n<li>Clipboard and events</li>\n<li>Web Notifications, Web Messaging</li>\n<li>Offine Web Applications</li>\n<li>Media Capture API</li>\n<li>Timing control for script-based animations, Page Visibility, Navigation + Timing, Resource Timing</li>\n<li>Selectors</li>\n<li>DOM Traversal, DOM XPath, Element Traversal</li>\n<li>EcmaScript / JavaScript</li>\n<li>HTTP</li>\n<li>URI</li>\n<li>Media Accessibility Checklist</li>\n</ul>\n</li>\n</ul>\n<h2 id="请描述-cookie、sessionstorage-和-localstorage-的区别。"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0-cookie%E3%80%81sessionstorage-%E5%92%8C-localstorage-%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述 cookie、sessionStorage 和 localStorage 的区别。</h2>\n<p>上面提到的技术名词，都是在客户端以键值对存储的存储机制，并且只能将值存储为字符串。</p>\n<ul>\n<li>\n<p>Cookie</p>\n<ul>\n<li>每个域名存储量比较小（各浏览器不同，大致 4K）</li>\n<li>所有域名的存储量有限制（各浏览器不同，大致 4K）</li>\n<li>有个数限制（各浏览器不同）</li>\n<li>会随请求发送到服务器</li>\n</ul>\n</li>\n<li>\n<p>LocalStorage</p>\n<ul>\n<li>永久存储</li>\n<li>单个域名存储量比较大（推荐 5MB，各浏览器不同）</li>\n<li>总体数量无限制</li>\n</ul>\n</li>\n<li>\n<p>SessionStorage</p>\n<ul>\n<li>只在 Session 内有效</li>\n<li>存储量更大（推荐没有限制，但是实际上各浏览器也不同）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code class="language-text">cookie</code></th>\n<th><code class="language-text">localStorage</code></th>\n<th><code class="language-text">sessionStorage</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>由谁初始化</td>\n<td>客户端或服务器，服务器可以使用\n<code class="language-text">Set-Cookie</code>\n请求头。</td>\n<td>客户端</td>\n<td>客户端</td>\n</tr>\n<tr>\n<td>过期时间</td>\n<td>手动设置</td>\n<td>永不过期</td>\n<td>当前页面关闭时</td>\n</tr>\n<tr>\n<td>在当前浏览器会话（browser sessions）中是否保持不变</td>\n<td>取决于是否设置了过期时间</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>是否随着每个 HTTP 请求发送给服务器</td>\n<td>是，Cookies 会通过\n<code class="language-text">Cookie</code>\n请求头，自动发送给服务器</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>容量（每个域名）</td>\n<td>4kb</td>\n<td>5MB</td>\n<td>5MB</td>\n</tr>\n<tr>\n<td>访问权限</td>\n<td>任意窗口</td>\n<td>任意窗口</td>\n<td>当前页面窗口</td>\n</tr>\n</tbody>\n</table>\n<h2 id="请描述-script、script-async-和-script-defer-的区别"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0-script%E3%80%81script-async-%E5%92%8C-script-defer-%E7%9A%84%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述 script、script async 和 script defer 的区别</h2>\n<ul>\n<li><code class="language-text">&lt;script&gt;</code> - HTML 解析中断，脚本被提取并立即执行。执行结束后，HTML 解析继续。</li>\n<li><code class="language-text">&lt;script async&gt;</code> - 脚本的提取、执行的过程与 HTML 解析过程并行，脚本执行完毕可能在 HTML 解析完毕之前。当脚本与页面上其他脚本独立时，可以使用 <code class="language-text">async</code>，比如用作页面统计分析。</li>\n<li><code class="language-text">&lt;script defer&gt;</code> - 脚本仅提取过程与 HTML 解析过程并行，脚本的执行将在 HTML 解析完毕后进行。如果有多个含 defer 的脚本，脚本的执行顺序将按照在 <code class="language-text">document</code> 中出现的位置，从上到下顺序执行。</li>\n</ul>\n<p>注意：没有 src 属性的脚本，async 和 defer 属性会被忽略。</p>\n<h2 id="为什么最好把-css-的-link-标签放在-head-之间？为什么最好把-js-的-script-标签恰好放在-body-之前，有例外情况吗？"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%A5%BD%E6%8A%8A-css-%E7%9A%84-link-%E6%A0%87%E7%AD%BE%E6%94%BE%E5%9C%A8-head-%E4%B9%8B%E9%97%B4%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%80%E5%A5%BD%E6%8A%8A-js-%E7%9A%84-script-%E6%A0%87%E7%AD%BE%E6%81%B0%E5%A5%BD%E6%94%BE%E5%9C%A8-body-%E4%B9%8B%E5%89%8D%EF%BC%8C%E6%9C%89%E4%BE%8B%E5%A4%96%E6%83%85%E5%86%B5%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么最好把 CSS 的 link 标签放在 head 之间？为什么最好把 JS 的 script 标签恰好放在 body 之前，有例外情况吗？</h2>\n<h3 id="把-link-放在-head-中"><a href="#%E6%8A%8A-link-%E6%94%BE%E5%9C%A8-head-%E4%B8%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>把 link 放在 head 中</h3>\n<p>把 <code class="language-text">&lt;link&gt;</code> 标签放在 <code class="language-text">&lt;head&gt;&lt;/head&gt;</code> 之间是规范要求的内容。此外，这种做法可以让页面逐步呈现，提高了用户体验。将样式表放在文档底部附近，会使许多浏览器（包括 <code class="language-text">Internet Explorer</code>）不能逐步呈现页面。一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。</p>\n<h3 id="把-script-标签恰好放在-body-之前"><a href="#%E6%8A%8A-script-%E6%A0%87%E7%AD%BE%E6%81%B0%E5%A5%BD%E6%94%BE%E5%9C%A8-body-%E4%B9%8B%E5%89%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>把 script 标签恰好放在 body 之前</h3>\n<p>脚本在下载和执行期间会阻止 HTML 解析。把 <code class="language-text">&lt;script&gt;</code> 标签放在底部，保证 <code class="language-text">HTML</code> 首先完成解析，将页面尽早呈现给用户。</p>\n<p>例外情况是当你的脚本里包含 <code class="language-text">document.write()</code> 时。但是现在，<code class="language-text">document.write()</code> 不推荐使用。同时，将 <code class="language-text">&lt;script&gt;</code> 标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档 <code class="language-text">（document）</code> 被解析。也许，对此比较好的做法是， <code class="language-text">&lt;script&gt;</code> 使用 <code class="language-text">defer</code> 属性，放在 <code class="language-text">&lt;head&gt;</code> 中。</p>\n<h2 id="什么是渐进式渲染（progressive-rendering）？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%B8%B2%E6%9F%93%EF%BC%88progressive-rendering%EF%BC%89%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是渐进式渲染（progressive rendering）？</h2>\n<p>渐进式渲染是用于提高网页性能（尤其是提高用户感知的加载速度），以尽快呈现页面的技术。</p>\n<p>在以前互联网带宽较小的时期，这种技术更为普遍。如今，移动终端的盛行，而移动网络往往不稳定，渐进式渲染在现代前端开发中仍然有用武之地。</p>\n<p>一些举例：</p>\n<p>图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript 将加载并显示图像。确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的 CSS、脚本和内容，然后可以使用延迟加载脚本或监听 DOMContentLoaded/load 事件加载其他资源和内容。异步加载 HTML 片段——当页面通过后台渲染时，把 HTML 拆分，通过异步请求，分块发送给浏览器。更多相关细节可以在<a href="http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/" target="_blank" rel="nofollow noreferrer noopener">这里</a>找到。</p>\n<h2 id="为什么在-img-标签中使用-srcset-属性？请描述浏览器遇到该属性后的处理过程。"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-img-%E6%A0%87%E7%AD%BE%E4%B8%AD%E4%BD%BF%E7%94%A8-srcset-%E5%B1%9E%E6%80%A7%EF%BC%9F%E8%AF%B7%E6%8F%8F%E8%BF%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E9%81%87%E5%88%B0%E8%AF%A5%E5%B1%9E%E6%80%A7%E5%90%8E%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B%E3%80%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么在 img 标签中使用 srcset 属性？请描述浏览器遇到该属性后的处理过程。</h2>\n<p>因为需要设计响应式图片。我们可以使用两个新的属性 <code class="language-text">srcset</code> 和 <code class="language-text">sizes</code> 来提供更多额外的资源图像和提示，帮助浏览器选择正确的一个资源。</p>\n<p>srcset 定义了我们允许浏览器选择的图像集，以及每个图像的大小。</p>\n<p>sizes 定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择。</p>\n<p>所以，有了这些属性，浏览器会：</p>\n<ol>\n<li>查看设备宽度</li>\n<li>检查 sizes 列表中哪个媒体条件是第一个为真</li>\n<li>查看给予该媒体查询的槽大小</li>\n<li>加载 srcset 列表中引用的最接近所选的槽大小的图像</li>\n</ol>\n<h2 id="你有过使用不同模版语言的经历吗？"><a href="#%E4%BD%A0%E6%9C%89%E8%BF%87%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E6%A8%A1%E7%89%88%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%8F%E5%8E%86%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>你有过使用不同模版语言的经历吗？</h2>\n<p>有过，比如 Pug （以前叫 Jade）、 ERB、 Slim、 Handlebars、 Jinja、 Liquid 等等。在我看来，这些模版语言大多是相似的，都提供了用于展示数据的内容替换和过滤器的功能。大部分模版引擎都支持自定义过滤器，以展示自定义格式的内容。</p>\n<h2 id="浏览器标准模式和怪异模式之间的区别是什么？"><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>浏览器标准模式和怪异模式之间的区别是什么？</h2>\n<p>在 <code class="language-text">标准模式(Standards Mode)</code> 页面按照 <code class="language-text">HTML</code> 与 <code class="language-text">CSS</code> 的定义渲染，而在 <code class="language-text">怪异模式(Quirks Mode)</code> 就是浏览器为了兼容很早之前针对旧版本浏览器设计、并未严格遵循 <code class="language-text">W3C</code> 标准的网页而产生的一种页面渲染模式。浏览器基于页面中文件类型描述的存在以决定采用哪种渲染模式；如果存在一个完整的 <code class="language-text">DOCTYPE</code> 则浏览器将会采用标准模式，而如果它缺失则浏览器将会采用怪异模式。</p>\n<p>强烈建议阅读加深理解：<a href="http://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/" target="_blank" rel="nofollow noreferrer noopener">怪异模式（Quirks Mode）对 HTML 页面的影响</a>，这里列下浏览器标准模式和怪异模式的区别：</p>\n<ol>\n<li>盒模型：在怪异模式下，盒模型为 IE 盒模型而非标准模式下的 W3C 盒模型：在 IE 盒模型中， box width = content width + padding left + padding right + border left + border right， box height = content height + padding top + padding bottom + border top + border bottom。 而在 W3C 标准的盒模型中，box 的大小就是 content 的大小。</li>\n<li>图片元素的垂直对齐方式: 对于 inline 元素和 table-cell 元素，在 IE Standards Mode 下 vertical-align 属性默认取值为 baseline 。而当 inline 元素的内容只有图片时，如 table 的单元格 table-cell 。在 IE Quirks Mode 下，table 单元格中的图片的 vertical-align 属性默认为 bottom，因此在图片底部会有几像素的空间。</li>\n<li><code class="language-text">&lt;table&gt;</code>元素中的字体: CSS 中，描述 font 的属性有 font-family，font-size，font-style，font-weigh, 上述属性都是可以继承的。而在 IE Quirks Mode 下，对于 table 元素，字体的某些属性将不会从 body 或其他封闭元素继承到 table 中，特别是 font-size 属性。</li>\n<li>内联元素的尺寸: 在 IE Standards Mode 下，non-replaced inline 元素无法自定义大小，而在 IE Quirks Mode 下，定义这些元素的 width 和 height 属性，能够影响该元素显示的大小尺寸。</li>\n<li>\n<p>元素的百分比高度:</p>\n<ul>\n<li>CSS 中对于元素的百分比高度规定如下，百分比为元素包含块的高度，不可为负值。如果包含块的高度没有显式给出，该值等同于<code class="language-text">auto</code>（即取决于内容的高度）。所以百分比的高度必须在父元素有声明高度时使用。</li>\n<li>当一个元素使用百分比高度时，在 IE Standards Mode 下，高度取决于内容的变化，而在 Quirks Mode 下，百分比高度则被正确应用。</li>\n</ul>\n</li>\n<li>元素溢出的处理：在 IE Standard Mode 下，overflow 取默认值 visible，即溢出可见，这种情况下，溢出内容不会被裁剪，呈现在元素框外。而在 Quirks Mode 下，该溢出被当做扩展 box 来对待，即元素的大小由其内容决定，溢出不会被裁剪，元素框自动调整，包含溢出内容。</li>\n</ol>\n<h2 id="使用-xhtml-的局限有哪些？如果页面使用-applicationxhtmlxml-会有什么问题吗？"><a href="#%E4%BD%BF%E7%94%A8-xhtml-%E7%9A%84%E5%B1%80%E9%99%90%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%A6%82%E6%9E%9C%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8-applicationxhtmlxml-%E4%BC%9A%E6%9C%89%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用 XHTML 的局限有哪些？如果页面使用 application/xhtml+xml 会有什么问题吗？</h2>\n<p>xhtml 语法要求严格，必须有 head、body 每个 dom 必须要闭合。空标签也必须闭合。例如 <code class="language-text">&lt;img /&gt;</code>, <code class="language-text">&lt;br/&gt;</code>, <code class="language-text">&lt;input/&gt;</code> 等。另外要在属性值上使用双引号。一旦遇到错误，立刻停止解析，并显示错误信息。 如果页面使用 <code class="language-text">application/xhtml+xml</code>，一些老的浏览器会不兼容。</p>\n<h2 id="请描述一下-get-和-post-的区别"><a href="#%E8%AF%B7%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B-get-%E5%92%8C-post-%E7%9A%84%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>请描述一下 GET 和 POST 的区别?</h2>\n<p>区别如下：</p>\n<ul>\n<li>get 向指定的资源请求数据,请求的数据会附在 URL 之后,就是把数据放置在请求行（request line）中），以 ? 分割 URL 和传输数据，多个参数用 &#x26; 连接；</li>\n<li>post 向指定的资源提交要被处理的数据。get 方法，查询请求是在 url 中显示的，有长度限制，get 方法是安全幂等的。而 post 方法请求是封装在 http 消息包体中</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align="center">类型</th>\n<th align="center">get</th>\n<th align="center">post</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">后退/刷新</td>\n<td align="center">无害</td>\n<td align="center">请求重新提交</td>\n</tr>\n<tr>\n<td align="center">书签</td>\n<td align="center">可做书签</td>\n<td align="center">不可做</td>\n</tr>\n<tr>\n<td align="center">缓存</td>\n<td align="center">可被缓存</td>\n<td align="center">不能被缓存</td>\n</tr>\n<tr>\n<td align="center">历史</td>\n<td align="center">保留在浏览器记录里</td>\n<td align="center">不保留</td>\n</tr>\n<tr>\n<td align="center">对数据长度限制</td>\n<td align="center">限制（2048 字符）</td>\n<td align="center">不限制</td>\n</tr>\n<tr>\n<td align="center">安全性</td>\n<td align="center">url 中暴露数据</td>\n<td align="center">相对安全</td>\n</tr>\n<tr>\n<td align="center">可见性</td>\n<td align="center">url 中可见</td>\n<td align="center">不可见</td>\n</tr>\n</tbody>\n</table>\n<p>总结：</p>\n<ul>\n<li>对于 get 来说，是向服务器端请求数据，其请求在 url 中可见，其长度有限制（2048 字符），个体方法是安全幂等，这里的安全是指用于获取信息而非修改信息，幂等是指每次请求得到的结果都一样。</li>\n<li>对于 post 来说，是向服务器端提交数据，每次刷新或者后退都会重新提交，post 请求的数据封装在 http 请求的首部里。</li>\n</ul>\n<h2 id="前端需要注意哪些-seo"><a href="#%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B-seo" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前端需要注意哪些 SEO</h2>\n<ol>\n<li>合理的 title、description、keywords：搜索对着三项的权重逐个减小，title 值强调重点即可，重要关键词出现不要超过 2 次，而且要靠前，不同页面 title 要有所不同；description 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 description 有所不同；keywords 列举出重要关键词即可</li>\n<li>语义化的 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页</li>\n<li>重要内容 HTML 代码放在最前：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>\n<li>重要内容不要用 js 输出：爬虫不会执行 js 获取内容</li>\n<li>少用 iframe：搜索引擎不会抓取 iframe 中的内容</li>\n<li>非装饰性图片必须加 alt</li>\n<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>\n</ol>\n<h2 id="web-开发中会话跟踪的方法有哪些"><a href="#web-%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>web 开发中会话跟踪的方法有哪些</h2>\n<ol>\n<li>cookie 使用账号密码无密码登录网站，提交购物支付</li>\n<li>session</li>\n<li>\n<p>url 重写</p>\n<ol>\n<li>客户端禁止使用 Cookie 使用，encodeURL 防止账号密码泄露</li>\n<li>比如把 <code class="language-text">http://blog.csdn.net/ default.aspx ?name=simonlv&amp;password=11111</code> 变成为 <code class="language-text">http://blog.csdn.net/simonlv/</code> 或者 <code class="language-text">http://blog.csdn.net/default.aspx;name=%$#%@$&amp;password=$#@$#@</code></li>\n</ol>\n</li>\n<li>隐藏表单域当第一张页面提交后，服务器端作出响应返回第二张页面，此页面中用隐藏域记录了来自登陆时的用户名</li>\n<li>ip 地址</li>\n</ol>\n<h2 id="img-的-title-和-alt-有什么区别"><a href="#img-%E7%9A%84-title-%E5%92%8C-alt-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>img 的 title 和 alt 有什么区别</h2>\n<ol>\n<li>title 是 <a href="http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core" target="_blank" rel="nofollow noreferrer noopener">global attributes</a> 之一，用于为元素提供附加的 advisory information。通常当鼠标滑动到元素上的时候显示。</li>\n<li>alt 是 <code class="language-text">&lt;img&gt;</code> 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li>\n</ol>\n<h2 id="html-全局属性global-attribute有哪些"><a href="#html-%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7global-attribute%E6%9C%89%E5%93%AA%E4%BA%9B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTML 全局属性(global attribute)有哪些</h2>\n<p>参考资料：<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="nofollow noreferrer noopener">MDN: html global attribute</a> 或者 <a href="http://www.w3.org/TR/html-markup/global-attributes.html#common.attrs.core" target="_blank" rel="nofollow noreferrer noopener">W3C HTML global-attributes</a></p>\n<ul>\n<li><code class="language-text">accesskey</code>:设置快捷键，提供快速访问元素如 aaa 在 windows 下的 firefox 中按 alt + shift + a 可激活元素</li>\n<li><code class="language-text">class</code>:为元素设置类标识，多个类名用空格分开， CSS 和 javascript 可通过 class 属性获取元素</li>\n<li><code class="language-text">contenteditable</code>: 指定元素内容是否可编辑</li>\n<li><code class="language-text">contextmenu</code>: 自定义鼠标右键弹出菜单内容</li>\n<li><code class="language-text">data-*</code>: 为元素增加自定义属性</li>\n<li><code class="language-text">dir</code>: 设置元素文本方向</li>\n<li><code class="language-text">draggable</code>: 设置元素是否可拖拽</li>\n<li><code class="language-text">dropzone</code>: 设置元素拖放类型： copy, move, link</li>\n<li><code class="language-text">hidden</code>: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果</li>\n<li><code class="language-text">id</code>: 元素 id，文档内唯一</li>\n<li><code class="language-text">lang</code>: 元素内容的的语言</li>\n<li><code class="language-text">spellcheck</code>: 是否启动拼写和语法检查</li>\n<li><code class="language-text">style</code>: 行内 css 样式</li>\n<li><code class="language-text">tabindex</code>: 设置元素可以获得焦点，通过 tab 可以导航</li>\n<li><code class="language-text">title</code>: 元素相关的建议信息</li>\n<li><code class="language-text">translate</code>: 元素和子孙节点内容是否需要本地化</li>\n</ul>\n<h2 id="什么是-web-语义化有什么好处"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-web-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是 web 语义化,有什么好处</h2>\n<p>web 语义化是指通过 HTML 标记表示页面包含的信息，包含了 HTML 标签的语义化和 css 命名的语义化。HTML 标签的语义化是指：通过使用包含语义的标签（如 h1-h6）恰当地表示文档结构 css 命名的语义化是指：为 html 标签添加有意义的 class，id 补充未表达的语义，如 Microformat 通过添加符合规则的 class 描述信息。</p>\n<p>为什么需要语义化：</p>\n<ul>\n<li>去掉样式后页面呈现清晰的结构</li>\n<li>盲人使用读屏器更好地阅读</li>\n<li>搜索引擎更好地理解页面，有利于收录</li>\n<li>便于团队项目的可持续运作及维护</li>\n</ul>\n<h2 id="http-method"><a href="#http-method" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTP method</h2>\n<ol>\n<li>一台服务器要与 HTTP1.1 兼容，只要为资源实现 GET 和 HEAD 方法即可</li>\n<li>GET 是最常用的方法，通常用于请求服务器发送某个资源。</li>\n<li>HEAD 与 GET 类似，但服务器在响应中值返回首部，不返回实体的主体部分</li>\n<li>PUT 让服务器用请求的主体部分来创建一个由所请求的 URL 命名的新文档，或者，如果那个 URL 已经存在的话，就用这个主体替代它</li>\n<li>POST 起初是用来向服务器输入数据的。实际上，通常会用它来支持 HTML 的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。</li>\n<li>TRACE 会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个 TRACE 响应并在响应主体中携带它收到的原始请求报文。TRACE 方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。</li>\n<li>OPTIONS 方法请求 web 服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。</li>\n<li>DELETE 请求服务器删除 URL 指定的资源</li>\n</ol>\n<h2 id="从浏览器地址栏输入-url-到显示页面的步骤以-http-为例"><a href="#%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-url-%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4%E4%BB%A5-http-%E4%B8%BA%E4%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>从浏览器地址栏输入 url 到显示页面的步骤(以 HTTP 为例)</h2>\n<ol>\n<li>在浏览器地址栏输入 URL</li>\n<li>\n<p>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p>\n<ol>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证</li>\n<li>检验新鲜通常有两个 HTTP 头进行控制 Expires 和 Cache-Control</li>\n<li>HTTP1.0 提供 Expires，值为一个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1 增加了 Cache-Control: max-age=，值为以秒为单位的最大新鲜时间</li>\n</ol>\n</li>\n<li>浏览器解析 URL 获取协议，主机，端口，path</li>\n<li>浏览器组装一个 HTTP（ GET ） 请求报文</li>\n<li>\n<p>浏览器获取主机 IP 地址，过程如下：</p>\n<ol>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts 文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS 缓存</li>\n<li>DNS 递归查询（可能存在负载均衡导致每次 IP 不一样）</li>\n</ol>\n</li>\n<li>\n<p>打开一个 socket 与目标 IP 地址，端口建立 TCP 链接，三次握手如下：</p>\n<ol>\n<li>客户端发送一个 TCP 的 SYN=1，Seq=X 的包到服务器端口</li>\n<li>服务器发回 SYN=1，ACK=X+1，Seq=Y 的响应包</li>\n<li>客户端发送 ACK=Y+1，Seq=Z</li>\n</ol>\n</li>\n<li>TCP 链接建立后发送 HTTP 请求</li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用 HTTP Host 头部判断请求的服务程序</li>\n<li>服务器检查 HTTP 请求头是否包含缓存验证信息。如果验证缓存新鲜，返回 304 等对应状态码</li>\n<li>处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作</li>\n<li>服务器将响应报文通过 TCP 连接发送回浏览器</li>\n<li>\n<p>浏览器接收 HTTP 响应，然后根据情况选择关闭 TCP 连接或者保留重用，关闭 TCP 连接的四次握手如下：</p>\n<ol>\n<li>主动方发送 Fin=1，ACK=Z，Seq= X 报文</li>\n<li>被动方发送 ACK=X+1，Seq=Z 报文</li>\n<li>被动方发送 Fin=1，ACK=X，Seq=Y 报文</li>\n<li>主动方发送 ACK=Y，Seq=X 报文</li>\n</ol>\n</li>\n<li>浏览器检查响应状态码：是否为 1XX，3XX，4XX，5XX，这些情况处理与 2XX 不同</li>\n<li>如果资源可缓存，进行缓存</li>\n<li>对响应进行解码（例如 gzip 压缩）</li>\n<li>根据资源类型决定如何处理（假设资源为 HTML 文档）</li>\n<li>解析 HTML 文档，构造 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本，这些操作没有严格的先后顺序，以下分别解释</li>\n<li>\n<p>构建 DOM 树：</p>\n<ol>\n<li>Tokenizing：根据 HTML 规范将字符流解析为标记</li>\n<li>Lexing：词法分析将标记转换为对象并定义属性和规则</li>\n<li>DOM construction：根据 HTML 标记关系将对象组成 DOM 树</li>\n</ol>\n</li>\n<li>解析过程中遇到图片、样式表、js 文件，启动下载</li>\n<li>\n<p>构建 CSSOM 树：</p>\n<ol>\n<li>Tokenizing：字符流转换为标记流</li>\n<li>Node：根据标记创建节点</li>\n<li>CSSOM：节点创建 CSSOM 树</li>\n</ol>\n</li>\n<li>\n<p>根据 DOM 树和 CSSOM 树构建渲染树:</p>\n<ol>\n<li>\n<p>从 DOM 树的根节点遍历所有可见节点，不可见节点包括：</p>\n<ol>\n<li>script,meta 这样本身不可见的标签。</li>\n<li>被 css 隐藏的节点，如 display:none</li>\n</ol>\n</li>\n<li>对每一个可见节点，找到恰当的 CSSOM 规则并应用</li>\n<li>发布可视节点的内容和计算样式</li>\n</ol>\n</li>\n<li>\n<p>js 解析如下：</p>\n<ol>\n<li>浏览器创建 Document 对象并解析 HTML，将解析到的元素和文本节点添加到文档中，此时 document.readyState 为 loading</li>\n<li>HTML 解析器遇到没有 async 和 defer 的 script 时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停，这样就可以用 document.write() 把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容</li>\n<li>当解析器遇到设置了 async 属性的 script 时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用 document.write()，它们可以访问自己 script 和之前的文档元素</li>\n<li>当文档完成解析，document.readyState 变成 interactive</li>\n<li>所有 defer 脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用 document.write()</li>\n<li>浏览器在 Document 对象上触发 DOMContentLoaded 事件</li>\n<li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readyState 变为 complete ,window 触发 load 事件</li>\n</ol>\n</li>\n<li>显示页面（ HTML 解析过程中会逐步显示页面）</li>\n</ol>\n<h2 id="http-request-报文结构是怎样的"><a href="#http-request-%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTP request 报文结构是怎样的</h2>\n<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html" target="_blank" rel="nofollow noreferrer noopener">rfc2616</a>中进行了定义：</p>\n<ol>\n<li>首行是 Request-Line 包括：请求方法，请求 URI，协议版本，CRLF</li>\n<li>首行之后是若干行请求头，包括 general-header，request-header 或者 entity-header，每个一行以 CRLF 结束</li>\n<li>请求头和消息实体之间有一个 CRLF 分隔</li>\n<li>根据实际请求需要可能包含一个消息实体</li>\n</ol>\n<p>一个请求报文例子如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33257413487528776000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1 Host: www.w3.org Connection: keep-alive Cache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 User-Agent: Mozilla/5.0 (Windows NT\n6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 Referer:\nhttps://www.google.com.hk/ Accept-Encoding: gzip,deflate,sdch Accept-Language: zh-CN,zh;q=0.8,en;q=0.6 Cookie:\nauthorstyle=yes If-None-Match: &quot;2cc8-3e3073913b100&quot; If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT name=qiu&age=25`, `33257413487528776000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html">GET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1 Host: www.w3.org Connection: keep-alive Cache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 User-Agent: Mozilla/5.0 (Windows NT\n6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36 Referer:\nhttps://www.google.com.hk/ Accept-Encoding: gzip,deflate,sdch Accept-Language: zh-CN,zh;q=0.8,en;q=0.6 Cookie:\nauthorstyle=yes If-None-Match: "2cc8-3e3073913b100" If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT name=qiu&amp;age=25</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="如何进行网站性能优化"><a href="#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何进行网站性能优化</h2>\n<p><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="nofollow noreferrer noopener">雅虎 Best Practices for Speeding Up Your Web Site:</a> <a href="/2018/01/05/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">前端性能优化最佳实践</a></p>\n<ul>\n<li>\n<p>content 方面</p>\n<ol>\n<li>减少 HTTP 请求：合并文件、CSS 精灵、Inline Image</li>\n<li>减少 DNS 查询：DNS 查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS 缓存、将资源分布到恰当数量的主机名，平衡并行下载和 DNS 查询</li>\n<li>避免重定向：多余的中间访问</li>\n<li>使 Ajax 可缓存</li>\n<li>非必须组件延迟加载</li>\n<li>未来所需组件预加载</li>\n<li>减少 DOM 元素数量</li>\n<li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li>\n<li>减少 iframe 数量</li>\n<li>不要 404</li>\n</ol>\n</li>\n<li>\n<p>Server 方面</p>\n<ol>\n<li>使用 CDN</li>\n<li>添加 Expires 或者 Cache-Control 响应头</li>\n<li>对组件使用 Gzip 压缩</li>\n<li>配置 ETag</li>\n<li>Flush Buffer Early</li>\n<li>Ajax 使用 GET 进行请求</li>\n<li>避免空 src 的 img 标签</li>\n</ol>\n</li>\n<li>\n<p>Cookie 方面</p>\n<ol>\n<li>减小 cookie 大小</li>\n<li>引入资源的域名不要包含 cookie</li>\n</ol>\n</li>\n<li>\n<p>css 方面</p>\n<ol>\n<li>将样式表放到页面顶部</li>\n<li>不使用 CSS 表达式</li>\n<li>不使用@import</li>\n<li>不使用 IE 的 Filter</li>\n</ol>\n</li>\n<li>\n<p>Javascript 方面</p>\n<ol>\n<li>将脚本放到页面底部</li>\n<li>将 javascript 和 css 从外部引入</li>\n<li>压缩 javascript 和 css</li>\n<li>删除不需要的脚本</li>\n<li>减少 DOM 访问</li>\n<li>合理设计事件监听器</li>\n</ol>\n</li>\n<li>\n<p>图片方面</p>\n<ol>\n<li>优化图片：根据实际颜色需要选择色深、压缩</li>\n<li>优化 css 精灵</li>\n<li>不要在 HTML 中拉伸图片</li>\n<li>保证 favicon.ico 小并且可缓存</li>\n</ol>\n</li>\n<li>\n<p>移动方面</p>\n<ol>\n<li>保证组件小于 25k</li>\n<li>Pack Components into a Multipart Document</li>\n</ol>\n</li>\n</ul>\n<h2 id="什么是渐进增强"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是渐进增强</h2>\n<p>渐进增强是指在 web 设计时强调可访问性、语义化 HTML 标签、外部样式表和脚本。保证所有人都能访问页面的基本内容和功能同时为高级浏览器和高带宽用户提供更好的用户体验。核心原则如下:</p>\n<ul>\n<li>所有浏览器都必须能访问基本内容</li>\n<li>所有浏览器都必须能使用基本功能</li>\n<li>所有内容都包含在语义化标签中</li>\n<li>通过外部 CSS 提供增强的布局</li>\n<li>通过非侵入式、外部 javascript 提供增强功能</li>\n<li>end-user web browser preferences are respected</li>\n</ul>\n<h2 id="http-状态码及其含义"><a href="#http-%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTTP 状态码及其含义</h2>\n<p>参考<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="nofollow noreferrer noopener">RFC 2616</a></p>\n<ul>\n<li>\n<p>1XX：信息状态码</p>\n<ul>\n<li><strong>100 Continue</strong>：客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</li>\n<li><strong>101 Switching Protocols</strong>：服务器已经理解客户端的请求，并将通过 Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到 Upgrade 消息头中定义的那些协议。</li>\n</ul>\n</li>\n<li>\n<p>2XX：成功状态码</p>\n<ul>\n<li><strong>200 OK</strong>：请求成功，请求所希望的响应头或数据体将随此响应返回</li>\n<li><strong>201 Created</strong></li>\n<li><strong>202 Accepted</strong></li>\n<li><strong>203 Non-Authoritative Information</strong></li>\n<li><strong>204 No Content</strong></li>\n<li><strong>205 Reset Content</strong></li>\n<li><strong>206 Partial Content</strong></li>\n</ul>\n</li>\n<li>\n<p>3XX：重定向</p>\n<ul>\n<li><strong>300 Multiple Choices</strong></li>\n<li><strong>301 Moved Permanently</strong></li>\n<li><strong>302 Found</strong></li>\n<li><strong>303 See Other</strong></li>\n<li><strong>304 Not Modified</strong></li>\n<li><strong>305 Use Proxy</strong></li>\n<li><strong>306 （unused）</strong></li>\n<li><strong>307 Temporary Redirect</strong></li>\n</ul>\n</li>\n<li>\n<p>4XX：客户端错误</p>\n<ul>\n<li><strong>400 Bad Request</strong></li>\n<li><strong>401 Unauthorized</strong></li>\n<li><strong>402 Payment Required</strong></li>\n<li><strong>403 Forbidden</strong></li>\n<li><strong>404 Not Found</strong></li>\n<li><strong>405 Method Not Allowed</strong></li>\n<li><strong>406 Not Acceptable</strong></li>\n<li><strong>407 Proxy Authentication Required</strong></li>\n<li><strong>408 Request Timeout</strong></li>\n<li><strong>409 Conflict</strong></li>\n<li><strong>410 Gone</strong></li>\n<li><strong>411 Length Required</strong></li>\n<li><strong>412 Precondition Failed</strong></li>\n<li><strong>413 Request Entity Too Large</strong></li>\n<li><strong>414 Request-URI Too Long</strong></li>\n<li><strong>415 Unsupported Media Type</strong></li>\n<li><strong>416 Requested Range Not Satisfiable</strong></li>\n<li><strong>417 Expectation Failed</strong></li>\n</ul>\n</li>\n<li>\n<p>5XX: 服务器错误</p>\n<ul>\n<li><strong>500 Internal Server Error</strong></li>\n<li><strong>501 Not Implemented</strong></li>\n<li><strong>502 Bad Gateway</strong></li>\n<li><strong>503 Service Unavailable</strong></li>\n<li><strong>504 Gateway Timeout</strong></li>\n<li><strong>505 HTTP Version Not Supported</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id="keygen-是正确的-html5-标签吗？"><a href="#keygen-%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84-html5-%E6%A0%87%E7%AD%BE%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>keygen 是正确的 HTML5 标签吗？</h2>\n<p><code class="language-text">&lt;keygen&gt;</code> 标签规定用于表单的密钥对生成器字段。当提交表单时，私钥存储在本地，公钥发送到服务器。是 HTML5 标签。</p>\n<h2 id="bdo-标签是否可以改变文本方向？"><a href="#bdo-%E6%A0%87%E7%AD%BE%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%94%B9%E5%8F%98%E6%96%87%E6%9C%AC%E6%96%B9%E5%90%91%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>bdo 标签是否可以改变文本方向？</h2>\n<p><code class="language-text">&lt;bdo&gt;</code>标签覆盖默认的文本方向。</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="96618149367629890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<bdo dir=&quot;rtl&quot;>Here is some text</bdo>`, `96618149367629890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bdo</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rtl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Here is some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bdo</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>实现效果：<bdo dir="rtl">Here is some text</bdo></p>\n<h2 id="下列-html-代码是否正确？"><a href="#%E4%B8%8B%E5%88%97-html-%E4%BB%A3%E7%A0%81%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>下列 HTML 代码是否正确？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="40932783781045500000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<figure>\n  <img src=&quot;myimage.jpg&quot; alt=&quot;My image&quot; />\n  <figcaption>\n    <p>This is my self portrait.</p>\n  </figcaption>\n</figure>`, `40932783781045500000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myimage.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my self portrait.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>正确<code class="language-text">&lt;figure&gt;</code>标签规定独立的流内容（图像、图表、照片、代码等等）。figure 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。使用<code class="language-text">&lt;figcaption&gt;</code>元素为 figure 添加标题（caption）。</p>\n<h2 id="哪种情况下应该使用-small-标签？当你想在-h1-标题后创建副标题？还是当在-footer-里面增加版权信息？"><a href="#%E5%93%AA%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8B%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-small-%E6%A0%87%E7%AD%BE%EF%BC%9F%E5%BD%93%E4%BD%A0%E6%83%B3%E5%9C%A8-h1-%E6%A0%87%E9%A2%98%E5%90%8E%E5%88%9B%E5%BB%BA%E5%89%AF%E6%A0%87%E9%A2%98%EF%BC%9F%E8%BF%98%E6%98%AF%E5%BD%93%E5%9C%A8-footer-%E9%87%8C%E9%9D%A2%E5%A2%9E%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>哪种情况下应该使用 small 标签？当你想在 h1 标题后创建副标题？还是当在 footer 里面增加版权信息？</h2>\n<p>small 标签一般使用场景是在版权信息和法律文本里使用，也可以在标题里使用标注附加信息（bootstrap 中可见），但不可以用来创建副标题。</p>\n<blockquote>\n<p>The HTML Small Element (<code class="language-text">&lt;small&gt;</code>) makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser’s minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.</p>\n</blockquote>\n<h2 id="在一个结构良好的-web-网页里，多个-h1-标签会不利于-seo-吗？"><a href="#%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%84%E8%89%AF%E5%A5%BD%E7%9A%84-web-%E7%BD%91%E9%A1%B5%E9%87%8C%EF%BC%8C%E5%A4%9A%E4%B8%AA-h1-%E6%A0%87%E7%AD%BE%E4%BC%9A%E4%B8%8D%E5%88%A9%E4%BA%8E-seo-%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在一个结构良好的 web 网页里，多个 h1 标签会不利于 SEO 吗？</h2>\n<p>不影响。</p>\n<blockquote>\n<p>According to Matt Cutts (lead of Google’s webspam team and the de facto expert on these things), using multiple <code class="language-text">&lt;h1&gt;</code> tags is fine, as long as you’re not abusing it (like sticking your whole page in an <code class="language-text">&lt;h1&gt;</code> and using CSS to style it back to normal size). That would likely have no effect, and might trigger a penalty, as it looks spammy.</p>\n</blockquote>\n<blockquote>\n<p>If you have multiple headings and it would be natural to use multiple <code class="language-text">&lt;h1&gt;</code>’s, then go for it.</p>\n</blockquote>\n<p>摘自：<a href="http://www.quora.com/Does-using-multiple-h1-tags-on-a-page-affect-search-engine-rankings" target="_blank" rel="nofollow noreferrer noopener">http://www.quora.com/Does-using-multiple-h1-tags-on-a-page-affect-search-engine-rankings</a></p>\n<h2 id="如果你有一个搜索结果页面，你想高亮搜索的关键词。什么-html-标签可以使用"><a href="#%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%9C%89%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%BD%A0%E6%83%B3%E9%AB%98%E4%BA%AE%E6%90%9C%E7%B4%A2%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D%E3%80%82%E4%BB%80%E4%B9%88-html-%E6%A0%87%E7%AD%BE%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如果你有一个搜索结果页面，你想高亮搜索的关键词。什么 HTML 标签可以使用?</h2>\n<p><code class="language-text">&lt;mark&gt;</code>标签表现高亮文本。</p>\n<blockquote>\n<p>The HTML <code class="language-text">&lt;mark&gt;</code> Element represents highlighted text, i.e., a run of text marked for reference purpose, due to its relevance in a particular context. For example it can be used in a page showing search results to highlight every instance of the searched for word.</p>\n</blockquote>\n<h2 id="下列代码中-scope-属性是做什么的？"><a href="#%E4%B8%8B%E5%88%97%E4%BB%A3%E7%A0%81%E4%B8%AD-scope-%E5%B1%9E%E6%80%A7%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>下列代码中 scope 属性是做什么的？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="21244094266119820000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<article>\n  <h1>Hello World</h1>\n  <style scoped>\n    p {\n      color: #ff0;\n    }\n  </style>\n  <p>This is my text</p>\n</article>\n\n<article>\n  <h1>This is awesome</h1>\n  <p>I am some other text</p>\n</article>`, `21244094266119820000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n    <span class="token selector">p</span> <span class="token punctuation">{</span>\n      <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is my text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This is awesome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am some other text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>scoped 属性是一个布尔属性。如果使用该属性，则样式仅仅应用到 style 元素的父元素及其子元素。</p>\n<h2 id="html5-支持块级超链接吗？例如："><a href="#html5-%E6%94%AF%E6%8C%81%E5%9D%97%E7%BA%A7%E8%B6%85%E9%93%BE%E6%8E%A5%E5%90%97%EF%BC%9F%E4%BE%8B%E5%A6%82%EF%BC%9A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>HTML5 支持块级超链接吗？例如：</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="20118858377814598000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<article>\n  <a href=&quot;#&quot;>\n    <h1>Hello</h1>\n    <p>I am some text</p>\n  </a>\n</article>`, `20118858377814598000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>支持，HTML5 中<code class="language-text">&lt;a&gt;</code>元素表现为一个超链接，支持任何行内元素和块级元素。</p>\n<h2 id="当下列的-html-代码加载时会触发新的-http-请求吗？"><a href="#%E5%BD%93%E4%B8%8B%E5%88%97%E7%9A%84-html-%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BD%E6%97%B6%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%96%B0%E7%9A%84-http-%E8%AF%B7%E6%B1%82%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>当下列的 HTML 代码加载时会触发新的 HTTP 请求吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="90876301011192600000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<img src=&quot;mypic.jpg&quot; style=&quot;visibility: hidden&quot; alt=&quot;My picture&quot; />`, `90876301011192600000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic.jpg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">visibility</span><span class="token punctuation">:</span> hidden</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My picture<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<p>会。</p>\n<h2 id="当下列的-html-代码加载时会触发新的-http-请求吗？-1"><a href="#%E5%BD%93%E4%B8%8B%E5%88%97%E7%9A%84-html-%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BD%E6%97%B6%E4%BC%9A%E8%A7%A6%E5%8F%91%E6%96%B0%E7%9A%84-http-%E8%AF%B7%E6%B1%82%E5%90%97%EF%BC%9F-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>当下列的 HTML 代码加载时会触发新的 HTTP 请求吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="56074129192617890000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<div style=&quot;display: none;&quot;>\n  <img src=&quot;mypic.jpg&quot; alt=&quot;My photo&quot; />\n</div>`, `56074129192617890000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mypic.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My photo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>会。</p>\n<h2 id="main1css-一定会在-alerthello-world被加载和编译吗"><a href="#main1css-%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%9C%A8-alerthello-world%E8%A2%AB%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91%E5%90%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>main1.css 一定会在 alert(‘Hello world’)被加载和编译吗?</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="64664960075984036000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<head>\n  <link href=&quot;main1.css&quot; rel=&quot;stylesheet&quot; />\n  <script>\n    alert(\'Hello World\');\n  </script>\n</head>`, `64664960075984036000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'Hello World\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>会。</p>\n<h2 id="在-main2css-获取前-main1-一定必须被下载解析吗？"><a href="#%E5%9C%A8-main2css-%E8%8E%B7%E5%8F%96%E5%89%8D-main1-%E4%B8%80%E5%AE%9A%E5%BF%85%E9%A1%BB%E8%A2%AB%E4%B8%8B%E8%BD%BD%E8%A7%A3%E6%9E%90%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在 main2.css 获取前 main1 一定必须被下载解析吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="79311963353821510000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<head>\n  <link href=&quot;main1.css&quot; rel=&quot;stylesheet&quot; />\n  <link href=&quot;main2.css&quot; rel=&quot;stylesheet&quot; />\n</head>`, `79311963353821510000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main2.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>不一定。</p>\n<h2 id="在-paragraph-1-加载后-main2css-才会被加载编译吗？"><a href="#%E5%9C%A8-paragraph-1-%E5%8A%A0%E8%BD%BD%E5%90%8E-main2css-%E6%89%8D%E4%BC%9A%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%BC%96%E8%AF%91%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>在 Paragraph 1 加载后 main2.css 才会被加载编译吗？</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="53535242946011840000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`<head>\n  <link href=&quot;main1.css&quot; rel=&quot;stylesheet&quot; />\n</head>\n<body>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n  <link href=&quot;main2.css&quot; rel=&quot;stylesheet&quot; />\n</body>`, `53535242946011840000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                \n              >\n                html 复制代码\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="html"><pre style="counter-reset: linenumber NaN" class="language-html line-numbers"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main2.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>是。</p>',
id:"/github/workspace/blog/前端面试题HTML部分/index.md absPath of file >>> MarkdownRemark",timeToRead:27,frontmatter:{date:"2018-04-05 18:24:54",path:"/front-end-interview-html/",tags:"面试, HTML, 前端",title:"前端面试题HTML部分",draft:null}}],length:1,tag:"HTML",pagesSum:1,page:1}}}});