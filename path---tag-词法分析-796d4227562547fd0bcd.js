webpackJsonp([0xd96712579a66],{1410:function(n,s){n.exports={data:{site:{siteMetadata:{title:"女王控的博客",description:'前端工程师，黑猫女王控，欢迎勾搭，技术相关<a href="https://github.com/towavephone" target="_blank">@towavephone</a>，QQ闲聊<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=634407147&website=www.oicqzone.com">@towave</a>，bili关注<a href="https://space.bilibili.com/11507708#/" target="_blank">@towave</a>',siteUrl:"https://blog.towavephone.com"}}},pathContext:{posts:[{excerpt:"原理知识 可参考  parsing techniques…",html:'<h1 id="原理知识"><a href="#%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>原理知识</h1>\n<p>可参考 <a href="http://parsing-techniques.duguying.net/" target="_blank" rel="nofollow noreferrer noopener">parsing techniques 中文译本——《解析技术》</a></p>\n<h1 id="目标"><a href="#%E7%9B%AE%E6%A0%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>目标</h1>\n<ul>\n<li>编写一个自编译的编译器：我认为如果编译器可以自行编译，就可以称其为真正的编译器。</li>\n<li>针对至少一个真实的硬件平台：我见过一些为假设的机器生成代码的编译器，我希望我的编译器可以在真正的硬件上运行。另外，如果可能的话我想编写编译器，以便它可以为不同的硬件平台支持多个后端。</li>\n<li>研究前实用：在编译器领域有很多研究，在此过程中我想从绝对零开始，因此我倾向于采用一种实用的方法，而不是理论繁重的方法，就是说有时候我需要介绍（并实现）一些基于理论的东西。</li>\n<li>遵循 KISS 原则：保持简单，我肯定会在这里使用肯·汤普森的原则：“如有疑问，请使用蛮力。”</li>\n<li>采取许多小步骤以达到最终目标：我将把旅程分解成许多简单的步骤，而不是进行大的飞跃。这将使编译器中的每个新添加内容都变成一口大小且易于消化的东西。</li>\n<li>对其他语言的编译有所启发：了解真实语言的编译过程，有助于了解 babel 编译的过程</li>\n</ul>\n<h1 id="搭建开发环境"><a href="#%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>搭建开发环境</h1>\n<p>使用 Ubuntu 系统，运行以下命令安装软件包即可</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="84937622388641330000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(` \\$ sudo apt-get install build-essential`, `84937622388641330000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"> $ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h1 id="需求"><a href="#%E9%9C%80%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>需求</h1>\n<p>构造一个简单的词法扫描器，识别输入语言中的词法元素或标记</p>\n<h1 id="准备"><a href="#%E5%87%86%E5%A4%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>准备</h1>\n<p>我们将从只有五个词法元素的语言开始：</p>\n<ul>\n<li>这四个基本的数学运算符：*，/，+和-</li>\n<li>具有 1 个或多个数字的十进制整数 0..9</li>\n</ul>\n<p>扫描到的每个元素的结构如下：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="30002058663674536000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`struct token {\n  int token;\n  int intvalue;\n};`, `30002058663674536000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">token</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> token<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> intvalue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>其中 token 字段可以为以下值之一：</p>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="98472456467953780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`enum {\n  T_PLUS, T_MINUS, T_STAR, T_SLASH, T_INTLIT\n};`, `98472456467953780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">{</span>\n  T_PLUS<span class="token punctuation">,</span> T_MINUS<span class="token punctuation">,</span> T_STAR<span class="token punctuation">,</span> T_SLASH<span class="token punctuation">,</span> T_INTLIT\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span></span></pre></div>\n<p>当 token 为 T_INTLIT 时，intvalue 将保存我们搜索到的整数值</p>\n<h1 id="核心逻辑"><a href="#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>核心逻辑</h1>\n<h2 id="scanc"><a href="#scanc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>scan.c</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="33993570378848780000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include &quot;defs.h&quot;\n#include &quot;data.h&quot;\n#include &quot;decl.h&quot;\n\n// 词法分析\n// 返回字符 c 在字符串 s 的位置\nstatic int chrpos(char *s, int c) {\n  char *p;\n\n  p = strchr(s, c);\n  return (p ? p - s : -1);\n}\n\n// 读取文件的每一个字符\nstatic int next(void) {\n  int c;\n\n  if (Putback) {  // Putback 有值时，回退到字符 Putback\n    c = Putback;\n    Putback = 0;\n    return c;\n  }\n\n  c = fgetc(Infile);  // 从文件指针 stream 指向的文件中读取一个字符，读取一个字节后，光标位置后移一个字节，Infile 是全局变量\n  if (\'\\n\' == c)\n    Line++; //  记录行号\n  return c;\n}\n\n// 回退到字符 c 处\nstatic void putback(int c) {\n  Putback = c;\n}\n\n// 跳过空白字符\nstatic int skip(void) {\n  int c;\n\n  c = next(); // 读取第一个字符\n  while (\' \' == c || \'\\t\' == c || \'\\n\' == c || \'\\r\' == c || \'\\f\' == c) { // 遇到空白字符马上跳过\n    c = next();\n  }\n  return c;\n}\n\n// 扫描字符串中的整数，注意整数的连续性\nstatic int scanint(int c) {\n  int k, val = 0;\n\n  // 遇到整数字符累加，直至遇到非整数字符\n  // 为什么不简单地从中减去 ASCII 值使 c 其成为整数？\n  // 因为之后的 chrpos(&quot;0123456789abcdef&quot;) 能转换十六进制数字\n  while ((k = chrpos(&quot;0123456789&quot;, c)) >= 0) {\n    val = val * 10 + k;\n    c = next();\n  }\n\n  // 此时已是非整数字符，回退到 c 字符\n  putback(c);\n  return val;\n}\n\nint scan(struct token *t) {\n  int c;\n\n  // 跳过空白，读取第一个非空字符\n  c = skip();\n\n  // 处理字符\n  switch (c) {\n    case EOF:\n      return 0;\n    case \'+\':\n      t->token = T_PLUS;\n      break;\n    case \'-\':\n      t->token = T_MINUS;\n      break;\n    case \'*\':\n      t->token = T_STAR;\n      break;\n    case \'/\':\n      t->token = T_SLASH;\n      break;\n    default:\n      if (isdigit(c)) {\n        t->intvalue = scanint(c);\n        t->token = T_INTLIT;\n        break;\n    }\n\n    printf(&quot;Unrecognised character %c on line %d\\n&quot;, c, Line);\n    exit(1);\n  }\n\n  // We found a token\n  return 1;\n}`, `33993570378848780000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"defs.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"data.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"decl.h"</span></span>\n\n<span class="token comment">// 词法分析</span>\n<span class="token comment">// 返回字符 c 在字符串 s 的位置</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">chrpos</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>\n\n  p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">?</span> p <span class="token operator">-</span> s <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 读取文件的每一个字符</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Putback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Putback 有值时，回退到字符 Putback</span>\n    c <span class="token operator">=</span> Putback<span class="token punctuation">;</span>\n    Putback <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>Infile<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从文件指针 stream 指向的文件中读取一个字符，读取一个字节后，光标位置后移一个字节，Infile 是全局变量</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'\\n\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span>\n    Line<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//  记录行号</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 回退到字符 c 处</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putback</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Putback <span class="token operator">=</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 跳过空白字符</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n\n  c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取第一个字符</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">\' \'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\t\'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\n\'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\r\'</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token string">\'\\f\'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遇到空白字符马上跳过</span>\n    c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 扫描字符串中的整数，注意整数的连续性</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">scanint</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> k<span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 遇到整数字符累加，直至遇到非整数字符</span>\n  <span class="token comment">// 为什么不简单地从中减去 ASCII 值使 c 其成为整数？</span>\n  <span class="token comment">// 因为之后的 chrpos("0123456789abcdef") 能转换十六进制数字</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token function">chrpos</span><span class="token punctuation">(</span><span class="token string">"0123456789"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val <span class="token operator">=</span> val <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> k<span class="token punctuation">;</span>\n    c <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 此时已是非整数字符，回退到 c 字符</span>\n  <span class="token function">putback</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">scan</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">token</span> <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> c<span class="token punctuation">;</span>\n\n  <span class="token comment">// 跳过空白，读取第一个非空字符</span>\n  c <span class="token operator">=</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 处理字符</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">EOF</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'+\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_PLUS<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'-\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_MINUS<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'*\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_STAR<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'/\'</span><span class="token operator">:</span>\n      t<span class="token operator">-></span>token <span class="token operator">=</span> T_SLASH<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        t<span class="token operator">-></span>intvalue <span class="token operator">=</span> <span class="token function">scanint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t<span class="token operator">-></span>token <span class="token operator">=</span> T_INTLIT<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unrecognised character %c on line %d\\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> Line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// We found a token</span>\n  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id="mainc"><a href="#mainc" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>main.c</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="87559992393059470000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`#include &quot;defs.h&quot;\n#define extern_\n#include &quot;data.h&quot;\n#undef extern_\n#include &quot;decl.h&quot;\n#include <errno.h>\n\nstatic void init() {\n  Line = 1;\n  Putback = \'\\n\';\n}\n\n// Print out a usage if started incorrectly\nstatic void usage(char *prog) {\n  fprintf(stderr, &quot;Usage: %s infile\\n&quot;, prog);\n  exit(1);\n}\n\n// List of printable tokens\nchar *tokstr[] = { &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;intlit&quot; };\n\nstatic void scanfile() {\n  struct token T;\n\n  while (scan(&T)) {\n    printf(&quot;Token %s&quot;, tokstr[T.token]);\n    if (T.token == T_INTLIT)\n      printf(&quot;, value %d&quot;, T.intvalue);\n    printf(&quot;\\n&quot;);\n  }\n}\n\nvoid main(int argc, char *argv[]) {\n  // 检查参数合法性\n  if (argc != 2)\n    usage(argv[0]);\n\n  init();\n\n  // 打不开文件错误处理\n  if ((Infile = fopen(argv[1], &quot;r&quot;)) == NULL) {\n    fprintf(stderr, &quot;Unable to open %s: %s\\n&quot;, argv[1], strerror(errno));\n    exit(1);\n  }\n\n  scanfile();\n  exit(0);\n}`, `87559992393059470000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="c"><pre style="counter-reset: linenumber NaN" class="language-c line-numbers"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"defs.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">define</span> extern_</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"data.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">undef</span> extern_</span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"decl.h"</span></span>\n<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Line <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  Putback <span class="token operator">=</span> <span class="token string">\'\\n\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Print out a usage if started incorrectly</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>prog<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: %s infile\\n"</span><span class="token punctuation">,</span> prog<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// List of printable tokens</span>\n<span class="token keyword">char</span> <span class="token operator">*</span>tokstr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"intlit"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">scanfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">token</span> T<span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Token %s"</span><span class="token punctuation">,</span> tokstr<span class="token punctuation">[</span>T<span class="token punctuation">.</span>token<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>token <span class="token operator">==</span> T_INTLIT<span class="token punctuation">)</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", value %d"</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>intvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 检查参数合法性</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token function">usage</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 打不开文件错误处理</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Infile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unable to open %s: %s\\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">scanfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id="运行结果"><a href="#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>运行结果</h1>\n<h2 id="输入"><a href="#%E8%BE%93%E5%85%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输入</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="51080704104466570000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`23 +\n18 -\n45.6 * 2\n/ 18`, `51080704104466570000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"><span class="token number">23</span> +\n<span class="token number">18</span> -\n<span class="token number">45.6</span> * <span class="token number">2</span>\n/ <span class="token number">18</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="85848603364983210000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`2 + 3 * 5 - 8 / 3`, `85848603364983210000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash"><span class="token number">2</span> + <span class="token number">3</span> * <span class="token number">5</span> - <span class="token number">8</span> / <span class="token number">3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span></span></pre></div>\n<h2 id="输出"><a href="#%E8%BE%93%E5%87%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>输出</h2>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="28838802200113080000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Token intlit, value 23\nToken +\nToken intlit, value 18\nToken -\nToken intlit, value 45\nUnrecognised character . on line 3`, `28838802200113080000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">Token intlit, value <span class="token number">23</span>\nToken +\nToken intlit, value <span class="token number">18</span>\nToken -\nToken intlit, value <span class="token number">45</span>\nUnrecognised character <span class="token builtin class-name">.</span> on line <span class="token number">3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div\n              class="gatsby-code-button-container"\n              data-toaster-id="41008924797752400000"\n              data-toaster-class="gatsby-code-button-toaster"\n              data-toaster-text-class="gatsby-code-button-toaster-text"\n              data-toaster-text="复制成功"\n              data-toaster-duration="3500"\n              onClick="copyToClipboard(`Token intlit, value 2\nToken +\nToken intlit, value 3\nToken *\nToken intlit, value 5\nToken -\nToken intlit, value 8\nToken /\nToken intlit, value 3`, `41008924797752400000`)"\n            >\n              <div\n                class="gatsby-code-button"\n                data-tooltip="复制"\n              >\n                <svg class="gatsby-code-button-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z"/></svg>\n              </div>\n            </div>\n<div class="gatsby-highlight" data-language="bash"><pre style="counter-reset: linenumber NaN" class="language-bash line-numbers"><code class="language-bash">Token intlit, value <span class="token number">2</span>\nToken +\nToken intlit, value <span class="token number">3</span>\nToken *\nToken intlit, value <span class="token number">5</span>\nToken -\nToken intlit, value <span class="token number">8</span>\nToken /\nToken intlit, value <span class="token number">3</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>',
id:"/github/workspace/blog/编译器之旅（一）——词法分析/index.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{date:"2020-02-26 11:15:59",path:"/tour-of-compiler-lexical-analysis/",tags:"编译原理, 词法分析",title:"编译器之旅（一）——词法分析",draft:null}}],length:1,tag:"词法分析",pagesSum:1,page:1}}}});